<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cunyu1943.github.io/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://cunyu1943.github.io/</id>
  <title>JavaPark</title>
  <subtitle>分享编程学习、面试求职、效率工具等方面内容。</subtitle>
  <icon>https://cunyu1943.github.io/logo.svg</icon>
  <updated>2023-10-09T15:30:38.992Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://cunyu1943.github.io/atom.xml"/>
  <link rel="alternate" href="https://cunyu1943.github.io/"/>
  <category term="Java 入门练习"/>
  <category term="C 语言教程"/>
  <category term="C++ 语言教程"/>
  <category term="Python 教程"/>
  <category term="Python3 编程实例"/>
  <category term="Web 前端教程"/>
  <category term="Nginx 教程"/>
  <category term="软件设计师"/>
  <category term="Java 基础系列"/>
  <category term="好物周刊"/>
  <category term="你问我答"/>
  <category term="Java 基础"/>
  <category term="MySQL 教程"/>
  <category term="博客搭建"/>
  <category term="开发工具"/>
  <entry>
    <title type="text">实战训练</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <published>2023-09-29T14:35:48.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：1 - 5</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220625-1-5.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220625-1-5.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：1 - 5</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA1 类型转换</h2>
<h3> 描述</h3>
<p>设计一个方法，将一个小于2147483647的double类型变量以截断取整方式转化为int类型</p>
<h4> 输入描述</h4>
<p>随机 double 类型变量</p>
<h4> 输出描述</h4>
<p>转化后的 int 类型变量</p>
<h3> 示例 1</h3>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：1 - 5</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA1 类型转换</h2>
<h3> 描述</h3>
<p>设计一个方法，将一个小于2147483647的double类型变量以截断取整方式转化为int类型</p>
<h4> 输入描述</h4>
<p>随机 double 类型变量</p>
<h4> 输出描述</h4>
<p>转化后的 int 类型变量</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例 2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要将 <code>double</code> 类型转换为 <code>int</code> 类型，而且是以截断取整的方式，所以直接通过强制转换即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA2 简单运算</h2>
<h3> 描述</h3>
<p>输入两个正整数 a 和 b，输出这两个正整数的和，差，积，商，模（若 a &gt; b 则输出 a - b，a / b，a % b 的值反之输出 b-a，b/a，b%a 的值，不考虑小数，请使用 int 类型）</p>
<h4> 输入描述</h4>
<p>两个正整数</p>
<h4> 输出描述</h4>
<p>它们的和，差，积，商，模。每个值之间用空格隔开</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察条件语句 <code>if...else...</code>，当 <code>a &gt; b</code> 时，执行 <code>if</code> 中的逻辑，否则就执行 <code>else</code> 中的逻辑。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA3 四舍五入</h2>
<h3> 描述</h3>
<p>定义一个 int 类型变量 i, i 为由浮点数变量 d 四舍五入后的整数类型，请将转换后的i进行输出</p>
<h4> 输入描述</h4>
<p>用户随机输入的浮点数</p>
<h4> 输出描述</h4>
<p>四舍五入之后的整数（小数点后一位 &gt;=5 则进一，否则舍去）</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA4 交换变量值</h2>
<h3> 描述</h3>
<p>在不使用第三个变量的情况下交换两个 int 类型变量的值</p>
<h4> 输入描述</h4>
<p>a 变量和 b 变量的值</p>
<h4> 输出描述</h4>
<p>交换后 a 变量和 b 变量的值，中间用空格隔开</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>先将 <code>a</code>、<code>b</code> 之和赋给 <code>a</code>，接着将 <code>a</code> 和 <code>b</code> 的差赋值给 <code>b</code>，此时 <code>b = a + b - b = a</code>，此时就交换了 <code>a</code>、<code>b</code> 的值，然后再将 <code>a</code>、<code>b</code> 的差赋值给 <code>a</code>，此时 <code>a = a + b - a</code>，此时就将 <code>b</code> 的值赋给了 <code>a</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA5 计算商场折扣</h2>
<h3> 描述</h3>
<p>牛牛商场促销活动：</p>
<p>满 100 全额打 9 折；</p>
<p>满 500 全额打 8 折；</p>
<p>满 2000 全额打 7 折；</p>
<p>满 5000 全额打 6 折；</p>
<p>且商场有抹零活动，不足一元的部分不需要付款（类型强制转换）</p>
<p>牛大姨算不清楚自己应该付多少钱，请你帮忙算一下</p>
<h4> 输入描述</h4>
<p>牛大姨账单钱数（int 类型）</p>
<h4> 输出描述</h4>
<p>参加活动后，牛大姨应付钱数(int 类型)</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多分支条件判断，根据题意，将原价分为 5 个档次，然后通过价格所处档次乘以对应折扣，就得到打折后的价格，但是要注意，由于有抹零活动，所以需要强转一下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：6 - 10</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220626-6-10.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220626-6-10.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：6 - 10</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA6 判断体重指数</h2>
<h3> 描述</h3>
<p>体重指数 = 体重 (kg) / ( 身高 (m) × 身高 (m) )，小于18.5属于偏瘦，介于18.5和20.9之间（左闭右开）属于苗条，介于20.9和24.9之间（左闭右闭）属于适中，超过24.9属于偏胖。下面由你来编写一段逻辑，算出输入了身高和体重的用户的体重指数，并返回他们的身材状态。(体重指数请使用double类型)</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：6 - 10</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA6 判断体重指数</h2>
<h3> 描述</h3>
<p>体重指数 = 体重 (kg) / ( 身高 (m) × 身高 (m) )，小于18.5属于偏瘦，介于18.5和20.9之间（左闭右开）属于苗条，介于20.9和24.9之间（左闭右闭）属于适中，超过24.9属于偏胖。下面由你来编写一段逻辑，算出输入了身高和体重的用户的体重指数，并返回他们的身材状态。(体重指数请使用double类型)</p>
<h4> 输入描述：</h4>
<p>用户的身高（m）和用户的体重（kg）</p>
<h4> 输出描述：</h4>
<p>体重指数代表的用户身材状态</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例3</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例4</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>首先计算出体重指数 <code>bim = weight / height / height</code>，然后再用条件语句找出对应区间即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA7 判断学生成绩等级</h2>
<h3> 描述</h3>
<p>现有如下成绩等级A,B,C,D。其中A代表优秀，B代表良好，C代表及格，D代表不及格。现在请你来为学生的成绩进行分级，如果用户输入错误则输出未知等级。</p>
<h4> 输入描述</h4>
<p>成绩等级对应的中文表述</p>
<h4> 输出描述</h4>
<p>优秀，良好，及格，不及格，未知等级</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例3</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例4</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例5</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>可以使用 <code>switch</code> 来匹配对应成绩等级，但是需要注意的是 <code>switch</code> 用来 <code>String</code> 需要 Java 8 及之后才行，否则可能会出错。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA8 邮箱验证</h2>
<h3> 描述</h3>
<p>请根据给出的正则表达式来验证邮箱格式是否合法，如果用户输入的格式合法则输出「邮箱格式合法」，否则输出「邮箱格式不合法」。</p>
<h4> 输入描述</h4>
<p>任意字符串</p>
<h4> 输出描述</h4>
<p>根据输入的邮箱格式判断其合法于不合法，若输入字符串符合邮箱格式则输出邮箱格式合法，否则输出邮箱格式不合法</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>利用 <code>String</code> 的 <code>matches()</code> 方法来讲输入的字符串和正则表达式进行匹配，然后根据匹配后的结果输出对应结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA9 数列求和</h2>
<h3> 描述</h3>
<p>有数列为：9，99，999，...，9999999999。要求使用程序计算此数列的和，并在控制台输出结果。（请尝试使用循环的方式生成这个数列并同时在循环中求和）</p>
<h4> 输入描述</h4>
<p>无</p>
<h4> 输出描述</h4>
<p>将该数列的和直接输出</p>
<h3> 解答</h3>
<p>假设数列第一个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>=</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">a_1 = 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，那么后续递推公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>∗</mo><mn>10</mn><mo>+</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">a_i = a_{i-1} * 10 + 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6736em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，然后利用循环求和即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA10 统计输入正数个数</h2>
<h3> 描述</h3>
<p>控制台输入整数，请设计一个死循环，当用户输入非正数时停止输入。请给出用户输入的正整数个数（默认输入个数不超过 2147483647）</p>
<h4> 输入描述</h4>
<p>若干整数，整数之间用空格隔开</p>
<h4> 输出描述</h4>
<p>控制台输入的正整数个数</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要设计一个死循环，那么可以使用 <code>while</code> 语句，此外，要统计正整数个数，则利用 <code>count</code> 进行叠加即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：11 - 15</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220627-11-15.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220627-11-15.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：11 - 15</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA11 求最小公倍数</h2>
<h3> 描述</h3>
<p>编写一个方法，该方法的返回值是两个不大于 100 的正整数的最小公倍数</p>
<h4> 输入描述</h4>
<p>两个 int 类型变量作为方法的参数</p>
<h4> 输出描述</h4>
<p>int 类型的变量，值为两个数的最小公倍数</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：11 - 15</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA11 求最小公倍数</h2>
<h3> 描述</h3>
<p>编写一个方法，该方法的返回值是两个不大于 100 的正整数的最小公倍数</p>
<h4> 输入描述</h4>
<p>两个 int 类型变量作为方法的参数</p>
<h4> 输出描述</h4>
<p>int 类型的变量，值为两个数的最小公倍数</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要求两个数的最小公倍数，那么这个数至少应该是两个数中大的那个数，所以需要先求出两个树中大的那个，可以利用 <code>Math</code> 包中提供的 <code>max()</code> 方法。此外，如果两个数互质，那么这两个数的最小公倍数就是它们的积。然后在这个区间中循环，用区间中的数去除以 <code>m</code> 和 <code>n</code>，如果存在一个数能同时整除 <code>m</code> 和 <code>n</code>，那么这个数就是它俩的最小公倍数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA12 小球走过路程计算</h2>
<h3> 描述</h3>
<p>一球从h米高度自由落下，每次落地后反弹回原高度的一半再落下，求它在第 n 次落地时共经过了多少米？第 n 次反弹多高？</p>
<h4> 输入描述</h4>
<p>输入小球的初始高度和落地的次数（先输入小球初始高度再输入反弹次数）</p>
<h4> 输出描述</h4>
<p>输出小球反弹的高度和经过的距离（先输出反弹的高度再输出经过的距离，中间用空格隔开）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 备注：</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要经过 <code>n</code> 此落地，所以需要循环 <code>n</code> 次，在每次循环的时候，需要将下落的高度和回弹的高度相加。需要注意的点，第 <code>n</code> 次下落不需要计算回弹的距离了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA13 求平均数</h2>
<h3> 描述</h3>
<p>键盘输入任意多个 10000 以内正整数（负数代表结束），求出它们的平均数，</p>
<h4> 输入描述</h4>
<p>任意多个正整数</p>
<h4> 输出描述</h4>
<p>它们的平均数（平均数为 double 类型，保留两位小数）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>分别创建三个变量来表示输入的数和 <code>sum</code>、平均值 <code>avg</code> 以及个数 <code>count</code>，当遇到输入的值是负数时，就终止循环，然后计算出其平均值 <code>sum / count</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA14 判断质数</h2>
<h3> 描述</h3>
<p>请补全预设代码中判断质数的方法。</p>
<h4> 输入描述</h4>
<p>一个大于1的整数</p>
<h4> 输出描述</h4>
<p>true/false</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要判断一个数是否是质数，那么用它来除以 <code>2</code> ~ <code>number / 2</code> 之间的数，如果存在一个数能被 <code>number</code> 整除，那么就说明这个数不是质数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA15 计算整数位数</h2>
<h3> 描述</h3>
<p>输入一个整数，计算它的位数。如果输入的整数不大于 0 则输出这个数</p>
<h4> 输入描述</h4>
<p>一个整数</p>
<h4> 输出描述</h4>
<p>整数的位数</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例3</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>如果输入的数是非正数，那么就直接输出这个数。如果这个数是正数，那么就将其转换为字符串，然后利用 <code>length()</code> 方法求出其位数即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：16 - 20</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220628-16-20.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220628-16-20.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：16 - 20</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA16 数组遍历</h2>
<h3> 描述</h3>
<p>将用户输入的六个数字填入数组并找出数组中最大值和最小值</p>
<h4> 输入描述</h4>
<p>随机输入的 6 个整数</p>
<h4> 输出描述</h4>
<p>输出数组中的最大值，最小值(最大值最小值之间用空格隔开。若有多个最大值或最小值，输出一次即可，如样例2所示)</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：16 - 20</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA16 数组遍历</h2>
<h3> 描述</h3>
<p>将用户输入的六个数字填入数组并找出数组中最大值和最小值</p>
<h4> 输入描述</h4>
<p>随机输入的 6 个整数</p>
<h4> 输出描述</h4>
<p>输出数组中的最大值，最小值(最大值最小值之间用空格隔开。若有多个最大值或最小值，输出一次即可，如样例2所示)</p>
<h4> 示例1</h4>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>利用 <code>Arrays</code> 中的 <code>sort()</code> 方法对数组 <code>ary</code> 进行排序，排序后的数组中，第一个数就是最小的，最后一个就是最大的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA17 数组倒转</h2>
<h3> 描述</h3>
<p>输入 6 个整数，先将其输出然后再将数组倒转，再次输出数组</p>
<h4> 输入描述</h4>
<p>用户随机输入的 6 个 int 类型变量</p>
<h4> 输出描述</h4>
<p>先输出用户输入顺序的数组（这一步预设代码已给出）</p>
<p>再输出反转后的数组（输出格式为 Arrays.toString(arr)，参考预设代码中的输出格式）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要将数组元素逆序，可以采用双指针，用来指向数组的首尾元素，然后交换两者位置，然后将指针向中间靠近，不断交换位置，直到首尾指针相遇。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA18 二维数组求和</h2>
<h3> 描述</h3>
<p>给定一个二维数组，请你编写一个求和函数，计算出这个数组元素的和</p>
<h4> 输入描述</h4>
<p>无</p>
<h4> 输出描述</h4>
<p>输出二维数组元素的和</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要求二维数组元素的和，那么需要使用双重循环，遍历数组中的元素，然后一个个相加。注意，求数组长度时，外层长度为 <code>arr.length</code>，内层长度为 <code>arr[i].length</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA19 修改 Data 类的定义</h2>
<h3> 描述</h3>
<p>现有一个 Data 类，内部定义了属性 x 和 y，在 main 方法中实例化了 Data 类，并计算了 data 对象中 x 和 y 的和。但是，Data 类的定义存在错误，请你将这些错误修正过来，使得 main 方法中的求和逻辑可以正常执行。</p>
<h4> 输入描述</h4>
<p>两个整数</p>
<h4> 输出描述</h4>
<p>两个整数的和</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要需要修改构造函数和 <code>getter</code> 的访问域，从 <code>private</code> 转为 <code>public</code>。其次，在构造函数中，需要添加 <code>this</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA20 验证年龄</h2>
<h3> 描述</h3>
<p>采用封装的思想，为 Person 类定义年龄属性，要求：</p>
<p>修改年龄时判断其范围，若年龄小于 0 则按 0 输出，若年龄大于 200 则按 200 输出。</p>
<h4> 输入描述</h4>
<p>年龄整数值</p>
<h4> 输出描述</h4>
<ol>
<li>
<p>若年龄小于 0 则输出 0；</p>
</li>
<li>
<p>若年龄大于 200 则输出 200；</p>
</li>
<li>
<p>若年龄介于 [0,200] 之间则直接输出。</p>
</li>
</ol>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例3</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>无非就是考察类中的 <code>get</code> 和 <code>set</code> 方法，但是此时要注意，需要根据题意将年龄进行分段。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：21 - 25</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220629-21-25.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220629-21-25.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：21 - 25</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA21 补全构造方法</h2>
<h3> 描述</h3>
<p>有父类 Base，内部定义了 x、y 属性。有子类 Sub，继承自父类 Base。子类新增了一个 z 属性，并且定义了 calculate 方法，在此方法内计算了父类和子类中 x、y、z 属性三者的乘积。请补全子类构造方法的初始化逻辑，使得该计算逻辑能够正确执行。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：21 - 25</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA21 补全构造方法</h2>
<h3> 描述</h3>
<p>有父类 Base，内部定义了 x、y 属性。有子类 Sub，继承自父类 Base。子类新增了一个 z 属性，并且定义了 calculate 方法，在此方法内计算了父类和子类中 x、y、z 属性三者的乘积。请补全子类构造方法的初始化逻辑，使得该计算逻辑能够正确执行。</p>
<h4> 输入描述</h4>
<p>三个整数：x, y, z</p>
<h4> 输出描述</h4>
<p>三个整数的乘积：x<em>y</em>z</p>
<h3> 示例1</h3>
<p>输入：</p>
<p>1 2 3</p>
<p>输出：</p>
<h3> 解答</h3>
<p>主要考察 <code>super</code> 关键字的运用，<code>Sub</code> 是子类，所以在初始化构造器时，需要先用 <code>super</code> 继承父类 <code>Base</code> 中的构造方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA22 重写计算逻辑</h2>
<h3> 描述</h3>
<p>在父类 Base 中定义了计算方法 calculate()，该方法用于计算两个数的乘积（X*Y）。请在子类Sub中重写该方法，将计算逻辑由乘法改为除法（X/Y）。注意，当分母为0时输出 “Error”。</p>
<h4> 输入描述</h4>
<p>两个整数</p>
<h4> 输出描述</h4>
<p>两个整数的商(int类型，不考虑小数情况)</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>首先，既然是继承，那么要继承父类的构造方法，然后就是利用条件语句 <code>if...else...</code> 进行重写 <code>calculate()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA23 定义打印方法</h2>
<h3> 描述</h3>
<p>已知有三个类：First、Second、Third。要求定义一个打印方法，支持传入任意引用类型的参数（包括上述三个类），并在方法内部打印出对象的字符串形式。</p>
<h4> 输入描述</h4>
<p>类名</p>
<h4> 输出描述</h4>
<p>由该类实例化出来的对象的字符串表示</p>
<h2> 示例1</h2>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>和简单的方法没啥两样，主要区别在于传参的类型，平常传参我们都是传的具体的类，但是这里传的参是一个 <code>Object</code> 类型，表示我们可以传任意类型的参数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA24 类型判断</h2>
<h3> 描述</h3>
<p>父类Base有两个子类：Sub1、Sub2，现有一个方法getClassName()，要求传入Base类型的实例，在方法内部判定其具体的类型，返回的是类型的简单名字（不含包名），请补全getClassName()方法的判断逻辑。</p>
<h4> 输入描述</h4>
<p>输入要实例化的类名：Base、Sub1、Sub2 三者之一。</p>
<h4> 输出描述</h4>
<p>返回实例的实际类名（简化类名，不包含包的名字）。</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<h3> 示例3</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>利用关键字 <code>instanceof</code> 判断一个对象是否属于某个类，接着调用 <code>Object</code> 类的 <code>getClass()</code> 方法来获得 <code>Class</code> 对象，最后用 <code>getSimpleName()</code> 方法就可以或者获取这个对象所属类的名称。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA25 实现抽象方法</h2>
<h3> 描述</h3>
<p>已知抽象类Base中定义了calculate方法，该方法的计算过程依赖于sum()和avg()，而后两个方法均为抽象方法。要求定义Base的子类Sub类，并实现父类的抽象方法，使得main函数中的运算逻辑得以正确执行。</p>
<h4> 输入描述</h4>
<p>两个整数</p>
<h4> 输出描述</h4>
<p>两个整数的和除以两个整数的平均值（平均值为int类型，不考虑小数问题）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制</p>
<p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要就是考察继承的知识点，继承了抽象方法，那么此时只需要对方法进行重写即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：26 - 30</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220630-26-30.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220630-26-30.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：26 - 30</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA26 实现接口</h2>
<h3> 描述</h3>
<p>已知接口 Comparator，内部定义了 max 函数，用于返回两个整数中的最大值。请定义该接口的实现类，使得 main 方法中的比较逻辑可以正确执行，要求实现类的名称为 ComparatorImpl。</p>
<h4> 输入描述</h4>
<p>两个整数</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：26 - 30</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA26 实现接口</h2>
<h3> 描述</h3>
<p>已知接口 Comparator，内部定义了 max 函数，用于返回两个整数中的最大值。请定义该接口的实现类，使得 main 方法中的比较逻辑可以正确执行，要求实现类的名称为 ComparatorImpl。</p>
<h4> 输入描述</h4>
<p>两个整数</p>
<h4> 输出描述</h4>
<p>两个整数中的最大值</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>创建一个类来实现 <code>Comparator</code> 接口，然后重写 <code>max()</code> 方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA27 重写父类方法</h2>
<h3> 描述</h3>
<p>父类 Base 中定义了若干 get 方法，以及一个 sum 方法，sum 方法是对一组数字的求和。请在子类 Sub 中重写 getX() 方法，使得 sum 方法返回结果为 x*10+y</p>
<h4> 输入描述</h4>
<p>整数</p>
<h4> 输出描述</h4>
<p>整数的和</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>注意观察，在父类中 <code>getY()</code> 和 <code>sum()</code> 方法都是加了 <code>final</code> 关键字的，所以代表我们在继承自父类的子类中都是无法修改这两个方法的。而要实现将 <code>x</code> 增大 10 倍，那么就只能操作 <code>getX()</code> 方法了，在这个方法中将 <code>x</code> 放大 10 倍即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA28 创建单例对象</h2>
<h3> 描述</h3>
<p>Singleton 类是单例的，每次调用该类的 getInstance() 方法都将得到相同的实例，目前该类中这个方法尚未完成，请将其补充完整，使得 main() 函数中的判断返回真（不考虑线程安全）。</p>
<h4> 输入描述</h4>
<p>无</p>
<h4> 输出描述</h4>
<p>true</p>
<h3> 解答</h3>
<p>通过观察，我们发现代码中已经有了构造方法，我们只需要补充该类的 <code>getInstance()</code> 方法即可。由于要创建单例对象，所以每次调用 <code>getInstance()</code> 方法时，都应该得到的是同一个 <code>Singleton</code> 类型的实例。此时需要注意，要先对该对象判断是否为 <code>null</code>，是就创建新的，不是则返回当前 <code>instance</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA29 动态字符串</h2>
<h3> 描述</h3>
<p>将一个由英文字母组成的字符串转换成从末尾开始每三个字母用逗号分隔的形式。</p>
<h4> 输入描述</h4>
<p>一个字符串</p>
<h4> 输出描述</h4>
<p>修改后的字符串</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要注意一点，实际上 <code>String</code> 是不可变的，所以我们需要先将其转换为可变的 <code>StringBuilder</code>。然后从后往前开始，每三位遍历一次，然后将逗号 <code>,</code> 插入其中，从而得到新的字符串，最后将新的字符串转换为 <code>String</code> 类型即可。注意，要在 <code>StringBuilder</code> 类型的字符串中插入 <code>,</code>，需要使用到 <code>insert()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA30 统计字符串中字母出现次数</h2>
<h3> 描述</h3>
<p>给定一个字符串，随机输入一个字母，判断该字母在这个字符串中出现的次数</p>
<h4> 输入描述</h4>
<p>任意一个字母</p>
<h4> 输出描述</h4>
<p>字母在字符串中出现次数</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要统计字符串中某字母出现的次数，那么遍历该字符串，然后利用字母和字符串的每一个字符相比较，如果相同则计数加 1，直到字符串末尾。注意，要获取字符串第 <code>index</code> 位的字符，需要使用 <code>charAt(index)</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-06-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：31 - 35</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220701-31-35.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220701-31-35.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：31 - 35</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA31 十进制数转二进制数</h2>
<h3> 描述</h3>
<p>控制台随机输入一个十进制数，请你将它转换为二进制数并输出</p>
<h4> 输入描述</h4>
<p>控制台随机输入的十进制正整数</p>
<h4> 输出描述</h4>
<p>该十进制数转换的二进制数字</p>
<h3> 示例 1</h3>
]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：31 - 35</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA31 十进制数转二进制数</h2>
<h3> 描述</h3>
<p>控制台随机输入一个十进制数，请你将它转换为二进制数并输出</p>
<h4> 输入描述</h4>
<p>控制台随机输入的十进制正整数</p>
<h4> 输出描述</h4>
<p>该十进制数转换的二进制数字</p>
<h3> 示例 1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>直接利用 Java 中封装类 <code>Integer</code> 所提供的 <code>toBinaryString()</code> 方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA32 掷骰子游戏</h2>
<h3> 描述</h3>
<p>开发一个掷骰子游戏，即每次运行程序时，产生一个[1,6]之间的随机整数（关于seed的问题可以参考题解）。</p>
<h4> 输入描述</h4>
<p>随机数种子</p>
<h4> 输出描述</h4>
<p>[1,6] 之间的随机整数</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>既然已经随机输入了随机数种子，那我们只需要利用随机数种子来进行随机算法即可，然后利用 <code>nextInt()</code> 来限制所生成随机数的最大值即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA33 求绝对值，平方根，对数，正弦值</h2>
<h3> 描述</h3>
<p>编写函数求出任意数的绝对值，平方根，对数，正弦值</p>
<h4> 输入描述</h4>
<p>任意数字</p>
<h4> 输出描述</h4>
<p>任意数的绝对值，平方根，对数，正弦值(请直接使用 Math 类的方法进行运算，不考虑精度问题)</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察对 Java 中 <code>Math</code> 类中各种方法的运用，其中求就绝对值用 <code>abs()</code>，求平方根用 <code>sqrt()</code>，求对数用 <code>log()</code>，求正弦值则是用 <code>sin()</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA34 输出某一年的各个月份的天数</h2>
<h3> 描述</h3>
<p>输入任意年份，输出该年份各月天数（请使用 Calendar 类中的方法）</p>
<h4> 输入描述</h4>
<p>任意年份（int 类型整数）</p>
<h4> 输出描述</h4>
<p>x年1月:yy天</p>
<p>x年2月:yy天</p>
<p>x年3月:yy天</p>
<p>x年4月:yy天<br>
x年5月:yy天<br>
x年6月:yy天<br>
x年7月:yy天<br>
x年8月:yy天<br>
x年9月:yy天<br>
x年10月:yy天<br>
x年11月:yy天<br>
x年12月:yy天（x为输入的任意年份，yy为当月天数）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>获取 <code>Calender</code> 对象后，循环获取各个月份，然后通过设置年月日，通过 <code>getActuralMaximum()</code> 方法就可以得到某月最大的天数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA35 日期换算</h2>
<h3> 描述</h3>
<p>已知，纽约时间比北京时间慢12小时，请根据用户输入的北京时间输出相应的纽约时间，若用户输入错误的月份或日期等信息则将其顺加。例如用户输入2021 13 32 14 43 54则生成北京时间为：2022-02-01 14:43:54 纽约时间为：2022-02-01 02:43:54</p>
<h4> 输入描述</h4>
<p>一组字符串，年，月，日，时，分，秒用空格隔开，如果用户数据输入不正常，应输出“您输入的数据不合理”</p>
<h4> 输出描述</h4>
<p>北京时间为：年-月-日 时:分:秒</p>
<p>纽约时间为：年-月-日 时:分:秒</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-07-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习：36 - 40</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220702-36-40.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/20220702-36-40.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门练习：36 - 40</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA36 判断学生成绩</h2>
<h3> 描述</h3>
<p>定义一个方法用于录入学生的考试成绩，要求考试成绩必须在0-100之间，不满足就产生一个自定义异常，控制台输出一个错误信息"分数不合法"（请输出自定义异常对象的错误信息，将错误信息设置为分数不合法）</p>
<h4> 输入描述</h4>
<p>控制台输入的int类型整数</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门练习：36 - 40</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> JAVA36 判断学生成绩</h2>
<h3> 描述</h3>
<p>定义一个方法用于录入学生的考试成绩，要求考试成绩必须在0-100之间，不满足就产生一个自定义异常，控制台输出一个错误信息"分数不合法"（请输出自定义异常对象的错误信息，将错误信息设置为分数不合法）</p>
<h4> 输入描述</h4>
<p>控制台输入的int类型整数</p>
<h4> 输出描述</h4>
<p>若分数合法则输出该分数，否则输出错误信息分数不合法</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 示例2</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>定义一个异常类，然后重写异常类输入异常信息处理的方法，注意此时到了构造方法。然后就是利用 <code>if...else</code> 条件分支对输入进行判断，根据符合的条件进入不同的执行分支。如果输入的分数不满足 <code>[0,100]</code> 的情况，那么就直接抛出异常。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA37 字符串去重</h2>
<h3> 描述</h3>
<p>从键盘获取一串字符串，要求去除重复的字符。请使用 HashSet 解决这一问题</p>
<h4> 输入描述</h4>
<p>键盘输入的任意字符串</p>
<h4> 输出描述</h4>
<p>去重后的字符串（不要求顺序,预设代码中已经给出输出）</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 解答</h3>
<p>既然题目中已经提示了利用 <code>HashSet</code>，那么直接使用就好了，但是要注意的是，往 <code>HashSet</code> 里边添加元素得到的结果是无序的，如果要想得到有序的结果，那么则不能使用 <code>HashSet</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA38 集合遍历</h2>
<h3> 描述</h3>
<p>请使用三种方式遍历一个 <code>list</code> 集合</p>
<h4> 输入描述</h4>
<p>键盘任意输入的五个int类型变量</p>
<h4> 输出描述</h4>
<p>使用三种不同的方法遍历集合，遍历输出时不换行，数字之间用空格隔开</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察基础语法，要牢记的两种 <code>for</code> 循环，一种是普通循环，另一种则是增强循环，而迭代器能掌握就更好了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA39 排队系统</h2>
<h3> 描述</h3>
<p>请设计一个排队程序，用户有普通客人和VIP客人之分，VIP客人不排队（即VIP客人在队列头部），目前队列中已有两位客人小明和小军在排队，请将VIP客人小红新增至队列头部。</p>
<h4> 输入描述</h4>
<p>无</p>
<h4> 输出描述</h4>
<p>预设代码中已经指定输出</p>
<h3> 解答</h3>
<p>对于 <code>VIP</code> 客人，和普通客人最大的区别就在于 <code>VIP</code> 客人不用排队，所以无论何时 <code>VIP</code> 来都可以排到队列的最前边，利用 <code>addFirst()</code> 方法即可实现插队到第一位。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JAVA40 首尾交替出队</h2>
<h3> 描述</h3>
<p>现从一队学生中抽人上台演讲，为公平起见，队头队尾交替抽取，请通过程序实现这个出队的过程。</p>
<h4> 输入描述</h4>
<p>一组学生的名字</p>
<h4> 输出描述</h4>
<p>交替打印队头队尾学生的名字</p>
<h3> 示例1</h3>
<p>输入：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>分为两种情况，如果队列长队不小于 2，那么则不断从队列中依次头、尾打印学生名字。另外一种情况就是此时队伍中只有一个学生了，这个时候只需要打印其名字即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 入门练习"/>
    <published>2022-07-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门练习</title>
    <id>https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/in-action-series/se-exercise-series/"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <published>2023-09-29T14:35:48.000Z</published>
  </entry>
  <entry>
    <title type="text">知识点总结</title>
    <id>https://cunyu1943.github.io/program-language/c-series/20180720-summary.html</id>
    <link href="https://cunyu1943.github.io/program-language/c-series/20180720-summary.html"/>
    <updated>2023-09-28T00:14:11.000Z</updated>
    <summary type="html"><![CDATA[<h1> 知识点总结</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> Debug 和 Release 版本比较</h2>
<ul>
<li>Debug 附加了许多调试信息，主要用于调试，故文件大；</li>
<li>Release 是经过优化后的版本，去掉了调试信息，代码进行了优化，故文件较小，且编译速度快过 Debug，用于发布平台的配置管理器的设置；</li>
</ul>
<h2> 32 位与 64 位</h2>]]></summary>
    <content type="html"><![CDATA[<h1> 知识点总结</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> Debug 和 Release 版本比较</h2>
<ul>
<li>Debug 附加了许多调试信息，主要用于调试，故文件大；</li>
<li>Release 是经过优化后的版本，去掉了调试信息，代码进行了优化，故文件较小，且编译速度快过 Debug，用于发布平台的配置管理器的设置；</li>
</ul>
<h2> 32 位与 64 位</h2>
<ul>
<li>32 位，地址为 32 位，最大使用内存 4G，只能运行 32 位的数据；</li>
<li>64 位，地址为 64 位，既可以运行 32 位的数据，也可以运行 64 位的数据；</li>
</ul>
<h2> 指针</h2>
<ul>
<li>指针是个量，对应一块内存区域；</li>
<li>指针存储的是某个内存单元的地址；</li>
<li>访问方式：</li>
</ul>
<p>1、直接访问：按变量地址存取变量值，取地址符&amp;；</p>
<p>2、间接访问：通过存放变量地址的变量去访问变量，间接运算符*；</p>
<ul>
<li>在函数中改变一个外部变量，需要变量的地址；</li>
<li>若是数据，需要指向数据的指针存储数据的地址；</li>
<li>若是指针，需要指向指针的指针存用户指针的地址；</li>
</ul>
<h2> 数组与指针</h2>
<ul>
<li>p[i]等价于*(p+i)，&amp;p[i]等价于 p+i;</li>
<li>a[i][j]等价于*(*(a+i)+j)，&amp;a[i][j]等价于*(a+i)+j， a[i]等价于*(a+i)；</li>
<li>行数组指针定义方法：数据类型（*指针变量名）[二维数组列数]；</li>
<li>二维数组地址不可变化，数据可以变化，可以在不修改地址的情况下管理数据，指针数组指向的数据不可变化，但地址可以变化，在不修改数据的情况下查看数据；</li>
<li>三维数组与指针，A[i][j][k]的三种表达形式：*(A[i][j]+k)、*(*(A[i]+j)+k)、*(*(*(A+i)+j)+k)；</li>
</ul>
<h2> 函数与指针</h2>
<ul>
<li>若在程序中定义了一个函数，在编译时，编译系统为函数代码分配一段存储空间，这段存储空间的起始地址，称为这个函数的指针，int(*p)(int, int)，代表定义 p 是指向函数的指针变量，可以指向类型为整形且有两个整形参数的函数；</li>
<li>定义返回值为指针值的函数的一般形式：类型名 *函数名（参数列表）；</li>
</ul>
<h2> malloc 和 free 函数</h2>
<ul>
<li>动态内存分配，无法知道内存具体位置时，想要绑定真正的内存空间，则要用到动态分配内存，原型为 extern void* malloc(unsigned int size)，空指针可以转换为任何类型的指针，size 仅仅是申请字节的大小，并不管申请的内存块中存储的数据类型，故申请内存的长度需通过“长度 x sizeof（类型）”的方式给出，使用完之后要用 free 释放内存；</li>
<li>一个类型的指针包含三个信息：地址、步长、内容如何解析；</li>
<li>在栈区开辟一段内存，系统会自己回收，在堆区开辟一段内存，需要手动用 free 释放；</li>
</ul>
<h2> calloc 和 realloc 函数</h2>
<ul>
<li>calloc 原型：void* calloc（unsigned int num，unsigned int size），num：对象个数，size：对象占据的内存字节数，功能是为已经分配的内存重新分配空间并复制内容，会自动将内存初始化为 0；</li>
<li>realloc 原型：void<em>realloc（void</em> ptr，unsigned int size），ptr：已分配的内存地址，size：重新分配的字节数</li>
</ul>
<h2> 内存分区</h2>
<ul>
<li>C/C++中，内存分为：堆、栈、自由存储区、全局/静态存储区、常量存储区；</li>
<li>堆：由 new 分配的内存块，一般对应一个 delete，若没用释放，则程序结束后操作系统自动回收；</li>
<li>栈：编译器需要的时候分配，不需要时自动清楚的变量的存储区，通常是局部变量、函数参数等；</li>
<li>自由存储区：由 malloc 等分配的内存块，必须用 free 释放；</li>
<li>全局存储区：全局变量和静态变量的存储区域，未初始化的两者在相邻存的另一块区域，程序结束后自动释放；</li>
<li>常量存储区：存放常量，不可修改；</li>
</ul>
<h2> sizeof 和 strlen</h2>
<ul>
<li>实例</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>结果：</li>
</ul>
<figure><figcaption></figcaption></figure>
<ul>
<li>结论：对一个数组字符串，sizeof 不管是否初始化，只输出其预留内存大小，而 strlen()输出初始化后的字符串所占内存大小，不含'\0'；</li>
</ul>
<h2> gets 和 scanf</h2>
<ul>
<li>gets 遇到换行符表示结束，而 scanf 遇到空格、制表符、换行则表示结束；</li>
</ul>
<h2> Unicode 字符问题</h2>
<ul>
<li>char 字符串可显示汉字，但字符不可以，字符连在一起用%c%c 可以输出一个汉字；</li>
</ul>
<h2> 结构体</h2>
<ul>
<li>结构体引用方式：结构体数组名[下标].成员名；</li>
<li>结构体指针变量引用成员形式：(*结构体指针名).成员名、结构体指针名-&gt;成员名、结构体变量名.成员名；</li>
</ul>
<h2> 结构体字节对齐机制</h2>
<ul>
<li>结构体变量大小是能够被其最宽基本类型成员的大小所整除；</li>
<li>结构体每个成员相对于结构体首地址的偏移量都是成员大小的整数倍，若有需要编译器会在成员之间加上填充字节；</li>
<li>结构体总大小为结构体最宽基本类型成员大小的整数倍，若有需要编译器会在最末一个成员之后加上填充字节；</li>
</ul>
<h2> 共同体 union</h2>
<ul>
<li>使几个不同类型的变量共占一段内存(相互覆盖)，长度=最长成员所占字节数，不能同时对所有成员初始化；</li>
</ul>
<h2> 深拷贝与浅拷贝</h2>
<ul>
<li>深拷贝：根据指针指向的值，重新申请内存，再以此将指针指向内容复制过来，有相互独立的内存空间，一般复制构造函数和 strcpy 等函数都是深拷贝；</li>
<li>浅拷贝：把对象（结构）里的值完全复制给另一个对象（结构），对于地址也是照抄，类的默认复制构造函数是将类中非静态成员变量逐个复制，是浅拷贝；</li>
</ul>
<h2> 文件分类</h2>
<h3> 按逻辑</h3>
<ul>
<li>记录文件：具有一定结构的记录组成（定长和不定长）；</li>
<li>流式文件：由一个个字符（字节）数据顺序组成；</li>
</ul>
<h3> 按存储介质</h3>
<ul>
<li>普通文件：存储介质文件（磁盘、磁带等）；</li>
<li>设备文件：非存储介质（键盘、显示器、打印机等）；</li>
</ul>
<h3> 按数据组织形式</h3>
<ul>
<li>文本文件：ASXII 文件，每个字节存放一个字符的 ASCII 码；</li>
<li>二进制文件：数据按其在内存中的存储形式原样存放；</li>
</ul>
<h2> 文件处理方法</h2>
<ul>
<li>缓冲文件系统：高级文件系统，系统自动为正在使用的文件开辟内存缓冲区和非缓冲文件系统；</li>
<li>低级文件系统：由用户在程序中为每个文件设定缓冲区；</li>
</ul>
<h2> fscanf 和 fprintf 函数</h2>
<ul>
<li>两者遇到空格或换行时结束；</li>
</ul>
<h2> 文件型结构体</h2>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> fopen 打开模式</h2>
<ul>
<li>只读模式"r"打开文件，该文件必须存在，否则打开失败，r+,rb,rb+,rt,rt+模式打开文件，文件不存在也会失败；</li>
<li>只写模式"w"打开，文件存在则长度清 0，不存在则建立文件，w+,wb,wb+,wt,wt+模式打开文件，文件不存在则建立文件；</li>
<li>a 以附加的方式打开只写文件，若文件不存在，则建立文件，存在则在文件尾部添加数据，a+以附加的方式打开可读写文件，不存在则建立文件，存在则写入数据到文件尾，at 二进制数据的追加，不存在则创建，只能写、at+读写打开一个文本文件，允许读或在文本末追加数据，ab 二进制数据的追加，不存在则创建，只能写；</li>
</ul>
<h2> 阻塞模式和非阻塞模式</h2>
<ul>
<li>非阻塞模式，会引起宕机，会一直执行；</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>阻塞模式，不会引起宕机，执行一步后才能执行下一步；</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="C 语言教程"/>
    <published>2018-07-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">知识点总结</title>
    <id>https://cunyu1943.github.io/program-language/cpp-series/20180720-summary.html</id>
    <link href="https://cunyu1943.github.io/program-language/cpp-series/20180720-summary.html"/>
    <updated>2023-09-28T00:14:11.000Z</updated>
    <summary type="html"><![CDATA[<h1> 知识点总结</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> const 在不同位置时的不同意义</h2>
<ul>
<li>指针类型前：声明一个指向常量的指针，程序中不能通过指针来改变它所指向的值，但指针本身的值可以改变，即指针可以指向其他数据；</li>
<li>"*"号和指针名之间，声明一个指针常量(常指针)，指针本身的值不可改变，即不能指向其他数据，但指向的数据的值可以改变；</li>
<li>两个地方都加，声明指向常量的指针常量，指针本身的值不可改变，指向的数据也不能通过指针改变；</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 知识点总结</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> const 在不同位置时的不同意义</h2>
<ul>
<li>指针类型前：声明一个指向常量的指针，程序中不能通过指针来改变它所指向的值，但指针本身的值可以改变，即指针可以指向其他数据；</li>
<li>"*"号和指针名之间，声明一个指针常量(常指针)，指针本身的值不可改变，即不能指向其他数据，但指向的数据的值可以改变；</li>
<li>两个地方都加，声明指向常量的指针常量，指针本身的值不可改变，指向的数据也不能通过指针改变；</li>
</ul>
<h2> 函数指针</h2>
<ul>
<li>使用函数指针之前，必须先赋值，使它指向一个函数入口地址，赋值语法格式为：函数指针名 = 函数名，其中函数名代表的函数必须是一个已经定义过的，和函数指针具有相同返回类型的函数，指针调用函数格式：<code>(*指针变量)(实参列表)</code>；</li>
</ul>
<h2> 访问权限</h2>
<ul>
<li>public：可被任意实体访问；</li>
<li>protected：只允许本类及子类的成员函数访问；</li>
<li>private：只允许本类的成员函数访问；</li>
</ul>
<h2> 构造函数</h2>
<ul>
<li>创建对象时，自动调用构造函数，不能在程序中直接调用，可有任意类型参数，但不能有返回类型；</li>
<li>构造函数作用：为对象分配空间、为数据成员赋初值、请求其他资源；</li>
<li>构造函数工作：初始化虚函数表、建立基类对象、建立非静态数据成员对象、安置虚基类对象信息、执行构造函数体中的代码；</li>
<li>若一个类中没有定义构造函数，编译器会自动生成不带参数的默认构造函数，格式为：</li>
</ul>
<div class="language-c++ line-numbers-mode" data-ext="c++"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 析构函数</h2>
<ul>
<li>析构函数作用：清除对象、释放内存；</li>
<li>析构函数工作：执行析构函数中的代码、将对象占据的存储空间归还系统、做公共及用户要求的善后工作；</li>
<li>析构函数无参数和返回值，一个类中只能定义一个析构函数，故不能重载，格式为：</li>
</ul>
<div class="language-c++ line-numbers-mode" data-ext="c++"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 内存布局</h2>
<ul>
<li>全局数据区：存放全局变量、静态数据、常量；</li>
<li>代码区：存放类成员函数、其他函数代码；</li>
<li>栈区：存放局部变量、函数参数、返回数据、返回地址；</li>
<li>堆区：自由存储区；</li>
</ul>
<h2> 运算符重载重载形式</h2>
<ul>
<li>重载为类的成员函数，参数个数比原来的运算数少一个</li>
</ul>
<div class="language-c++ line-numbers-mode" data-ext="c++"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>重载为类的友元函数，参数个数与原运算数个数一样多；</li>
</ul>
<div class="language-c++ line-numbers-mode" data-ext="c++"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>函数重载：返回值类型可以相同可以不同，但形参列表一定不同；</li>
</ul>
<h2> 静态数据成员</h2>
<ul>
<li>初始化格式：<code>&lt;类型&gt;&lt;类名&gt;::&lt;静态数据成员&gt;=&lt;值&gt;;</code></li>
<li>引用格式：<code>&lt;类名&gt;::&lt;静态数据成员&gt;;</code></li>
</ul>
<h2> 继承方式</h2>
<ul>
<li>私有继承 private：父类的公有成员和保护成员作为子类的的私有成员，且不能被子类的派生类访问；</li>
<li>公有继承 public：父类的公有成员和保护成员作为子类的成员时，仍保持原有状态，父类私有成员仍为私有；</li>
<li>保护继承 protected：父类的公有成员和保护成员成为子类的保护成员，且只能被他的派生类成员函数或友元访问，父类私有成员仍为私有；</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 派生类构造函数调用顺序：</h2>
<ul>
<li>调用基类的构造函数，调用顺序按继承时说明的顺序；</li>
<li>调用子对象类的构造函数，调用顺序按在类中说明的顺序；</li>
<li>派生类构造函数体中内容；</li>
</ul>
<h2> 函数模版</h2>
<div class="language-C++ line-numbers-mode" data-ext="C++"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 虚函数</h2>
<ul>
<li>虚函数必须是类的成员函数，不能是友元，但可以是另一个类的友元，不能为全局函数，也不能为静态函数，析构函数可以为虚函数，但构造函数不能为虚函数；</li>
</ul>
<h2> 变量初始化</h2>
<ul>
<li>局部变量：定义时，系统不会进行初始化；</li>
<li>全局变量：定义时，系统自动初始化，</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 友元函数</h2>
<ul>
<li>在类中定义过，但不是成员函数，定义在类外部，但有权访问类中成员；</li>
</ul>
<h2> this 指针</h2>
<ul>
<li>只有成员函数才有 <code>this </code>指针，友元函数没有 <code>this</code> 指针；</li>
</ul>
<h2> 静态成员函数与普通成员函数区别：</h2>
<ul>
<li>静态成员函数没有 <code>this</code> 指针，只能访问静态成员（包括静态成员变量和静态成员函数）；</li>
<li>普通成员函数有 <code>this</code> 指针，可以访问类中任意成员，而静态成员函数无 <code>this </code>指针；</li>
</ul>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="C++ 语言教程"/>
    <published>2018-07-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">C++ 系列</title>
    <id>https://cunyu1943.github.io/program-language/cpp-series/</id>
    <link href="https://cunyu1943.github.io/program-language/cpp-series/"/>
    <updated>2023-09-28T00:14:11.000Z</updated>
    <published>2023-09-28T00:14:11.000Z</published>
  </entry>
  <entry>
    <title type="text">turtle 库使用</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20180429-turtle.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20180429-turtle.html"/>
    <updated>2023-09-28T00:14:11.000Z</updated>
    <summary type="html"><![CDATA[<h1> turtle 库使用</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> Turtle图形库</h2>
<p>Turtle 库是 Python 内置的图形化模块，属于标准库之一，位于 Python 安装目录的 lib 文件夹下，常用函数有以下几种：</p>
<h3> 画笔控制函数</h3>
<ol>
<li><code>penup()</code>:抬起画笔；</li>
<li><code>pendown()</code>:落下画笔；</li>
<li><code>pensize(width)</code>:画笔宽度；</li>
<li><code>pencolor(color)</code>:画笔颜色；</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> turtle 库使用</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> Turtle图形库</h2>
<p>Turtle 库是 Python 内置的图形化模块，属于标准库之一，位于 Python 安装目录的 lib 文件夹下，常用函数有以下几种：</p>
<h3> 画笔控制函数</h3>
<ol>
<li><code>penup()</code>:抬起画笔；</li>
<li><code>pendown()</code>:落下画笔；</li>
<li><code>pensize(width)</code>:画笔宽度；</li>
<li><code>pencolor(color)</code>:画笔颜色；</li>
</ol>
<h3> 运动控制函数</h3>
<ol>
<li><code>forward(d)/fd(d)</code>:直行d个像素；</li>
<li><code>circle(r, extent = None)</code>:绘制半径为 r，角度为 extent 的弧形，圆心默认在海龟左侧距离 r 的位置；</li>
</ol>
<h3> 方向控制函数</h3>
<ol>
<li><code>setheading(angle)/seth(angle)</code>:改变前进方向；</li>
<li><code>left(angle)</code>:海龟左转；</li>
<li><code>right(angle)</code>:海龟右转；</li>
</ol>
<h2> 绘制蟒蛇</h2>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结果</h2>
<figure><figcaption></figcaption></figure>
<h2> 绘制五角星</h2>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结果</h2>
<figure><figcaption></figcaption></figure>
<h2> 绘制时钟</h2>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2018-04-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数码管绘制</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20180501-digital-time.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20180501-digital-time.html"/>
    <updated>2023-09-28T00:14:11.000Z</updated>
    <summary type="html"><![CDATA[<h1> 数码管绘制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 利用 Python 中的 turtle 图形库绘制七段数码管，显示当前时间。</h2>
<h2> 代码</h2>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># coding:utf-8</span>
<span class="token comment"># 绘制七段数码管，显示当前时间</span>
<span class="token keyword">import</span> time
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> tt

<span class="token comment"># 绘制间隔</span>
<span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># 绘制单段数码管</span>
<span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tt<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>

    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>

<span class="token comment"># 绘制当前时间</span>
<span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"年"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"月"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"日"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"时"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"分"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'$'</span><span class="token punctuation">:</span>
            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"秒"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">else</span><span class="token punctuation">:</span>
            drawDigit<span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 绘制数码管</span>
<span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>cur_time<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    tt<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    tt<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment"># 主函数</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tt<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">730</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y+%m-%d*%H=%M#%S$'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tt<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 数码管绘制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 利用 Python 中的 turtle 图形库绘制七段数码管，显示当前时间。</h2>
<h2> 代码</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结果</h2>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>通过在mooc网学习相关知识，借鉴相关代码，最终实现本次设计。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2018-05-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">简介</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20210331-intro.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20210331-intro.html"/>
    <updated>2023-09-27T13:30:07.000Z</updated>
    <summary type="html"><![CDATA[<h1> 简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。</p>
<p>本文内容安排如下：</p>
<ol>
<li><strong>什么是 Python</strong></li>
<li><strong>Python 发展历史</strong></li>
<li><strong>Python 优缺点</strong></li>
<li><strong>Python 用途</strong></li>
<li><strong>Python 解释器</strong></li>
<li><strong>Python 开发工具</strong></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>既然要学习 Python，那总得先了解了解它是干啥的、它的发展历史、它有什么特点以及最最重要的，我们能用它干啥？这样才能在我们后续学习的过程中更好的利用好它，提升我们的效率。</p>
<p>本文内容安排如下：</p>
<ol>
<li><strong>什么是 Python</strong></li>
<li><strong>Python 发展历史</strong></li>
<li><strong>Python 优缺点</strong></li>
<li><strong>Python 用途</strong></li>
<li><strong>Python 解释器</strong></li>
<li><strong>Python 开发工具</strong></li>
</ol>
<h2> Python 简介</h2>
<h3> Python 是什么</h3>
<p>正如你所知道的，Python 它和 Java、C、C++ 一样，是一门编程语言。但是不同于其他语言的是，它是一个结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<p>Python 可以说是集大家所长，你可以用简单的几行代码就能实现神奇的效果，无论是简单的文字处理，还是大规模的数据分析，亦或是 WWW 游戏或者游戏，它都不在话下。</p>
<p>总结起来，相比于其他语言，它有着如下几点特色语法结构：</p>
<ul>
<li><strong>解释性</strong>：类似于 PHP 和 Perl，免去了编译这个环节；</li>
<li><strong>交互式</strong>：即我们能够在终端中 Python 提示符 <code>&gt;&gt;&gt;</code> 的后面直接执行代码；</li>
<li><strong>面向对象</strong>：类似于 Java 和 C++，Python 也支持面向对象编程，即将代码封装在对象中；</li>
<li><strong>面向初学者</strong>：相比于其他编程语言，Python 语法简单，往往只需要简单的几行代码就能实现其他语言需要一大段同样效果；</li>
</ul>
<h3> Python 发展历史</h3>
<ul>
<li>
<p>1989 年圣诞节：Guido von Rossum（也就是大家说的 “龟叔”）开始动手写 Python 语言的编译器；</p>
</li>
<li>
<p>1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，底层基于 C 语言实现的，可以调用 C 语言的库函数。在早期的版本中，Python 已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序；</p>
</li>
<li>
<p>1994 年 1 月：Python 1.0 正式发布；</p>
</li>
<li>
<p>2000 年 10 月 16 日：Python 2.0 发布，增加了完整的垃圾回收，提供了对 Unicode 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成；</p>
</li>
<li>
<p>2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，因此目前还有不少公司在项目和运维中使用 Python 2.x 版本；</p>
</li>
</ul>
<p>后续的更新中，基本都是基于 Python 2.0 和 Python 3.0 更新，当前最新的版本应该是 Python 3.9.x 版本，是在 2021 年发布的。Python的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A，即 2 或 3；B 表示功能更新，当出现新功能时就需要增加 B；而 C 则表示小的改动（例如：修复了某个Bug），一旦有修改就增加 C；</p>
<h3> Python 优缺点</h3>
<p>Python 优点很多，总结起来主要有如下几点：</p>
<ul>
<li>优雅、明确、简单；</li>
<li>开发效率高；</li>
<li>可移植性强；</li>
<li>可扩展性强；</li>
<li>可嵌入性好；</li>
</ul>
<p>但是同时 Python 也存在着许多缺点，一般来讲主要集中在以下几点：</p>
<ul>
<li>相对于C/C++等语言而言，运行速度慢；</li>
<li>线程间无法利用多CPU的问题；</li>
<li>代码不能加密；</li>
</ul>
<h3> 应用领域</h3>
<ul>
<li>云计算；</li>
<li>WEB开发；</li>
<li>系统运维；</li>
<li>图形GUI；</li>
<li>金融分析；</li>
<li>科学运算、人工智能；</li>
</ul>
<h2> 安装 Python 解释器</h2>
<p>要正式迈入 Python 学习之路，首先你得保证你使用的电脑上已经有了 Python 解释器。安装之前，先介绍几个 Python 的解释器：</p>
<ul>
<li><strong>CPython</strong><br>
即 C 语言实现的 Python，当我们从 Python 官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行 Python 就是相当于启动了 CPyhton 解释器；</li>
<li><strong>IPython</strong><br>
基于 CPython 之上的一个交互式的解释器，其底层还是基于 CPython，只不过交互性比起 CPython 更好。就好比 Chrome 和 360 极速浏览器，虽然不同，但 360 极速浏览器的内核却是Chrome；</li>
<li><strong>JPython</strong><br>
运行于 Java 平台的 Python 解释器，能够直接将Python代码编译为 Java 字节码并执行；</li>
<li><strong>PyPy</strong><br>
PyPy 最突出的优点就是可以提升Python代码的执行速度，它采用了JIT 技术，对 Python 代码进行了动态编译，这样一来 Python 代码的执行速度得以显著提升；</li>
<li><strong>IronPython</strong><br>
类似于 JPython，它是运行于微软 .Net 平台上的解释器，能够将 Python 代码编译成 .Net 的字节码；</li>
</ul>
<p>通常来讲，要安装 Python 解释器，只需要去其 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">官网</a> 下载对应系统的安装包，然后进行安装即可，这也符合我们大多数人的使用习惯。但如果你确定要学习一段时间的 Python，并且以后要用它来进行各种工作，那么我更推荐使用 <a href="https://docs.conda.io/en/latest/miniconda.html#" target="_blank" rel="noopener noreferrer"><code>Miniconda</code></a>。它方便我们创建不同的环境，然后自由的在各个环境之间切换，对于后续的开发工作十分友好。</p>
<h3> Miniconda 的安装</h3>
<h4> Windows</h4>
<ol>
<li>首先，我们需要去下载选择对应版本的 <a href="https://docs.conda.io/en/latest/miniconda.html#windows-installers" target="_blank" rel="noopener noreferrer">安装包</a>；</li>
<li>然后双击下载好的 <code>.exe</code> 文件；</li>
<li>然后根据屏幕指示，一步一步选择安装位置以及其他指示即可；</li>
<li>完成安装之后，打开你的控制台，然后使用 <code>conda list</code> 进行测试，如果安装成功，此时就会列出你当前环境下所安装的包；</li>
<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>
</ol>
<h4> Linux</h4>
<ol>
<li>首先下载对应 <a href="https://docs.conda.io/en/latest/miniconda.html#linux-installers" target="_blank" rel="noopener noreferrer">安装包</a>；</li>
<li>接着打开终端，进入你的安装包所在路径，使用如下命令进行安装即可；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>按照提示进行安装即可（主要就是选择自己的安装位置以及是否设置环境变量）；</li>
<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>
<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>
</ol>
<h4> macOS</h4>
<ol>
<li>下载 <a href="https://docs.conda.io/en/latest/miniconda.html#macosx-installers" target="_blank" rel="noopener noreferrer">安装包</a>；</li>
<li>如果下载的是 <code>.pkg</code> 格式，双击打开安装即可，如果不是，则打开终端，进入安装包所在路径，然后使用如下命令进行安装；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>根据屏幕提示进行安装；</li>
<li>安装完成后最好重启终端，然后使用 <code>conda list</code> 命令进行测试是否成功；</li>
<li>如果要升级，使用 <code>conda update conda</code> 命令进行升级即可；</li>
</ol>
<h4> ⚠️ 注意</h4>
<p>一般来讲，Linux 和 macOS 都已经是默认安装了 Python 的，而且一般是 2.x 版本；</p>
<p>如果上面给出的下载链接过慢，可以移步 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" target="_blank" rel="noopener noreferrer">清华镜像源</a> 进行下载；</p>
<h3> Hello World！</h3>
<p>好了，我们的解释器安装好了，接下来就是激动人心的写代码了，那就从最最经典的 <code>hello world</code> 开始吧！</p>
<p>打开命令行提示符（Windows）或者终端（Linux/macOS）；</p>
<p>通过如下命令来查看我们的 Python 版本；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着使用如下命令进入 Python 交互环境；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好了，现在就可以编写并运行我们的 <code>hello world</code> 程序了，只需要一行代码，就能打印出 <code>hello world</code>，而如果你要打印其他信息，只需要把括号中双引号引起的内容替换成你想要打印的信息即可，括号中的双引号不仅也可以用单引号代替；</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果如下图所示；</p>
<figure><figcaption></figcaption></figure>
<h2> 开发工具</h2>
<p>要进行 Python 开发，我们只需要一个文本编辑器就可以了，但是要想提高效率，那你一定不能错过 Python 开发神器 - <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener noreferrer">Pycharm</a>。</p>
<p>Pycharm 分为社区版（Community）和专业版（Professional），两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号（或者去找个破解版）。关于它的安装和配置教程，到这里说的也挺多了，那就到下一篇文章再细说吧！</p>
<h2> 总结</h2>
<p>本文到此就算结束了，主要是对 Python 进行了简单介绍，让大家对 Python 有一个大概的认识。然后介绍了如何安装 Python 解释器以及如何在终端中实现自己的 <code>hello world</code>，最后则是给大家推荐了一个 Python 开发工具，不过关于它的具体安装和配置就准备在下一篇文章中去讲了。如果你也感兴趣，那就赶紧去关注我吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2021-03-31T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">玩转 Pycharm</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20210401-pycharm.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20210401-pycharm.html"/>
    <updated>2023-09-27T13:30:07.000Z</updated>
    <summary type="html"><![CDATA[<h1> 玩转 Pycharm</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。</p>
<p>那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：</p>
<ol>
<li><strong>Pycharm 安装</strong></li>
<li><strong>Pycharm 配置</strong></li>
<li><strong>Pycharm 插件</strong></li>
<li><strong>如何用 Pycharm 写程序</strong></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 玩转 Pycharm</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>上一篇文章中，我们对 Python 进行了简介，并且介绍了如何安装 Python 解释器，并给大家推荐了 Python 开发神器 - Pycharm。</p>
<p>那今天，我们就来看看，如何安装以及配置这个神器，让我们的工作效率进一步提高！本文内容安排如下：</p>
<ol>
<li><strong>Pycharm 安装</strong></li>
<li><strong>Pycharm 配置</strong></li>
<li><strong>Pycharm 插件</strong></li>
<li><strong>如何用 Pycharm 写程序</strong></li>
</ol>
<h2> Pycharm 安装</h2>
<p>这部分主要说一下如何安装 Pycharm，本文以 macOS 的安装为例，其他系统下的安装等有空了再做吧，😂，那下边就正式开始安装过程。</p>
<p>关于社区版和专业版的区别就不再多说了，正常来讲我们选社区版就足够了，不过因为我有专业版的账号，所以下边还是以专业版为例来安装，不过大家不用担心，两者的安装过程是一样的。</p>
<ol>
<li>首先去官网下载 <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener noreferrer">安装包</a>；</li>
</ol>
<figure><figcaption>下载</figcaption></figure>
<ol start="2">
<li>双击下载好的 <code>.dmg</code> 安装包；</li>
</ol>
<figure><figcaption>安装</figcaption></figure>
<ol start="3">
<li>将图标拖动到右边的 <code>Applications</code> 即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>好了，就是这么简单，我们的 Pycharm 已经安装好了，从启动台找到并打开就好了；</li>
</ol>
<figure><figcaption>选择打开</figcaption></figure>
<figure><figcaption>Pycharm 主界面</figcaption></figure>
<h2> Pycharm 配置</h2>
<h3> 字体、主题设置</h3>
<p>依次打开 <code>Customize -&gt; All Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</code>，然后在右边选择自己喜欢的主题，以及字体，这里推荐使用 Jetbrains 家自己出品的字体 <code>JetBrains Mono</code>，然后大小的话，选择自己喜欢的号即可；</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption>IDE设置</figcaption></figure>
<p>上面设置的是 IDE 总体界面的字体和主题，下面来进行代码编辑器的字体和主题；</p>
<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Font</code>，依次根据自己的喜好设置字体和大小；</p>
<figure><figcaption>字体设置</figcaption></figure>
<p>然后依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; Color Scheme</code>，然后选择自己喜欢的主题就好；</p>
<figure><figcaption>主题设置</figcaption></figure>
<h3> 编码设置</h3>
<p>一般来讲，macOS 下的默认编码是 UTF-8，但是 Windows 下的却不是，所以要设置一下才行；</p>
<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File Encodings</code>，然后把右边框中的都设置为 UTF-8 即可；</p>
<figure><figcaption></figcaption></figure>
<h3> 开发模版设置</h3>
<p>模板就是一种通用的格式，如果在 Pycharm 中设置了模板，那么每次创建一个 Python 文件的时候都会自动包含模板中的内容，方便我们后续开发；</p>
<p>依次打开 <code>Customize -&gt; All Settings -&gt; Editor -&gt; File and Code Templates</code>，然后选择 <code>Python Script</code>，在右边框中填入自己要自定义的模板即可。而如果你要对其他文件设置模板，那方法也是一样的。</p>
<figure><figcaption></figcaption></figure>
<p>然后我们以后每次创建 Python 文件，上面的模板内容就都会预先定义好了。</p>
<figure><figcaption></figcaption></figure>
<h3> 插件</h3>
<p>虽然 Pycharm 已经很 🐂🍺 了，但是它还有个厉害的地方在于它可以扩展插件。通过插件，能让我们的 Pycharm 用起来更爽。如果我们把 Pycharm 比做王者荣耀里边的英雄，那么插件就像红蓝 Buff，能让我们的英雄变得更加厉害。接下来，就让我来推荐给大家几款我常用的插件吧。</p>
<p>首先，既然要用插件，那我们得知道怎么安装吧。</p>
<p>好的，让我们依次打开 <code>Customize -&gt; All Settings -&gt;Plugins</code>，然后在右边的框中输入你想要的插件搜索即可，搜到结果之后，点击安装即可；</p>
<figure><figcaption>插件安装</figcaption></figure>
<ol>
<li><strong>Rainbow Brackets</strong></li>
</ol>
<p>人如其名，Rainbow 意为彩虹，而这款插件的作用就是给你的代码块之间很清晰的显示出各种颜色的高亮。或许你早已被代码中繁多的括号给搞蒙了，有了它，你就再也不用担心这个问题了。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>Material Theme UI</strong></li>
</ol>
<p>Material Theme UI 是JetBrains IDE（IntelliJ IDEA，WebStorm，Android Studio等）的插件，可将原始外观更改为 Material Design 外观。最初的灵感来自 Sublime Text 的 Material Theme，这个插件提供了一整套设置，可以按照你想要的方式调整 IDE，让你的 IDE 变得更加漂亮！</p>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li><strong>Key Promoter X</strong></li>
</ol>
<p>Key Promoter X 帮助你在工作时学习必要的快捷方式。当你在 IDE 内的按钮上使用鼠标时，Key Promoter X 会显示您应该使用的键盘快捷键。</p>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>CodeGlance</strong></li>
</ol>
<p>类似于 Sublime 中的代码小地图嵌入到编辑器窗格中，可用于快速定位代码；</p>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li><strong>leetcode editor</strong></li>
</ol>
<p>作为一个程序员，摸鱼休闲的时候怎么能忘了刷题呢，这个插件能够让你在 Pycharm 中直接打开 Leetcode 的题目，就算你想在上班时间摸摸鱼，别人也看不出来你是在刷题呀，岂不是美哉。</p>
<figure><figcaption></figcaption></figure>
<h2> 用 Pycharm 写程序</h2>
<p>好了，经过上面的步骤之后，我们就可以用 Pycharm 来写程序了，这一节我们就看看怎么用 Pycharm 实现最简单的 <code>hello world</code> ！</p>
<ol>
<li>首先，点击主界面中的 <code>New Project</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>然后设置项目存放地址，以及配置 Python 解释器，最后点击右下角 <code>Create</code> 按钮即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>此时我们的项目就创建好了，不过此时项目是🈳️的，啥也没有，所以我们需要建立一个 Python 脚本，用来存放我们的代码。在项目上点击鼠标右键，依次点击 <code>New -&gt; Python File</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>填写你的脚本名称，⚠️ 虽然没明确说不能用中文，但是最好不要非主流，老老实实用英文就好；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>好了，脚本文件也建立好了，现在就是编写代码了；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="6">
<li>在代码编辑区域或者选中当前脚本文件，鼠标右键运行即可，或者你也可以使用快捷键 <code>Ctrl + Shift + F10</code> 运行；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，关于 Pycharm 的安装和相关配置以及使用小技巧就介绍到这里了，更多进阶有趣的玩法，欢迎大家留言一起探讨，也欢迎大家加入我的交流群，和大家一起侃侃呀！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2021-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">语言元素</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20210402-language-element.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20210402-language-element.html"/>
    <updated>2023-09-28T00:22:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> 语言元素</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。</p>
<p>今天主要内容就介绍 Python 中的如下知识点：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>运算符</strong></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 语言元素</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。</p>
<p>今天主要内容就介绍 Python 中的如下知识点：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>运算符</strong></li>
</ol>
<h2> 变量</h2>
<h3> 什么是变量</h3>
<p>所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 <strong>能够存储计算结果或者能够表示值的抽象概念</strong>。</p>
<p>我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。</p>
<h3> 变量命名规则</h3>
<p>Python 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。</p>
<p>Python 中，标识符 <strong>必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写</strong>。总结起来就是如下几点：</p>
<ol>
<li>
<p><strong>变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头</strong>，比如我们可以把一个变量命名为 <code>cunyu_1943、_cunyu1943</code> 但是不能命名为 <code>1943_cunyu</code>；</p>
</li>
<li>
<p><strong>变量名中间不能包含空格，但是可以用下划线来进行分割</strong>，比如可以命名为 <code>student_name</code>，但不能命名为 <code>student name</code>；</p>
</li>
<li>
<p><strong>变量名应该尽量简短切具有描述性</strong>，比如我们变量名为 <code>name</code>，那别人一看就知道这是表示名字的，但如果我们命名为 <code>n</code>，那可能就得花更多的时间来搞清楚它到底是啥意思；</p>
</li>
<li>
<p><strong>不要把 Python 中的关键字和内置函数名用做变量名</strong>，Python 中常见的关键字和内置函数如下表；</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">关键字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>and</code></td>
<td style="text-align:left">逻辑运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>as</code></td>
<td style="text-align:left">创建别名</td>
</tr>
<tr>
<td style="text-align:left"><code>assert</code></td>
<td style="text-align:left">用于调试</td>
</tr>
<tr>
<td style="text-align:left"><code>break</code></td>
<td style="text-align:left">跳出循环</td>
</tr>
<tr>
<td style="text-align:left"><code>class</code></td>
<td style="text-align:left">定义类</td>
</tr>
<tr>
<td style="text-align:left"><code>continue</code></td>
<td style="text-align:left">继续循环的下一个迭代</td>
</tr>
<tr>
<td style="text-align:left"><code>def</code></td>
<td style="text-align:left">定义函数</td>
</tr>
<tr>
<td style="text-align:left"><code>del</code></td>
<td style="text-align:left">删除对象</td>
</tr>
<tr>
<td style="text-align:left"><code>elif</code></td>
<td style="text-align:left">在条件语句中使用，等同于 else if</td>
</tr>
<tr>
<td style="text-align:left"><code>else</code></td>
<td style="text-align:left">用于条件语句</td>
</tr>
<tr>
<td style="text-align:left"><code>except</code></td>
<td style="text-align:left">处理异常，发生异常时如何执行</td>
</tr>
<tr>
<td style="text-align:left"><code>False</code></td>
<td style="text-align:left">布尔值，比较运算的结果</td>
</tr>
<tr>
<td style="text-align:left"><code>finally</code></td>
<td style="text-align:left">处理异常，无论是否存在异常，都将执行一段代码</td>
</tr>
<tr>
<td style="text-align:left"><code>for</code></td>
<td style="text-align:left">创建 for 循环</td>
</tr>
<tr>
<td style="text-align:left"><code>from</code></td>
<td style="text-align:left">导入模块的特定部分</td>
</tr>
<tr>
<td style="text-align:left"><code>global</code></td>
<td style="text-align:left">声明全局变量</td>
</tr>
<tr>
<td style="text-align:left"><code>if</code></td>
<td style="text-align:left">写一个条件语句</td>
</tr>
<tr>
<td style="text-align:left"><code>import</code></td>
<td style="text-align:left">导入模块</td>
</tr>
<tr>
<td style="text-align:left"><code>in</code></td>
<td style="text-align:left">检查列表、元组等集合中是否存在某个值</td>
</tr>
<tr>
<td style="text-align:left"><code>is</code></td>
<td style="text-align:left">测试两个变量是否相等</td>
</tr>
<tr>
<td style="text-align:left"><code>lambda</code></td>
<td style="text-align:left">创建匿名函数</td>
</tr>
<tr>
<td style="text-align:left"><code>None</code></td>
<td style="text-align:left">表示 <code>null</code> 值</td>
</tr>
<tr>
<td style="text-align:left"><code>nonlocal</code></td>
<td style="text-align:left">声明非局部变量</td>
</tr>
<tr>
<td style="text-align:left"><code>not</code></td>
<td style="text-align:left">逻辑运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>or</code></td>
<td style="text-align:left">逻辑运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>pass</code></td>
<td style="text-align:left"><code>null</code> 语句，一条什么都不做的语句</td>
</tr>
<tr>
<td style="text-align:left"><code>raise</code></td>
<td style="text-align:left">产生异常</td>
</tr>
<tr>
<td style="text-align:left"><code>return</code></td>
<td style="text-align:left">退出函数并返回值</td>
</tr>
<tr>
<td style="text-align:left"><code>True</code></td>
<td style="text-align:left">布尔值，比较运算的结果</td>
</tr>
<tr>
<td style="text-align:left"><code>try</code></td>
<td style="text-align:left">编写 <code>try...except</code> 语句</td>
</tr>
<tr>
<td style="text-align:left"><code>while</code></td>
<td style="text-align:left">创建 <code>while</code> 循环</td>
</tr>
<tr>
<td style="text-align:left"><code>with</code></td>
<td style="text-align:left">用于简化异常处理</td>
</tr>
<tr>
<td style="text-align:left"><code>yield</code></td>
<td style="text-align:left">结束函数，返回生成器</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left">内置函数</th>
<th style="text-align:left"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>abs()</code></td>
<td style="text-align:left"><code>delattr()</code></td>
<td style="text-align:left"><code>hash()</code></td>
<td style="text-align:left"><code>memoryview()</code></td>
<td><code>set()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>all()</code></td>
<td style="text-align:left"><code>dict()</code></td>
<td style="text-align:left"><code>help()</code></td>
<td style="text-align:left"><code>min()</code></td>
<td><code>setattr()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>any()</code></td>
<td style="text-align:left"><code>dir()</code></td>
<td style="text-align:left"><code>hex()</code></td>
<td style="text-align:left"><code>next()</code></td>
<td><code>slice()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>ascii()</code></td>
<td style="text-align:left"><code>divmod()</code></td>
<td style="text-align:left"><code>id()</code></td>
<td style="text-align:left"><code>object()</code></td>
<td><code>sorted()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>bin()</code></td>
<td style="text-align:left"><code>enumerate()</code></td>
<td style="text-align:left"><code>input()</code></td>
<td style="text-align:left"><code>oct()</code></td>
<td><code>staticmethod()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>bool()</code></td>
<td style="text-align:left"><code>eval()</code></td>
<td style="text-align:left"><code>int()</code></td>
<td style="text-align:left"><code>open()</code></td>
<td><code>str()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>breakpoint()</code></td>
<td style="text-align:left"><code>exec()</code></td>
<td style="text-align:left"><code>isinstance()</code></td>
<td style="text-align:left"><code>ord()</code></td>
<td><code>sum()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>bytearray()</code></td>
<td style="text-align:left"><code>filter()</code></td>
<td style="text-align:left"><code>issubclass()</code></td>
<td style="text-align:left"><code>pow()</code></td>
<td><code>super()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>bytes()</code></td>
<td style="text-align:left"><code>float()</code></td>
<td style="text-align:left"><code>iter()</code></td>
<td style="text-align:left"><code>print()</code></td>
<td><code>tuple()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>callable()</code></td>
<td style="text-align:left"><code>format()</code></td>
<td style="text-align:left"><code>len()</code></td>
<td style="text-align:left"><code>property()</code></td>
<td><code>type()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>chr()</code></td>
<td style="text-align:left"><code>frozenset()</code></td>
<td style="text-align:left"><code>list()</code></td>
<td style="text-align:left"><code>range()</code></td>
<td><code>vars()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>classmethod()</code></td>
<td style="text-align:left"><code>getattr()</code></td>
<td style="text-align:left"><code>locals()</code></td>
<td style="text-align:left"><code>repr()</code></td>
<td><code>zip()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>compile()</code></td>
<td style="text-align:left"><code>globals()</code></td>
<td style="text-align:left"><code>map()</code></td>
<td style="text-align:left"><code>reversed()</code></td>
<td><code>__import__()</code></td>
</tr>
<tr>
<td style="text-align:left"><code>complex()</code></td>
<td style="text-align:left"><code>hasattr()</code></td>
<td style="text-align:left"><code>max()</code></td>
<td style="text-align:left"><code>round()</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2> 数据类型</h2>
<p>要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：</p>
<h3> 数字</h3>
<p>数字数据类型用于存储数值，他们是 <strong>不可改变</strong> 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。</p>
<p>当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 <code>del</code> 语句；</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 支持如下不同的数字类型；</p>
<ul>
<li><code>int</code>：整型（⚠️ Python 2.x 中有 <code>int</code> 和 <code>long</code> 之分，但是 Python 3.x 中只有 <code>int</code>），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；</li>
<li><code>float</code>：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（<code>456.78</code>），还支持科学记数法（<code>4.5678e2</code>）；</li>
<li><code>complex</code>：复数类型，由实部和虚部组成，形如 <code>a + bj</code> 的形式，和数学中的复数表示一样，只是把 <code>i</code> 变成了 <code>j</code>；</li>
</ul>
<h3> 字符串</h3>
<p>以单引号或双引号括起来的任意文本，例如 <code>“cunyu1943”</code> 和 <code>‘cunyu1943’</code>，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中字符串有 2 种取值顺序：</p>
<ol>
<li><strong>从左向右索引</strong>，索引值从 <code>0</code> 开始，最大索引值是字符串长度减 <code>1</code>；</li>
<li><strong>从右向左索引</strong>，索引值从 <code>-1</code> 开始，最大索引值是字符串开头；</li>
</ol>
<p>如果我们要从字符串汇总获取一小段子字符串，则可以使用 <code>[头下标:尾下标]</code> 来进行截取。注意 <strong>左闭右开</strong> 原则，即通过  <code>[头下标:尾下标]</code> 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；</p>
<p>加入我们的字符串 <code>s = 'abcdef’</code>，则通过不同方式索引的结果如下图：</p>
<figure><figcaption>图片源自菜鸟教程</figcaption></figure>
<h3> 列表</h3>
<p><code>list</code> 是一种 <strong>有序</strong> 的集合，能随时向其中添加和删除元素，用 <code>[]</code> 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 <code>[头下标:尾下标]</code> 的方式来进行截取相应子列表，索引方式同字符串，示例如下：</p>
<figure><figcaption>源自菜鸟教程</figcaption></figure>
<p><code>list</code> 中常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>len(list)</code></td>
<td>列表元素个数</td>
</tr>
<tr>
<td><code>list(seq)</code></td>
<td>将元组转换为列表</td>
</tr>
<tr>
<td><code>list.pop()</code></td>
<td>删除 <code>list</code> 末尾的元素</td>
</tr>
<tr>
<td><code>list.pop(index)</code></td>
<td>删除 <code>list</code> 中索引位置为 <code>index</code> 的元素</td>
</tr>
<tr>
<td><code>list.append(obj)</code></td>
<td>在列表末尾添加新的对象</td>
</tr>
<tr>
<td><code>list.count(obj)</code></td>
<td>统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td><code>list.insert(index, obj)</code></td>
<td>将对象插入列表指定位置</td>
</tr>
<tr>
<td><code>list.remove(obj)</code></td>
<td>移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td><code>list.reverse()</code></td>
<td>反转列表中元素</td>
</tr>
<tr>
<td><code>list.index(obj)</code></td>
<td>从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td><code>list.sort(cmp=None, key=None, reverse=False)</code></td>
<td>对原列表进行排序，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</td>
</tr>
</tbody>
</table>
<p>如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 <code>+</code> 来连接不同的数组；</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果我们想要某个列表重复，则可以使用 <code>*</code> ；</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 元组</h3>
<p><code>tuple</code> 也是一种类似于 <code>list</code> 的 <strong>有序</strong> 列表，用 <code>()</code> 标识，内部元素用逗号隔开。它俩的一个最大区别在于： <code>tuple</code> 一旦初始化之后，就不能再修改了，相当于只读列表，所以 <code>tuple</code> 不像 <code>list</code> 一样有类似 <code>append()、insert()</code> 等方法；</p>
<p>常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>len(tuple)</code></td>
<td>计算元组元素个数</td>
</tr>
<tr>
<td><code>tuple(seq)</code></td>
<td>将列表转换为元组</td>
</tr>
<tr>
<td><code>max(tuple)</code></td>
<td>返回元组中元素最大值</td>
</tr>
<tr>
<td><code>min(tuple)</code></td>
<td>返回元组中元素最小值</td>
</tr>
</tbody>
</table>
<p>如果我们要定义一个空的元组，可以用如下的方式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 字典</h3>
<p>列表是有序的对象集合，而字典则是无序的对象集合，字典用 <code>{}</code>标识，元素间用逗号分隔，每个元素由 <code>key:value</code> 的形式组成。</p>
<p>两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。</p>
<p>字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：</p>
<ol>
<li>不允许同一个键出现两次；</li>
<li>键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；</li>
</ol>
<p>字典也有许多方法供我们使用，主要方法总结如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>len(dict)</code></td>
<td>计算字典元素个数，即键的总数</td>
</tr>
<tr>
<td><code>str(dict)</code></td>
<td>输出字典可打印的字符串表示</td>
</tr>
<tr>
<td><code>type(variable)</code></td>
<td>返回输入的变量类型，如果变量是字典就返回字典类型</td>
</tr>
<tr>
<td><code>dict.clear()</code></td>
<td>删除字典内所有元素</td>
</tr>
<tr>
<td><code>dict.copy()</code></td>
<td>返回一个字典的浅复制</td>
</tr>
<tr>
<td><code>dict.haskey(key)</code></td>
<td>如果键在字典 <code>dict</code> 里返回 <code>True</code>，否则返回 <code>False</code></td>
</tr>
<tr>
<td><code>dict.get(key)</code></td>
<td>返回指定键的值</td>
</tr>
<tr>
<td><code>dict.keys()</code></td>
<td>以列表返回一个字典所有的键</td>
</tr>
<tr>
<td><code>dict.values()</code></td>
<td>以列表返回字典中的所有值</td>
</tr>
<tr>
<td><code>dict.items()</code></td>
<td>以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td><code>pop(key)</code></td>
<td>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值</td>
</tr>
<tr>
<td><code>popitem()</code></td>
<td>返回并删除字典中的最后一对键和值</td>
</tr>
</tbody>
</table>
<h3> 布尔值</h3>
<p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。在Python中，可以直接用<code>True</code>、<code>False</code> 直接表示布尔值，也可以通过布尔运算计算出来。</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 运算符</h2>
<p>Python 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>**</code></td>
<td style="text-align:left">指数 (最高优先级)</td>
</tr>
<tr>
<td style="text-align:left"><code>~ + -</code></td>
<td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td style="text-align:left"><code>* / % //</code></td>
<td style="text-align:left">乘，除，取模和取整除</td>
</tr>
<tr>
<td style="text-align:left"><code>+ -</code></td>
<td style="text-align:left">加法减法</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt; &lt;&lt;</code></td>
<td style="text-align:left">右移，左移运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">位 '<code>AND</code>'</td>
</tr>
<tr>
<td style="text-align:left">`^</td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;= &lt; &gt; &gt;=</code></td>
<td style="text-align:left">比较运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&gt; == !=</code></td>
<td style="text-align:left">等于运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>= %= /= //= -= += *= **=</code></td>
<td style="text-align:left">赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>is is not</code></td>
<td style="text-align:left">身份运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>in not in</code></td>
<td style="text-align:left">成员运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>not and or</code></td>
<td style="text-align:left">逻辑运算符</td>
</tr>
</tbody>
</table>
<h3> 算术运算符</h3>
<p>假设变量 <code>a = 10, b = 20</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加 - 两个对象相加</td>
<td style="text-align:left"><code>a + b</code> 输出结果 30</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td>
<td style="text-align:left"><code>a - b</code> 输出结果 -10</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td style="text-align:left"><code>a * b</code> 输出结果 200</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除 - <code>x</code> 除以 <code>y</code></td>
<td style="text-align:left"><code>b / a</code> 输出结果 2</td>
</tr>
<tr>
<td style="text-align:left"><code>%</code></td>
<td style="text-align:left">取模 - 返回除法的余数</td>
<td style="text-align:left"><code>b % a</code> 输出结果 0</td>
</tr>
<tr>
<td style="text-align:left"><code>**</code></td>
<td style="text-align:left">幂 - 返回 <code>x</code> 的 <code>y</code> 次幂</td>
<td style="text-align:left"><code>a**b </code> 为 10 的 20 次方， 输出结果 100000000000000000000</td>
</tr>
<tr>
<td style="text-align:left"><code>//</code></td>
<td style="text-align:left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td>
<td style="text-align:left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td>
</tr>
</tbody>
</table>
<h3> 比较运算符</h3>
<p>假设变量 <code>a = 10, b = 20</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">等于 - 比较对象是否相等</td>
<td style="text-align:left"><code>(a == b)</code> 返回  <code>False</code></td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">不等于 - 比较两个对象是否不相等</td>
<td style="text-align:left"><code>(a != b) </code> 返回  <code>True</code></td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&gt;</code></td>
<td style="text-align:left">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td>
<td style="text-align:left"><code>(a &lt;&gt; b) </code>返回 <code>True</code>。这个运算符类似 !=</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">大于 - 返回 <code>x</code> 是否大于 <code>y</code></td>
<td style="text-align:left"><code>(a &gt; b)</code>  返回 <code>False</code></td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">小于 - 返回 <code>x</code> 是否小于 <code>y</code>。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 <code>True</code> 和 <code>False</code> 等价</td>
<td style="text-align:left"><code>(a &lt; b) </code>返回 <code>True</code></td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">大于等于 - 返回 <code>x</code> 是否大于等于 <code>y</code></td>
<td style="text-align:left"><code>(a &gt;= b)</code> 返回 <code>False</code></td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">小于等于 - 返回 <code>x</code> 是否小于等于 <code>y</code></td>
<td style="text-align:left"><code>(a &lt;= b)</code> 返回 <code>True</code></td>
</tr>
</tbody>
</table>
<h3> 赋值运算符</h3>
<p>假设变量 <code>a = 10, b = 20</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符</td>
<td style="text-align:left"><code>c = a + b</code> 将 <code>a + b</code> 的运算结果赋值为 <code>c</code></td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加法赋值运算符</td>
<td style="text-align:left"><code>c += a</code> 等效于 <code>c = c + a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减法赋值运算符</td>
<td style="text-align:left"><code>c -= a</code> 等效于 <code>c = c - a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘法赋值运算符</td>
<td style="text-align:left"><code>c *= a</code> 等效于 <code>c = c * a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除法赋值运算符</td>
<td style="text-align:left"><code>c /= a</code> 等效于<code> c = c / a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>%=</code></td>
<td style="text-align:left">取模赋值运算符</td>
<td style="text-align:left"><code>c %= a</code> 等效于 <code>c = c % a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>**=</code></td>
<td style="text-align:left">幂赋值运算符</td>
<td style="text-align:left"><code>c \**= a</code> 等效于 <code>c = c ** a</code></td>
</tr>
<tr>
<td style="text-align:left"><code>//=</code></td>
<td style="text-align:left">取整除赋值运算符</td>
<td style="text-align:left"><code>c //= a</code> 等效于 <code>c = c // a</code></td>
</tr>
</tbody>
</table>
<h3> 逻辑运算符</h3>
<p>假设变量 <code>a = 10, b = 20</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">逻辑表达式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>and</code></td>
<td style="text-align:left"><code>x and y</code></td>
<td style="text-align:left">布尔"与" - 如果 <code>x</code> 为 <code>False</code>，<code>x and y</code> 返回 <code>False</code>，否则它返回 <code>y</code> 的计算值</td>
<td style="text-align:left"><code>(a and b)</code> 返回 20</td>
</tr>
<tr>
<td style="text-align:left"><code>or</code></td>
<td style="text-align:left"><code>x or y</code></td>
<td style="text-align:left">布尔"或" - 如果 <code>x</code> 是非 0，它返回 <code>x</code> 的值，否则它返回 <code>y</code> 的计算值</td>
<td style="text-align:left"><code>(a or b)</code> 返回 10</td>
</tr>
<tr>
<td style="text-align:left"><code>not</code></td>
<td style="text-align:left"><code>not x</code></td>
<td style="text-align:left">布尔"非" - 如果 <code>x</code> 为 <code>True</code>，返回 <code>False</code> 。如果 <code>x</code> 为 <code>False</code>，它返回 <code>True</code></td>
<td style="text-align:left"><code>not(a and b)</code> 返回 <code>False</code></td>
</tr>
</tbody>
</table>
<h3> 位运算符</h3>
<p>假设变量 <code>a = 60, b = 13</code>：</p>
<p>按位运算符石将数字转换为二进制之后来进行计算的，则 <code>a = 00111100、b = 00001101</code></p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0</td>
<td style="text-align:left"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td style="text-align:left">`</td>
<td style="text-align:left">`</td>
<td style="text-align:left">按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1</td>
</tr>
<tr>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left">按位异或运算符：当两对应的二进位相异时，结果为 1</td>
<td style="text-align:left"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td style="text-align:left"><code>~</code></td>
<td style="text-align:left">按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。<strong>~x</strong> 类似于 <strong>-x-1</strong></td>
<td style="text-align:left"><code>(~a ) </code>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt;</code></td>
<td style="text-align:left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补 0。</td>
<td style="text-align:left"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;</code></td>
<td style="text-align:left">右移动运算符：把 "&gt;&gt;” 左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td>
<td style="text-align:left"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
<h3> 成员运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>in</code></td>
<td style="text-align:left">如果在指定的序列中找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>
<td style="text-align:left"><code>x</code> 在 <code>y</code> 序列中 , 如果 <code>x</code> 在 <code>y</code> 序列中返回 <code>True</code></td>
</tr>
<tr>
<td style="text-align:left"><code>not in</code></td>
<td style="text-align:left">如果在指定的序列中没有找到值返回 <code>True</code>，否则返回 <code>False</code>。</td>
<td style="text-align:left"><code>x</code> 不在 <code>y</code> 序列中 , 如果 <code>x</code> 不在 <code>y</code> 序列中返回 <code>True</code></td>
</tr>
</tbody>
</table>
<h3> 身份运算符</h3>
<p>身份运算符用于比较两个对象的存储单元：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>is</code></td>
<td style="text-align:left"><code>is</code> 是判断两个标识符是不是引用自一个对象</td>
<td style="text-align:left"><code>x is y</code>, 类似 <code>id(x) == id(y)</code> , 如果引用的是同一个对象则返回 <code>True</code>，否则返回 <code>False</code></td>
</tr>
<tr>
<td style="text-align:left"><code>is not</code></td>
<td style="text-align:left"><code>is not</code> 是判断两个标识符是不是引用自不同对象</td>
<td style="text-align:left"><code>x is not y</code> ， 类似 <code>id(a) != id(b)</code>。如果引用的不是同一个对象则返回结果 <code>True</code>，否则返回 <code>False</code></td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。</p>
<p>如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 <strong>加群</strong>，我人工拉你入群哦。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2021-04-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">条件判断、循环以及循环的终止</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20210403-condition.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20210403-condition.html"/>
    <updated>2023-09-27T15:08:09.000Z</updated>
    <summary type="html"><![CDATA[<h1> 条件判断、循环以及循环的终止</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 条件判断</h2>
<p>条件语句是用来判断给定条件是否满足，并根据判断所得结果从而决定所要执行的操作，通常的逻辑思路如下图；</p>
<figure><figcaption></figcaption></figure>
<h3> 单次判断</h3>
<ul>
<li>形式</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>判断条件<span class="token operator">&gt;</span>：
	<span class="token operator">&lt;</span>执行<span class="token operator">&gt;</span>
<span class="token keyword">else</span>：
	<span class="token operator">&lt;</span>执行<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 条件判断、循环以及循环的终止</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 条件判断</h2>
<p>条件语句是用来判断给定条件是否满足，并根据判断所得结果从而决定所要执行的操作，通常的逻辑思路如下图；</p>
<figure><figcaption></figcaption></figure>
<h3> 单次判断</h3>
<ul>
<li>形式</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>例子</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 多次判断</h3>
<ul>
<li>形式</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>例子</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>注意，<code>if</code> 语句是从上往下判断的；</p>
<h2> 循环</h2>
<h2> while循环</h2>
<p>当条件满足时，就不断循环，直到条件不再满足时即退出循环；</p>
<ul>
<li>例子</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> for...in 循环</h3>
<ul>
<li>例子</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>range()</code>函数用于生成一个整数序列；</p>
<h3> 终止循环</h3>
<ul>
<li>break<br>
用于提前终止循环；</li>
</ul>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li>continue</li>
</ul>
<p>用于跳出当前循环，进入下一次循环；</p>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>本次相关 Python 中的 if 条件判断、for 循环、while 循环以及如何终止 for 或者 while 循环的介绍就到这里，如果你有更好的想法，欢迎评论共同交流！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2021-04-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 实现购物车</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20220420-shopping.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20220420-shopping.html"/>
    <updated>2023-09-27T13:30:07.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python 实现购物车</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 要求</h2>
<figure><figcaption></figcaption></figure>
<h2> 代码</h2>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># --*--coding:utf-8--*--</span>
<span class="token comment"># Author: 村雨</span>

<span class="token keyword">import</span> pprint

productList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Iphone 8'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'GTX2080'</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'Z7KP7-GT'</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'Mac pro'</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'Honor 10'</span><span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'Iphone XR'</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">'Mi 8'</span><span class="token punctuation">,</span> <span class="token number">2999</span><span class="token punctuation">)</span>
               <span class="token punctuation">]</span>

shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入你的工资:'</span><span class="token punctuation">)</span>
salary <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> salary<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入整数'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    salary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>productList<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入你要买的商品的序号：'</span><span class="token punctuation">)</span>
        userWant <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> userWant<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            userWant <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>userWant<span class="token punctuation">)</span>
            <span class="token keyword">if</span> userWant <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>productList<span class="token punctuation">)</span> <span class="token keyword">and</span> userWant <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你要购买的是：'</span><span class="token punctuation">,</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> salary <span class="token operator">&gt;=</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    shoppingList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    salary <span class="token operator">-=</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你已经购买了'</span> <span class="token operator">+</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', 你的余额为 '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对不起，你的余额不足！请努力工作吧！'</span><span class="token punctuation">)</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你当前所购买的商品为：'</span><span class="token punctuation">)</span>
                    <span class="token keyword">for</span> brought <span class="token keyword">in</span> shoppingList<span class="token punctuation">:</span>
                        pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>brought<span class="token punctuation">)</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你当前余额为：'</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
                    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入的商品序号有错，请重新输入'</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> userWant <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------Shopping List----------'</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> brought <span class="token keyword">in</span> shoppingList<span class="token punctuation">:</span>
                pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>brought<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的余额为 '</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Invalid input！！！'</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python 实现购物车</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 要求</h2>
<figure><figcaption></figcaption></figure>
<h2> 代码</h2>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结果</h2>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2022-04-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 3.7 安装 polyglot 失败</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/20220421-polyglot-install.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/20220421-polyglot-install.html"/>
    <updated>2023-09-27T13:30:07.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python 3.7 安装 polyglot 失败</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>学习自然语言处理的过程中，在使用 <code>polyglot</code> 工具进行分词时，安装 <code>polyglot</code> 后发现使用时总是出现如下错误：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ImportError: cannot <span class="token function">import</span> name <span class="token string">'Locale'</span> from <span class="token string">'icu'</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python 3.7 安装 polyglot 失败</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>学习自然语言处理的过程中，在使用 <code>polyglot</code> 工具进行分词时，安装 <code>polyglot</code> 后发现使用时总是出现如下错误：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>防止下次再次遇见，特在此记录如下。博主使用的环境变量如下：</p>
<ul>
<li>Windows 10</li>
<li>Python 3.7</li>
</ul>
<p>以下解决方案均基于已经安装 <code>polyglot</code> 之上，若你还没有安装，请运行如下命令进行安装。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，本文只针对 Windows 平台，若是 Linux 平台，可能不适用，还请谅解。</p>
<h2> 二、解决方法</h2>
<h3> 1. 安装 pyicu</h3>
<p>在网上搜到的解决方案，有的可以通过直接安装 <code>pyicu</code> 即可解决，安装命令如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我尝试过这个方法，最终没能解决我的问题，但还是在这里贴出来，方便大家也尝试一下，能解决最好不过，不能的话也排除了这种方法。</p>
<h3> 2. 安装依赖包</h3>
<p>到 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener noreferrer">Python Extension Packages for Windows - Christoph Gohlke (uci.edu)</a> 去下载所需要的依赖包：</p>
<ul>
<li><strong>pycld2</strong></li>
<li><strong>PyICU</strong></li>
<li><strong>Morfessor</strong></li>
</ul>
<p>具体下载的版本请根据你的 Python 版本进行对应下载，还有一点请注意，我的 Python 3.7 版本在安装 PyICU 2.6 版本时，会报错平台不支持，此时可以尝试安装旧的版本解决该问题；</p>
<p>下载好上述依赖包之后，都是以 <code>.whl</code> 为后缀，然后进行安装，安装过程如下：</p>
<ol>
<li>首先从控制台进入依赖包所在文件夹；</li>
<li>然后使用如下命令进行安装即可；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 三、总结</h2>
<p>通过上面的步骤，我们就可以完成 polyglot 相关依赖的安装了。一开始安装失败问题就得到了解决，也希望对你有所帮助！</p>
<p>最后，既然安装成功了，那就得试一下呀！以下是一个利用 <code>polyglot</code> 分词的结果，可以看看效果如何哦。<br>
另外，你觉得相比于 <code>jieba</code>、<code>SnowNLP</code>、<code>PkuSeg</code>、<code>THULAC</code>、<code>HanLP</code> 等分词工具，谁的效果更胜一筹呢？</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python 教程"/>
    <published>2022-04-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 教程</title>
    <id>https://cunyu1943.github.io/program-language/python-series/tutorial/</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/tutorial/"/>
    <updated>2023-09-27T11:03:03.000Z</updated>
    <published>2023-09-27T11:03:03.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 系列</title>
    <id>https://cunyu1943.github.io/program-language/python-series/</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <published>2023-09-27T07:28:16.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（1 - 5）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181003-1-5.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181003-1-5.html"/>
    <updated>2023-09-27T15:08:09.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（1 - 5）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、实例 1</h2>
<h3> 1. 题目</h3>
<p>假设有四个数字：1、2、3、4，它们能组成多少个互不相同且无重复数字的三位数？各是多少？</p>
<h3> 2. 分析</h3>
<p>通过三层循环，将个、十、百位上的数分别循环一次，当其中任意两位相同时，则跳过，当各位上的数都不同时输出。</p>
<h3> 3. 代码</h3>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（1 - 5）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、实例 1</h2>
<h3> 1. 题目</h3>
<p>假设有四个数字：1、2、3、4，它们能组成多少个互不相同且无重复数字的三位数？各是多少？</p>
<h3> 2. 分析</h3>
<p>通过三层循环，将个、十、百位上的数分别循环一次，当其中任意两位相同时，则跳过，当各位上的数都不同时输出。</p>
<h3> 3. 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二、实例 2</h2>
<h3> 1. 题目</h3>
<p>企业发放的奖金根据利润提成。利润(I)低于或等于 10 万元时，奖金可提 10%；利润高于 10 万元，低于 20 万元时，低于 10 万元的部分按 10% 提成，高于 10 万元的部分，可提成 7.5%；20 万到 40 万之间时，高于 20 万元的部分，可提成 5%；40 万到 60 万之间时高于 40 万元的部分，可提成 3%；60 万到 100 万之间时，高于 60 万元的部分，可提成 1.5%，高于 100 万元时，超过 100 万元的部分按 1% 提成，从键盘输入当月利润 I，求应发放奖金总数。</p>
<h3> 2. 分析</h3>
<p>输入企业利润，然后计算出每一阶段利润内所对应奖金并保存在一个变量中，最后输出保存奖金的变量值即可。</p>
<h3> 3. 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三、实例 3</h2>
<h3> 1. 题目</h3>
<p>一个整数，它加上 100 后是一个完全平方数，再加上 168 又是一个完全平方数，请问该数是多少？</p>
<h3> 2. 分析</h3>
<p>如果一个正整数 a 是某一个整数 b 的平方，那么这个正整数 a 叫做完全平方数;</p>
<p>假设这个数为 x：</p>
<p>1、则：x + 100 = n ** 2, x + 100 + 168 = m ** 2；</p>
<p>2、计算等式：m ** 2 - n ** 2 = (m + n)(m - n) = 168；</p>
<p>3、设置： m + n = i，m - n = j，i * j =168，i 和 j 至少一个是偶数；</p>
<p>4、可得： m = (i + j) / 2， n = (i - j) / 2，i 和 j 要么都是偶数，要么都是奇数；</p>
<p>5、从 3 和 4 推导可知道，i 与 j 均是大于等于 2 的偶数；<br>
6、由于 i * j = 168， j&gt;=2，则 1 &lt; i &lt; 168 / 2 + 1；</p>
<h3> 3. 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四、实例 4</h2>
<h3> 1. 题目</h3>
<p>输入某年某月某日，判断这一天是这一年的第几天？</p>
<h3> 2. 分析</h3>
<p>分别将平年和闰年每个月的天数存入两个列表中，然后输入年月日，判断平年还是闰年，然后进行计算这是这一年中的第几天。</p>
<h3> 3. 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 五、实例 5</h2>
<h3> 1. 题目</h3>
<p>输入三个整数 x,y,z，请把这三个数由小到大输出。</p>
<h3> 2. 分析</h3>
<p>分 3 次输入，每次输入后将其追加到列表中，然后对列表进行排序，最后输出排序好的列表；</p>
<h3> 3. 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 温馨提示</h2>
<p>本文所有代码均已开源，获取源码可以到 <a href="https://gitee.com/cunyu1943/python-series-code" target="_blank" rel="noopener noreferrer">Gitee</a>。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（6 - 10）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181004-6-10.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181004-6-10.html"/>
    <updated>2023-09-27T15:13:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（6 - 10）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 6</h2>
<h3> 题目</h3>
<p>输入一个整数 <code>n</code>，然后打印出斐波那契数列的第 <code>n</code>&nbsp;个值。</p>
<h3> 分析</h3>
<p>利用递归计算斐波那契数列，输入斐波那契数列的 <code>n</code> 位，调用递归计算出第 <code>n</code> 位的数列值。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（6 - 10）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 6</h2>
<h3> 题目</h3>
<p>输入一个整数 <code>n</code>，然后打印出斐波那契数列的第 <code>n</code>&nbsp;个值。</p>
<h3> 分析</h3>
<p>利用递归计算斐波那契数列，输入斐波那契数列的 <code>n</code> 位，调用递归计算出第 <code>n</code> 位的数列值。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 实例7</h2>
<h3> 题目</h3>
<p>将一个列表的数据复制到另一个列表中；</p>
<h3> 分析</h3>
<p>Python复制数据有三种方式：直接赋值、浅拷贝、深拷贝；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例8</h2>
<h3> 题目</h3>
<p>输出 9*9 乘法口诀表</p>
<h3> 分析</h3>
<p>两层循环，将乘法口诀表以左下三角格式打印出</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例9</h2>
<h3> 题目</h3>
<p>暂停一秒输出；</p>
<h3> 分析</h3>
<p>调用<code>time</code>模块中的<code>sleep()</code>方法即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<p>打印出结果时会有明显的停顿。</p>
<figure><figcaption></figcaption></figure>
<h2> 实例10</h2>
<h3> 题目</h3>
<p>暂停一秒输出，并格式化当前时间；</p>
<h3> 分析</h3>
<p>使用<code>time</code>模块的<code>strftime()</code>方法实现；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（11 - 15）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181005-11-15.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181005-11-15.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（11 - 15）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例11</h2>
<h3> 题目</h3>
<p>古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>
<h3> 分析</h3>
<p>可通过定义一个函数，然后利用递归的思想将其实现；</p>
<h3> 代码</h3>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（11 - 15）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例11</h2>
<h3> 题目</h3>
<p>古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>
<h3> 分析</h3>
<p>可通过定义一个函数，然后利用递归的思想将其实现；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例12</h2>
<h3> 题目</h3>
<p>判断101-200之间有多少个素数，并输出所有素数；</p>
<h3> 分析</h3>
<p>先设置一个标志位默认为<code>False</code>，进入循环判断是否为素数，不为素数则置为<code>True</code>，然后将标志位为<code>False</code>的数输出则为所求素数；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例13</h2>
<h3> 题目</h3>
<p>打印出所有的"水仙花数"，所谓"水仙花数"是指一个三位数，其各位数字立方和等于该数本身</p>
<h3> 分析</h3>
<p>对100-1000之内的三位数进行循环，求出这些三位数各自个位、十位、百位上的数，然后将他们的立方和与这个三位数比较，若两者相等则说明这个三位数是水仙花数；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例14</h2>
<h3> 题目</h3>
<p>将一个正整数分解质因数；</p>
<h3> 分析</h3>
<ul>
<li>若这个质数恰等于n，则说明分解质因数的过程结束，打印即可；</li>
<li>若n!=k，但n能被k整除，则应打印出k的值，并用n除以k的商，作为新的正整数n，重复执行第一步；</li>
<li>若n不能被k整除，则用k+1作为k的值,重复执行第一步；</li>
</ul>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例15</h2>
<h3> 题目</h3>
<p>利用条件运算符的嵌套来完成此题：学习成绩&gt;=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示；</p>
<h3> 分析</h3>
<p>输入成绩，判断是否为数字，是数字则判定属于哪个等级，若不是数字怎根据代码设定返回重新输入成绩或者直接退出程序；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（16 - 20）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181006-16-20.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181006-16-20.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（16 - 20）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例16</h2>
<h3> 题目</h3>
<p>输出指定格式的日期；</p>
<h3> 分析</h3>
<p>没啥说的，直接调用 <code>datetime</code> 模块即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2019/3/5 22:47</span>
<span class="token comment"># @Author  : cunyu</span>
<span class="token comment"># @Site    : cunyu1943.github.io</span>
<span class="token comment"># @File    : sixteen.py</span>
<span class="token comment"># @Software: PyCharm</span>

<span class="token keyword">import</span> datetime

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
	<span class="token comment"># 输出当前日期</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment"># 创建日期对象</span>
	Z_Birth <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1994</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">)</span>

	<span class="token comment"># 指定格式输出</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%m/%d/%Y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment"># 日期替换</span>
	Z_Birth <span class="token operator">=</span> Z_Birth<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>year<span class="token operator">=</span>Z_Birth<span class="token punctuation">.</span>year<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">)</span>

	<span class="token comment"># 日期运算</span>
	Next_Z_Birth <span class="token operator">=</span> Z_Birth <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">366</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>Next_Z_Birth<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（16 - 20）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例16</h2>
<h3> 题目</h3>
<p>输出指定格式的日期；</p>
<h3> 分析</h3>
<p>没啥说的，直接调用 <code>datetime</code> 模块即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例17</h2>
<h3> 题目</h3>
<p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数；</p>
<h3> 分析</h3>
<p>遍历字符串，然后统计其中是否为对应种类即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例18</h2>
<h3> 题目</h3>
<p>求 s=a+aa+aaa+aaaa+aa...a 的值，其中a是一个数字。例如 2+22+222+2222+22222 (此时共有 5 个数相加)，几个数相加由键盘控制；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例19</h2>
<h3> 题目</h3>
<p>一个数如果恰好等于它的因子之和，这个数就称为"完数"。例如6=1＋2＋3.编程找出1000以内的所有完数；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例20</h2>
<h3> 题目</h3>
<p>一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（21 - 25）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181007-21-25.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181007-21-25.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（21 - 25）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 21</h2>
<h3> 题目</h3>
<p>猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第 10 天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</p>
<h3> 分析</h3>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（21 - 25）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 21</h2>
<h3> 题目</h3>
<p>猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第 10 天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</p>
<h3> 分析</h3>
<p>采取逆向思维的方法，从后往前推断。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 22</h2>
<h3> 题目</h3>
<p>两个乒乓球队进行比赛，各出三人。甲队为 a,b,c 三人，乙队为 x,y,z 三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a 说他不和 x 比，c 说他不和 x,z 比，请编程序找出三队赛手的名单。</p>
<h3> 分析</h3>
<p>三层循环，然后再加判断即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 23</h2>
<h3> 题目</h3>
<p>打印出如下图案（菱形）:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分析</h3>
<p>先把图形分成两部分来看待，前四行一个规律，后三行一个规律，利用双重 for 循环，第一层控制行，第二层控制列。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 24</h2>
<h3> 题目</h3>
<p>有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。</p>
<h3> 分析</h3>
<p>仔细观察数列的分子分母，可以看到，当前分数的分子等于上一个分数的分子分母之和，而当前分数的分母就等于上一个分数的分子；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 25</h2>
<h3> 题目</h3>
<p>求 1+2!+3!+...+20! 的和。</p>
<h3> 分析</h3>
<p>和累加比较类似，先计算累乘，然后相加即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（26 - 30）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181008-26-30.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181008-26-30.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（26 - 30）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 26</h2>
<h3> 题目</h3>
<p>利用递归方法求 5!。</p>
<h3> 分析</h3>
<p>递归公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = f(n - 1) * n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>；</p>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（26 - 30）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 26</h2>
<h3> 题目</h3>
<p>利用递归方法求 5!。</p>
<h3> 分析</h3>
<p>递归公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = f(n - 1) * n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 27</h2>
<h3> 题目</h3>
<p>利用递归函数调用方式，将所输入的 5 个字符，以相反顺序打印出来。</p>
<h3> 分析</h3>
<p>注意边界条件（即字符串长度为 0 时）；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 28</h2>
<h3> 题目</h3>
<p>有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</p>
<h3> 分析</h3>
<p>利用递归的方法，递归分为回推和递推两个阶段。要想知道第五个人岁数，需知道第四人的岁数，依次类推，推到第一人（10岁），再往回推。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 29</h2>
<h3> 题目</h3>
<p>给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</p>
<h3> 分析</h3>
<p>重点在于如何将这个正整数分解，然后再逆序打印即可；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 30</h2>
<h3> 题目</h3>
<p>一个 5 位数，判断它是不是回文数。即 12321 是回文数，个位与万位相同，十位与千位相同。</p>
<h3> 分析</h3>
<p>和上一个例子一样，重点在于分解该整数，然后再判断个位和万位，十位和千位是否相同；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（31 - 35）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181009-31-35.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181009-31-35.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（31 - 35）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 31</h2>
<h3> 题目</h3>
<p>请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。</p>
<h3> 分析</h3>
<p>用 <code>switch</code> 语句比较好，如果第一个字母一样，则判断用 <code>switch</code> 语句或 <code>if</code> 语句判断第二个字母。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（31 - 35）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 31</h2>
<h3> 题目</h3>
<p>请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。</p>
<h3> 分析</h3>
<p>用 <code>switch</code> 语句比较好，如果第一个字母一样，则判断用 <code>switch</code> 语句或 <code>if</code> 语句判断第二个字母。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 32</h2>
<h3> 题目</h3>
<p>按相反的顺序输出列表的值。</p>
<h3> 分析</h3>
<p>考察Python 中对列表的操作。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 33</h2>
<h3> 题目</h3>
<p>按逗号分隔列表。</p>
<h3> 分析</h3>
<p>利用 <code>join</code> 函数连接。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 34</h2>
<h3> 题目</h3>
<p>练习函数调用。</p>
<h3> 分析</h3>
<p>使用函数，输出三次字符串。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 35</h2>
<h3> 题目</h3>
<p>文本颜色设置。</p>
<h3> 分析</h3>
<p>终端的字符颜色通过转义序列控制，常见显示颜色的参数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">显示方式</th>
<th style="text-align:left">效果</th>
<th style="text-align:left">前景色</th>
<th style="text-align:left">背景色</th>
<th style="text-align:left">颜色描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">终端默认设置</td>
<td style="text-align:left">30</td>
<td style="text-align:left">40</td>
<td style="text-align:left">黑色</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">高亮显示</td>
<td style="text-align:left">31</td>
<td style="text-align:left">41</td>
<td style="text-align:left">红色</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">使用下划线</td>
<td style="text-align:left">32</td>
<td style="text-align:left">42</td>
<td style="text-align:left">绿色</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">闪烁</td>
<td style="text-align:left">33</td>
<td style="text-align:left">43</td>
<td style="text-align:left">黄色</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">反白显示</td>
<td style="text-align:left">34</td>
<td style="text-align:left">44</td>
<td style="text-align:left">蓝色</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">不可见</td>
<td style="text-align:left">35</td>
<td style="text-align:left">45</td>
<td style="text-align:left">紫红色</td>
</tr>
<tr>
<td style="text-align:left">22</td>
<td style="text-align:left">非高亮显示</td>
<td style="text-align:left">36</td>
<td style="text-align:left">46</td>
<td style="text-align:left">青蓝色</td>
</tr>
<tr>
<td style="text-align:left">24</td>
<td style="text-align:left">去下划线</td>
<td style="text-align:left">37</td>
<td style="text-align:left">47</td>
<td style="text-align:left">白色</td>
</tr>
<tr>
<td style="text-align:left">25</td>
<td style="text-align:left">去闪烁</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">27</td>
<td style="text-align:left">非反白显示</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left">可见</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（36 - 40）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181010-36-40.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181010-36-40.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（36 - 40）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 36</h2>
<h3> 题目</h3>
<p>求 100 之内的素数。</p>
<h3> 分析</h3>
<p>所谓素数就是除 1 和自身外，无法被其他数整除的数，那就循环比这个数的平方根还小的数，并取模，如果都不能整除，那么这个数就是素数。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @version : 1.0</span>
<span class="token comment"># @Time    : 2021/4/10 11:02</span>
<span class="token comment"># @Author  : cunyu</span>
<span class="token comment"># @Email   : 747731461@qq.com</span>
<span class="token comment"># @Site    : https://cunyu1943.site</span>
<span class="token comment"># 公众号    : 村雨遥</span>
<span class="token comment"># @File    : 36.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Desc    : 练习实例36</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共有素数 %d 个"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（36 - 40）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 36</h2>
<h3> 题目</h3>
<p>求 100 之内的素数。</p>
<h3> 分析</h3>
<p>所谓素数就是除 1 和自身外，无法被其他数整除的数，那就循环比这个数的平方根还小的数，并取模，如果都不能整除，那么这个数就是素数。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 37</h2>
<h3> 题目</h3>
<p>对 10 个数进行排序。</p>
<h3> 分析</h3>
<p>利用选择法，即从后 9 个比较过程中，选择一个最小的与第一个元素交换，下次类推，即用第二个元素与后 8 个进行比较，并进行交换。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 38</h2>
<h3> 题目</h3>
<p>求一个 3 * 3 矩阵主对角线元素之和。</p>
<h3> 分析</h3>
<p>分别输入矩阵的 9 个元素，然后求对角线元素之和，对角线元素的行列坐标相等。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 39</h2>
<h3> 题目</h3>
<p>有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</p>
<h3> 分析</h3>
<p>调用 <code>sorted_add(s, number)</code>，表示在有序列表 s 中正确位置插入 number 元素；</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 40</h2>
<h3> 题目</h3>
<p>将一个数组逆序输出。</p>
<h3> 分析</h3>
<p>直接用第一个与最后一个交换即可。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（41 - 45）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181011-41-45.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181011-41-45.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（41 - 45）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 41</h2>
<h3> 题目</h3>
<p>模仿静态变量的用法。</p>
<h3> 分析</h3>
<p>所谓静态变量其实就是说它的作用域是整个程序。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @version : 1.0</span>
<span class="token comment"># @Time    : 2021/4/10 13:24</span>
<span class="token comment"># @Author  : cunyu</span>
<span class="token comment"># @Email   : 747731461@qq.com</span>
<span class="token comment"># @Site    : https://cunyu1943.site</span>
<span class="token comment"># 公众号    : 村雨遥</span>
<span class="token comment"># @File    : 41.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Desc    : 练习实例41</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">:</span>
    static_value <span class="token operator">=</span> <span class="token number">10</span>

    <span class="token keyword">def</span> <span class="token function">addStatic</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>static_value <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>static_value<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    demo <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        demo<span class="token punctuation">.</span>addStatic<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（41 - 45）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 41</h2>
<h3> 题目</h3>
<p>模仿静态变量的用法。</p>
<h3> 分析</h3>
<p>所谓静态变量其实就是说它的作用域是整个程序。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 42</h2>
<h3> 题目</h3>
<p>学习使用 auto 定义变量的用法。</p>
<h3> 分析</h3>
<p>Python 中不存在 auto 关键字，所以利用变量作用域来进行示范。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 43</h2>
<h3> 题目</h3>
<p>模仿静态变量 (static) 另一案例。</p>
<h3> 分析</h3>
<p>类似于实例 41。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 44</h2>
<h3> 题目</h3>
<p>两个 3 行 3 列的矩阵，实现其对应位置的数据相加，并返回一个新矩阵：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分析</h3>
<p>只需要将矩阵对应位置上的元素进行相加，存放到新的矩阵中即可。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 45</h2>
<h3> 题目</h3>
<p>统计 1 到 100 之和。</p>
<h3> 分析</h3>
<p>就是一个累加的过程，利用循环即可实现。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（46 - 50）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181012-46-50.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181012-46-50.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（46 - 50）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 46</h2>
<h3> 题目</h3>
<p>求输入数字的平方，如果平方运算后小于 50 则退出。</p>
<h3> 分析</h3>
<p>判断输入数的平方和 50 的大小，然后做出判断即可。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @version : 1.0</span>
<span class="token comment"># @Time    : 2021/4/10 20:42</span>
<span class="token comment"># @Author  : cunyu</span>
<span class="token comment"># @Email   : 747731461@qq.com</span>
<span class="token comment"># @Site    : https://cunyu1943.site</span>
<span class="token comment"># 公众号    : 村雨遥</span>
<span class="token comment"># @File    : 46.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Desc    : 练习实例46</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入：\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'num 的平方：%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> num <span class="token operator">*</span> num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（46 - 50）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 46</h2>
<h3> 题目</h3>
<p>求输入数字的平方，如果平方运算后小于 50 则退出。</p>
<h3> 分析</h3>
<p>判断输入数的平方和 50 的大小，然后做出判断即可。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 47</h2>
<h3> 题目</h3>
<p>两个变量值互换。</p>
<h3> 分析</h3>
<p>可以利用 Python 的连续赋值特性。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 48</h2>
<h3> 题目</h3>
<p>数字比较。</p>
<h3> 分析</h3>
<p>主要考虑如何输入数字，然后比较数字之间的大小关系。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 49</h2>
<h3> 题目</h3>
<p>使用 lambda 来创建匿名函数。</p>
<h3> 分析</h3>
<p>考察用 lambda 来创建并使用函数的知识点。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 50</h2>
<h3> 题目</h3>
<p>输出一个随机数。</p>
<h3> 分析</h3>
<p>调用 <code>random</code> 模块。</p>
<h3> 代码</h3>
<div class="language-python line-numbers-mode" data-ext="py"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python3 编程实例（51 - 55）</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/20181013-51-55.html</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/20181013-51-55.html"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> Python3 编程实例（51 - 55）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 51</h2>
<h3> 题目</h3>
<p>学习使用按位与 &amp; 。</p>
<h3> 分析</h3>
<p>按位与时，相当于将其转换为二进制，然后按照如下规则进行与运算即可；</p>
<ul>
<li><code>1 &amp; 1 = 1</code></li>
<li><code>0 &amp; 0 = 0</code></li>
<li><code>0 &amp; 1 = 0</code></li>
<li><code>1 &amp; 0 = 0</code></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> Python3 编程实例（51 - 55）</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 实例 51</h2>
<h3> 题目</h3>
<p>学习使用按位与 &amp; 。</p>
<h3> 分析</h3>
<p>按位与时，相当于将其转换为二进制，然后按照如下规则进行与运算即可；</p>
<ul>
<li><code>1 &amp; 1 = 1</code></li>
<li><code>0 &amp; 0 = 0</code></li>
<li><code>0 &amp; 1 = 0</code></li>
<li><code>1 &amp; 0 = 0</code></li>
</ul>
<h3> 代码</h3>
<div class="language-Python line-numbers-mode" data-ext="Python"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 52</h2>
<h3> 题目</h3>
<p>学习使用按位或 <code>|</code> 。</p>
<h3> 分析</h3>
<p>按位或时，相当于将其转换为二进制，然后按照如下规则进行或运算即可；</p>
<ul>
<li><code>1 | 1 = 1</code></li>
<li><code>0 | 0 = 0</code></li>
<li><code>0 | 1 = 1</code></li>
<li><code>1 | 0 = 1</code></li>
</ul>
<h3> 代码</h3>
<div class="language-Python line-numbers-mode" data-ext="Python"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 53</h2>
<h3> 题目</h3>
<p>学习使用按位异或 <code>^</code> 。</p>
<h3> 分析</h3>
<p>按位异或时，相当于将其转换为二进制，然后按照如下规则进行异或运算即可；</p>
<ul>
<li><code>1 ^ 1 = 0</code></li>
<li><code>0 ^ 0 = 0</code></li>
<li><code>0 ^ 1 = 1</code></li>
<li><code>1 ^ 0 = 1</code></li>
</ul>
<h3> 代码</h3>
<div class="language-Python line-numbers-mode" data-ext="Python"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 54</h2>
<h3> 题目</h3>
<p>取一个整数 a 从右端开始的 4 〜 7 位。</p>
<h3> 分析</h3>
<ol>
<li>先将 a 向右移动 4 位；</li>
<li>设置一个低 4 位全为 1，其余全为 0 的数；</li>
<li>然后将上面的两个数进行 <code>&amp;</code> 运算即可；</li>
</ol>
<h3> 代码</h3>
<div class="language-Python line-numbers-mode" data-ext="Python"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> 实例 55</h2>
<h3> 题目</h3>
<p>学习使用按位取反 <code>~</code>。</p>
<h3> 分析</h3>
<p>按位取反，就是将其转换为二进制后，按照如下规则进行转换：</p>
<ul>
<li>按位取反：二进制每一位取反，0 变为 1，1 变为 0；</li>
<li>最高位为符号位，整数符号位为 0，负数符号位为 1；</li>
</ul>
<h3> 代码</h3>
<div class="language-Python line-numbers-mode" data-ext="Python"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结果</h3>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Python3 编程实例"/>
    <published>2018-10-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 实例</title>
    <id>https://cunyu1943.github.io/program-language/python-series/instance/</id>
    <link href="https://cunyu1943.github.io/program-language/python-series/instance/"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <published>2023-09-27T07:28:16.000Z</published>
  </entry>
  <entry>
    <title type="text">Nginx 教程</title>
    <id>https://cunyu1943.github.io/java-tutorial/nginx-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/nginx-series/"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <published>2023-09-26T15:06:57.000Z</published>
  </entry>
  <entry>
    <title type="text">Axios 简单使用指南</title>
    <id>https://cunyu1943.github.io/java-tutorial/web-front-series/20230926-axios.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/web-front-series/20230926-axios.html"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> Axios 简单使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、概述</h2>
<h3> 1. 什么是 Axios ？</h3>
<p><code>Axios</code> 是一个开源的基于 <code>promise</code> 的 <code>HTTP</code> 请求库，一般常用于浏览器和 <code>node.js</code> 中。它能够在具有相同代码库的浏览器和 <code>nodejs</code> 中同时运行，在服务器侧，它利用服务器端原生的 <code>node.js</code>  <code>http</code> 模块，而在客户端侧（一般是浏览器），则使用的是 <code>XMLHttpRequest</code>。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Axios 简单使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、概述</h2>
<h3> 1. 什么是 Axios ？</h3>
<p><code>Axios</code> 是一个开源的基于 <code>promise</code> 的 <code>HTTP</code> 请求库，一般常用于浏览器和 <code>node.js</code> 中。它能够在具有相同代码库的浏览器和 <code>nodejs</code> 中同时运行，在服务器侧，它利用服务器端原生的 <code>node.js</code>  <code>http</code> 模块，而在客户端侧（一般是浏览器），则使用的是 <code>XMLHttpRequest</code>。</p>
<p>从 <code>Vue 2.0</code> 版本开始，就极力推荐使用 <code>Axios</code> 来进行 <code>ajax</code> 请求，其源码仓库为：</p>
<blockquote>
<p><code>https://github.com/axios/axios</code></p>
</blockquote>
<h3> 2. 特性</h3>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 <code>node.js</code> 创建 <code>http</code> 请求</li>
<li>支持 <code>Promise API</code></li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>支持自动转换 <code>JSON</code> 数据</li>
<li>客户端侧支持防御 <code>XSRF</code></li>
</ul>
<h3> 3. Axios 的安装</h3>
<p><code>Axios</code> 安装主要有两种方式，一种是通过引入 <code>CDN</code>，另一种则是通过 <code>npm</code> 进行安装，两中安装的方式介绍如下。</p>
<ol>
<li>使用 CDN</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>使用 npm</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. 支持的浏览器</h3>
<figure><img src="https://github.com/alrra/browser-logos/raw/main/src/main-desktop-browser-logos.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、Axios 的使用</h2>
<p><code>Axios</code> 提供了两种不同的方式来发送 <code>HTTP</code> 请求，其中一种是直接通过 <code>axios()</code> 方法，而另一种则是通过 <code>axios</code> 对象提供的跟 <code>HTTP</code> 方法对应起来的方法来发起请求，例如：</p>
<ul>
<li><code>axios.get()</code></li>
<li><code>axios.post()</code></li>
<li><code>axios.update()</code></li>
<li><code>axios.put()</code></li>
<li>……</li>
</ul>
<h3> 1. get 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. post 请求</h3>
<ul>
<li>语法：</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. put 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. delete 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三、总结</h2>
<p>以上就是本文的所有内容了，主要介绍了 <code>Axios</code> 的定义、特性、如何安装以及所支持的浏览器，然后介绍了如何使用 <code>Axios</code> 来模拟发起最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code> 以及 <code>DELETE</code> 请求。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Web 前端教程"/>
    <published>2023-09-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">内存管理函数</title>
    <id>https://cunyu1943.github.io/program-language/c-series/20180308-memory-manage.html</id>
    <link href="https://cunyu1943.github.io/program-language/c-series/20180308-memory-manage.html"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> 内存管理函数</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> malloc函数</h2>
<ul>
<li>
<p>原型：<code>extern void* malloc(unsigned int size)</code>；</p>
</li>
<li>
<p>功能：动态分配内存；</p>
</li>
<li>
<p>注意：<code>size</code> 仅仅为申请内存字节大小，与申请内存块中存储的数据类型无关，故编程时需要通过以下方式给出：<code>长度 * sizeof(数据类型)</code>；</p>
</li>
<li>
<p>示例：</p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 内存管理函数</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> malloc函数</h2>
<ul>
<li>
<p>原型：<code>extern void* malloc(unsigned int size)</code>；</p>
</li>
<li>
<p>功能：动态分配内存；</p>
</li>
<li>
<p>注意：<code>size</code> 仅仅为申请内存字节大小，与申请内存块中存储的数据类型无关，故编程时需要通过以下方式给出：<code>长度 * sizeof(数据类型)</code>；</p>
</li>
<li>
<p>示例：</p>
</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> free函数</h2>
<ul>
<li>原型：<code>void free(void * ptr)</code>；</li>
<li>功能：搭配 <code>malloc()</code> 函数，释放 <code>malloc</code> 函数申请的动态内存；</li>
<li>注意：对于 <code>free(ptr)</code>，若 <code>ptr</code> 为 <code>NULL</code>，则可进行多次释放，若 <code>ptr</code> 是非空指针，则 <code>free</code> 对 <code>ptr</code> 只能进行一次操作，否则程序将崩溃；</li>
<li>示例：见 <code>malloc</code> 函数；</li>
<li>结果：见 <code>malloc</code> 函数；</li>
</ul>
<h2> realloc函数</h2>
<ul>
<li>
<p>原型： <code>void* realloc(void * ptr,unsigned int size)</code>；</p>
</li>
<li>
<p>功能：先判断当前指针是否有足够的连续空间，若足够，扩大 <code>ptr</code> 指向的地址并返回，若不够，怎按<code>size</code> 指定的大小分配空间，将原数据 <code>copy</code> 到新分配的内存中，然后释放原 <code>ptr</code> 所指向区域；</p>
</li>
<li>
<p>注意：内存使用完毕后，应使用 <code>free()</code> 函数释放，但原来的指针是自动释放，不需要使用free；</p>
</li>
<li>
<p>示例：</p>
</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> calloc函数</h2>
<ul>
<li>
<p>原型：<code>void* calloc（unsigned int num，unsigned int size）</code>；</p>
</li>
<li>
<p>功能：为已经分配的内存重新分配空间并复制内容；</p>
</li>
<li>
<p>注意：<code>num</code>：对象个数，<code>size</code>：对象占据的内存字节数，相较于 <code>malloc</code> 函数，<code>calloc</code> 函数会自动将内存初始化为 0；</p>
</li>
<li>
<p>示例：</p>
</li>
</ul>
<div class="language-c line-numbers-mode" data-ext="c"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="C 语言教程"/>
    <published>2018-03-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">C 系列</title>
    <id>https://cunyu1943.github.io/program-language/c-series/</id>
    <link href="https://cunyu1943.github.io/program-language/c-series/"/>
    <updated>2023-09-27T07:28:16.000Z</updated>
    <published>2023-09-26T15:06:57.000Z</published>
  </entry>
  <entry>
    <title type="text">软件设计师</title>
    <id>https://cunyu1943.github.io/tutorial/software-designer-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/software-designer-series/"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <published>2023-09-26T15:06:57.000Z</published>
  </entry>
  <entry>
    <title type="text">简介与环境搭建</title>
    <id>https://cunyu1943.github.io/java-tutorial/nginx-series/20221016-intro-install.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/nginx-series/20221016-intro-install.html"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> 简介与环境搭建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 简介与环境搭建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA</a></p>
</div>
<h2> 一、简介</h2>
<h3> 1. 什么是 Nginx</h3>
<p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持搞到 50000 哥并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p>
<p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p>
<h3> 2. Nginx 的版本</h3>
<p>常用版本主要分为四大阵营：</p>
<ol>
<li><code>Nginx</code> 开源版</li>
<li><code>Nginx plus</code> 商业版</li>
<li><code>Openresty</code></li>
<li><code>Tengine</code></li>
</ol>
<h2> 二、下载</h2>
<p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p>
<p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p>
<blockquote>
<p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/download.html</a></p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h2> 三、编译安装与依赖检查</h2>
<p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br>
进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>这里例举几个安装时可能会遇到的错误：</p>
<ol>
<li><strong>C 编译器缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>PCRE Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>zlib Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br>
如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>
</p>
<h2> 四、Nginx 启停</h2>
<p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p>
<p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p>
<h3> 1. 启动</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br>
然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p>
<figure><figcaption></figcaption></figure>
<h3> 2. 快速停止</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. 关闭前完成已接受的连接请求</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. 重新加载配置</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后在启动的方式，此时就可以通过这个命令来实现。</p>
<h2> 五、防火墙</h2>
<h3> 1. 关闭防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2. 禁止防火墙开机启动</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 3. 放行端口</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4. 重启防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 五、安装为系统服务</h2>
<h3> 1. 添加系统服务</h3>
<p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 重载系统服务</h3>
<p>接着执行以下命令重新加载系统服务。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 3. 启停 Nginx</h3>
<p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p>
<ul>
<li>启动</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>关停</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查看当前状态</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 六、总结</h2>
<p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，还请来个一键三连支持把！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Nginx 教程"/>
    <published>2022-10-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机系统</title>
    <id>https://cunyu1943.github.io/tutorial/software-designer-series/20221024-computer-system.html</id>
    <link href="https://cunyu1943.github.io/tutorial/software-designer-series/20221024-computer-system.html"/>
    <updated>2023-09-26T15:06:57.000Z</updated>
    <summary type="html"><![CDATA[<h1> 计算机系统</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> CPU</h2>
<h3> 计算机系统硬件组成</h3>
<p>计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 <strong>运算器、控制器、存储器、输入设备、输出设备</strong> 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（<code>CPU</code>）。<code>CPU</code> 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。</p>]]></summary>
    <content type="html"><![CDATA[<h1> 计算机系统</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> CPU</h2>
<h3> 计算机系统硬件组成</h3>
<p>计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 <strong>运算器、控制器、存储器、输入设备、输出设备</strong> 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（<code>CPU</code>）。<code>CPU</code> 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。</p>
<p>其中，存储器是计算机系统中的记忆设备，分为 <strong>内部存储</strong> 和 <strong>外部存储</strong>。内部存储速度快，但容量小，一般用来临时存放程序、数据及中间结果。而外部存储容量大，但速度慢，能长期保存程序和数据。</p>
<p>输入和输出设备共称为外部设备，输入设备用于输入原始数据及各种命令，最常见的就是键盘，而输出设备则用于输出计算机运行结果，最常见的就是屏幕。</p>
<h3> CPU 功能</h3>
<p><code>CPU</code> 是计算机系统的核心部件，负责获取程序指令、对指令译码并加工。其功能主要分为以下 4 点：</p>
<ol>
<li><strong>程序控制</strong>：<code>CPU</code> 通过执行指令来控制程序的执行顺序。</li>
<li><strong>操作控制</strong>：一条指令功能的实现需要若干操作信号配合完成，<code>CPU</code> 产生每条指令的操作信号并将操作信号送往对应部件，控制相应部件按指令功能要求进行操作。</li>
<li><strong>时间控制</strong>：指令执行过程中操作信号的出现时间、持续时间以及出现的时间顺序都需要严格控制。</li>
<li><strong>数据处理</strong>：<code>CPU</code> 对数据进行算术和逻辑运算等方式进行加工处理，然后我们就可以利用这些加工后的结果。因此，对数据的加工处理也是 <code>CPU</code> 最根本的任务。</li>
</ol>
<p>除开以上 4 点之外，<code>CPU</code> 还需要对系统内外部的中断（异常）做出响应，进行相应处理。</p>
<h3> CPU 组成</h3>
<p><code>CPU</code> 主要由运算器、控制器、寄存器组以及内部总线等部件组成。</p>
<figure><figcaption>CPU 组成结构</figcaption></figure>
<h2> 运算器</h2>
<p>运算器由 <strong>算术逻辑单元（ALU）</strong>、<strong>累加寄存器</strong> 、<strong>数据缓冲寄存器</strong>、<strong>条件寄存器</strong> 共同组成。它是数据加工处理部件，用于完成计算机的各种算术逻辑运算。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作均由控制器发出的控制信号来指挥，因此它是执行部件。</p>
<p>运算器主要功能如下：</p>
<ol>
<li>执行所有算术运算，如加、减、乘、除等。</li>
<li>执行所有的逻辑运算并进行逻辑测试，如与、或、非等。</li>
</ol>
<p>此外，运算器的各组成部件功能如下：</p>
<ol>
<li><strong>算术逻辑单元（ALU）</strong>：负责处理数据，实现对数据的算术逻辑运算。</li>
<li><strong>累加寄存器（AC）</strong>：又叫累加器，是一个通用寄存器。当算术逻辑单元执行算术逻辑运算时，为 <code>ALU</code> 提供一个工作区。如，执行一个甲酸运算器，先将一个加数取出暂存在 <code>AC</code> 中，再从内存储器中取出另一个加数，然后同 <code>AC</code> 的内容相加，并将所得结果送回 <code>AC</code>。运算的结果是放在累加器中的，运算器中至少要有一个累加寄存器。</li>
<li><strong>数据缓存寄存器（DR）</strong>：对内存储器进行读/写时，用 <code>DR</code> 暂存有内存储器读/写的一套指令或一个数据中，将不同时间段内读/写的数据分隔。<code>DR</code> 的主要作用是 <strong>作为 <code>CPU</code> 和内存、外部设备间数据传送的中转站；作为 <code>CPU</code> 和内存、外围设备之间的操作速度上的缓冲；在单累加器结构的运算器中，数据缓冲寄存器还可以兼作为操作数寄存器</strong>。</li>
<li><strong>状态条件寄存器（PSW）</strong>：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容，主要分为状态标志和控制标志。这些标志通常分别由 1 位出饭前保存，保存了当前指令执行完成后的状态。通常来说，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决。</li>
</ol>
<h2> 控制器</h2>
<p>顾名思义，所谓控制器，就是用来控制整个 <code>CPU</code> 的工作，决定了计算机运行过程的自动化。它不仅要保证程序的正确执行，还要能够处理异常事件。一般包括指令控制逻辑、时序控制逻辑、总线控制逻辑、中断控制逻辑等。</p>
<p>指令控制逻辑要完成<strong>取指令</strong>、<strong>分支指令</strong>和<strong>执行指令</strong>操作，其过程分为<strong>取指令、指令译码、按指令操作码执行、形成下一条指令地址</strong>等步骤。</p>
<ol>
<li><strong>指令寄存器（IR）</strong>：当 <code>CPU</code> 执行一条指令式，先将其从存储器读取到缓冲寄存器中，再送入 <code>IR</code> 暂存，指令译码器根据 <code>IR</code> 内容产生各种未操作指令，控制其他组成部件工作，完成所需功能。</li>
<li><strong>程序计数器（PC）</strong>：<code>PC</code> 具有<strong>寄存信息和计数</strong>两种功能，又叫指令计数器。程序执行分两种情况，一种是顺序执行，一种是转移执行。程序开始执行前，将程序的起始地址送入 <code>PC</code>，该地址在程序加载到内存时确认，因此 <code>PC</code> 的内容即为程序第一条指令的地址。执行指令时，<code>CPU</code> 自动修改 <code>PC</code> 中的内容，一遍使其保持的总是将要执行的下一条指令的地址。由于大多指令都是按顺序执行，所以修改的过程常只是简单地对 <code>PC</code> 加 <code>1</code>。当遇到转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。</li>
<li><strong>地址寄存器（AR）</strong>：<code>AR</code> 保存当前 <code>CPU</code> 所访问的内存单元的地址。由于内存和 <code>CPU</code> 存在操作速度上的差异，因此需要用 <code>AR</code> 保存地址信息，直到内存中的读/写操作完成。</li>
<li><strong>指令译码器（ID）</strong>：指令包含操作码和地址码，为了能执行任何给定的指令，必须对操作码进行分析，以便识别所完成的操作。指令译码器就是对指令中的操作码字段进行分析解释，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需功能。</li>
</ol>
<p>总结而言，<strong>指令寄存器（IR）存放的是从内存中获取的指令，类似于中间站，用于存放指令。而程序计数器（PC）则存放的是指令的地址，同时还具有计数的功能。地址寄存器（AR）存放的是 <code>CPU</code> 访问内存单元的地址。指令译码器（ID）就是把操作码解析为对应的指令操作</strong>。</p>
<h2> 计算机中的基本单位</h2>
<table>
<thead>
<tr>
<th>单位</th>
<th>表示</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>比特</td>
<td><code>bit</code></td>
<td>最小的数据单位</td>
</tr>
<tr>
<td>字节</td>
<td><code>Byte</code></td>
<td>最小的存储单位，<code>1 Byte = 8 bit</code></td>
</tr>
<tr>
<td>千字节</td>
<td><code>KB</code></td>
<td><code>1 KB = 1024 Byte</code></td>
</tr>
<tr>
<td>兆字节</td>
<td><code>MB</code></td>
<td><code>1 MB = 1024 KB</code></td>
</tr>
<tr>
<td>吉字节</td>
<td><code>GB</code></td>
<td><code>1 GB = 1024 MB</code></td>
</tr>
<tr>
<td>太字节</td>
<td><code>TB</code></td>
<td><code>1 TB = 1024 GB</code></td>
</tr>
</tbody>
</table>
<h2> 进制转换</h2>
<p>计算机中，常见的数据表示有以下几种：</p>
<ol>
<li>二进制，以 <code>B</code> 标识，由 <code>0</code>、<code>1</code> 组成，满 <code>2</code> 则进 <code>1</code> 位。</li>
<li>十进制，以 <code>D</code> 标识，由 <code>0 ~ 9</code> 组成，满 <code>10</code> 则进 <code>1</code> 位。</li>
<li>八进制，以 <code>O</code> 标识。由 <code>0 ~ 7</code> 组成，满 <code>8</code> 则进 <code>1</code> 位。</li>
<li>十六进制，以 <code>H</code> 标识。由 <code>0 ~ 9</code> 以及 <code>A、B、C、D、E</code> 组成，满 <code>16</code> 则进 <code>1</code> 位。</li>
</ol>
<p>一个十六进制的数要用 <code>4</code> 个二进制的数来表示，而一个八进制需要转成对应 <code>3</code> 个二进制。</p>
<h2> 原码、反码、补码、移码</h2>
<p>计算机中，数值是以机器数的形式来表示的，特点是采用了二进制计数法，数的符号用 <code>0</code> 和 <code>1</code> 表示，小数点则银行，表示不占位置，而机器数所对应的实际数值就叫做数的真值。</p>
<p>机器数又分为<strong>有符号数</strong>和<strong>无符号数</strong>。其中，无符号数对应正数，表示在机器数中没有符号位。对于无符号数，如果约定小数点的位置在机器数的最低位之后，则该数为纯整数。如果约定小数点的位置在机器数的最高位之前，那么这个数是纯小数。对于带符号数，机器数的最高位是表示正、负的符号位，其余位则表示数值。</p>
<p>为了方便运算，带符号的机器数可以采用原码、反码、补码等不同编码方式，而这些编码方式就叫做码制。</p>
<h3> 原码</h3>
<p>原码表示法中，最高位是符号位，其中 <code>0</code> 表示正号，<code>1</code> 表示负号，其余的 <code>n - 1</code> 为则表示数值的绝对值。这里要注意 <code>0</code> 比较特殊，它的原码有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>+</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>00000000</mn></mrow><annotation encoding="application/x-tex">
[+0]_\text{原} = 00000000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>10000000</mn></mrow><annotation encoding="application/x-tex">
[-0]_\text{原} = 10000000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></span></p>
<h3> 反码</h3>
<p>同样的，反码表示中，最高位仍然是符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果该数是一个正数，那么它的反码和原码相同。而如果该数是一个负数，那么它的反码则是原码除符号位之外的其他位按位取反。<code>0</code> 的反码也有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>+</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>反</mtext></msub><mo>=</mo><mn>00000000</mn></mrow><annotation encoding="application/x-tex">
[+0]_\text{反} = 00000000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>反</mtext></msub><mo>=</mo><mn>11111111</mn></mrow><annotation encoding="application/x-tex">
[-0]_\text{反} = 11111111
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></span></p>
<h3> 补码</h3>
<p>补码中，最高位为符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果一个数是正数，那么它的补码与原码和反码一样。而如果一个数为负数，则补码为反码末位加 <code>1</code>。此时 <code>0</code> 有惟一的编码表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>+</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mn>00000000</mn></mrow><annotation encoding="application/x-tex">
[+0]_\text{补} = [-0]_\text{补} = 00000000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<h3> 移码</h3>
<p>移码的表示与补码有很大关系，它就是将一个数的补码的符号位取反即可。如 <code>+1</code> 的补码为 <code>00000001</code>，那么它的移码为 <code>10000001</code>。</p>
<h3> 注意</h3>
<p>当机器字长为 <code>n</code> 时，此时该机器中各种码制所表示的带符号数的范围如下：</p>
<table>
<thead>
<tr>
<th>码制</th>
<th>定点整数</th>
<th>定点小数</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1)\sim(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(1-2^{-(n-1)})\sim(1-2^{-(n-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>反码</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1)\sim(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(1-2^{-(n-1)})\sim(1-2^{-(n-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>补码</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1})\sim(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><mo>∼</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-1\sim(1-2^{-(n-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>移码</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>∼</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n-1})\sim(2^{n-1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><mo>∼</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-1\sim(1-2^{-(n-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<p>在做相关题目时，可以记住以下要点：<strong>当给定一个数的补码求它的原码时，先将这个数补码的反码求出来，然后再求出它反码的补码，此时得到的就是这个数的原码。</strong></p>
<h2> 浮点数</h2>
<p>当机器字长为 <code>n</code> 时，定点数的补码和移码可以表示为 <code>2^n</code> 个数，而其原码和反码只能表示 <code>2^n - 1</code> 个数（<code>0</code> 的表示占了两个编码）。因此定点数能表示的数值范围较小，运算时很容易越界溢出。而浮点数是小数点范围不固定的数，能表示的范围更大。</p>
<p>浮点表示法中，阶码是带符号的纯整数，而位数是带符号的纯小数。浮点数的表示格式如下：</p>
<figure><figcaption></figcaption></figure>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>E</mi></msup><mo>×</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">
N = 2^E×F
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>其中 <code>E</code> 称为阶码，<code>F</code> 称为尾数。</p>
<p>一个数的浮点表示不是唯一的。当小数点的位置改变时，阶码也会随之改变，因此一个数可以用多个浮点形式表示。</p>
<p>浮点数所能表示的数值范围主要由阶码决定，而其表示的精度则由尾数决定。为了充分利用尾数来表示更多的有效数字，常采用规格化浮点数。规格化就是将尾数的绝对值限定在 <code>[0.5, 1]</code>。此外，当尾数用补码表示时，需要注意以下问题：</p>
<ol>
<li>若位数 <code>F &gt;= 0</code>，则其规格化的位数形式为 <code>F = 0.1xxx……x</code>，其中 <code>x</code> 既可以为 <code>0</code>，也以为 <code>1</code>，即将尾数限定在 <code>[0.5, 1]</code>。</li>
<li>若尾数 <code>F &lt; 0</code>，则其规格化的尾数形式为 <code>F = 1.0xxx……x</code>，其中 <code>x</code> 可以为 <code>0</code>，也可以为 <code>1</code>，即将限定在 <code>[-1, -0.5]</code>。</li>
</ol>
<p>若浮点数的阶码（包括 <code>1</code> 位阶符）用 <code>R</code> 位的移码表示，尾数（包括 <code>1</code> 位数符）用 <code>M</code> 位的补码表示，则该浮点数的范围为：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>−</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>R</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>∼</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mi>M</mi></mrow></msup><mo>∗</mo><msup><mn>2</mn><mrow><msup><mn>2</mn><mrow><mi>R</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">
-1*2^{(2^{R-1}-1)}\sim(1-2^{1-M}*2^{2^{R-1}-1})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0564em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3064em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<h2> 寻址方式</h2>
<figure><figcaption>存储系统层次结构</figcaption></figure>
<p>常用的寻址方式：</p>
<ol>
<li><strong>立即寻址</strong>：操作数包含在指令中。</li>
<li><strong>直接寻址</strong>：操作数存放于内存单元，指令中直接给出操作数所在存储单元的地址。</li>
<li><strong>寄存器寻址</strong>：操作数放在某一寄存器中，指令中给出存放操作数的寄存器名。</li>
<li><strong>寄存器间接寻址</strong>：操作数存放于内存单元，操作数所在存储单元的地址在某个寄存器中。</li>
<li><strong>间接寻址</strong>：指令中给出操作数地址的地址。</li>
<li><strong>相对寻址</strong>：指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。</li>
<li><strong>变址寻址</strong>：操作数地址等于变址寄存器的内容加偏移量。</li>
</ol>
<p>寻址速度由高到低：<strong>立即寻址</strong> &gt; <strong>寄存器寻址</strong> &gt; <strong>直接寻址</strong> &gt; <strong>寄存器间接寻址</strong> &gt; <strong>间接寻址</strong></p>
<h2> 校验码</h2>
<p>所谓码距，指的是一个编码系统中任意两个合法编码间至少有多少个二进制位不同。</p>
<h3> 奇偶校验码</h3>
<p>奇偶校验是一种简单有效的校验方法，通过在编码中增加一位校验位来使编码中 <code>1</code> 的个数为奇数（奇校验）或偶数（偶校验），从而使码距变为 <code>2</code>。对于奇校验，可以检测代码中奇数位出错的编码，但不能发现偶数位出错的情况，即当合法编码中的奇数位发生错误时，编码中的 <code>1</code> 变成了 <code>0</code> 或者 <code>0</code> 变成 <code>1</code>，则该编码中 <code>1</code> 的个数的奇偶性就发生了变化，从而可以发现错误。</p>
<p>常见的奇偶校验码有三种：<strong>水平奇偶校验码</strong>、<strong>垂直奇偶校验码</strong>、<strong>水平垂直校验码</strong></p>
<p><strong>注意</strong>：奇偶校验码只能检查错误但是不能纠错，而且奇数校验只能检查出代码奇数个出错的编码，而不能检查出偶数个出错的编码。</p>
<h3> 海明码</h3>
<p>海明码由贝尔实验室的 <em>Richard Hamming</em> 设计，一种通过利用奇偶校验性来检错和纠错的校验方法。海明码的构成方法是在数据位之间的特定位置上插入 <code>k</code> 个校验位，通过扩大码距来实现检错和纠错。</p>
<p>假设数据位为 <code>n</code> 位，校验位为 <code>k</code> 位，则 <code>n</code> 和 <code>k</code> 必须满足以下条件：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>&gt;</mo><mo>=</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">
2^k&gt;= n + k + 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9382em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p>
<h3> 循环冗余校验码（CRC）</h3>
<p>循环冗余码常用于数据通信领域和磁介质存储系统，利用生成多项式为 <code>k</code> 个数据位产生 <code>r</code> 个校验位来进行编码，其编码长度为 <code>k + r</code>，<code>CRC</code> 的代码格式为：</p>
<figure><figcaption></figcaption></figure>
<p>循环冗余校验码由两部分组成，左边是<strong>信息码（数据）</strong>，右边是<strong>校验码</strong>，如果信息码占 <code>k</code> 位，则校验码占 <code>n - k</code> 位。其中 <code>n</code> 是 <code>CRC</code> 码的字长，所以又叫 <code>(n, k)</code> 码。校验码由信息码产生，校验码位数越多，代码校验能力越强。在求 <code>CRC</code> 编码时，才用的是模 <code>2</code> 运算。模 <code>2</code> 加减运算的规则是按位运算，不发生借位和进位。要注意，当码距为 <code>2</code> 时，<code>CRC</code> 只能检错而不能纠错。</p>
<h2> CISC &amp; RISC</h2>
<table>
<thead>
<tr>
<th></th>
<th>RISC（精简指令集计算机）</th>
<th>CISC（复杂指令集计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td>指令种类</td>
<td>少、精简</td>
<td>多、复杂</td>
</tr>
<tr>
<td>指令复杂度</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>指令长度</td>
<td>固定</td>
<td>变化</td>
</tr>
<tr>
<td>寻址方式</td>
<td>少</td>
<td>复杂多样</td>
</tr>
<tr>
<td>译码方式</td>
<td>硬布线控制逻辑（组合逻辑控制器）</td>
<td>微程序控制技术</td>
</tr>
<tr>
<td>通用寄存器数量</td>
<td>多、大量</td>
<td>一般</td>
</tr>
<tr>
<td>流水线技术</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h2> 流水线</h2>
<p><strong>吞吐率 = 指令条数 / (一条完整指令的时间 + (n - 1) * 流水线周期)</strong></p>
<p><strong>流水线总共时间 = 一条完整指令的时间 + (n - 1) * 流水线周期</strong></p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="软件设计师"/>
    <published>2022-10-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机软硬件</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20230920-cs-hard-soft.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20230920-cs-hard-soft.html"/>
    <updated>2023-09-25T14:33:35.000Z</updated>
    <summary type="html"><![CDATA[<h1> 计算机软硬件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、计算机组成</h2>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>]]></summary>
    <content type="html"><![CDATA[<h1> 计算机软硬件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、计算机组成</h2>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础系列"/>
    <published>2023-09-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 简介</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20230921-intro.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20230921-intro.html"/>
    <updated>2023-10-08T14:52:36.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>本章节中，主要介绍 <code>Java</code> 中的主要特性和发展历史。以及作为新手，日常学习中对 <code>Java</code> 语言的误解。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Java 简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>本章节中，主要介绍 <code>Java</code> 中的主要特性和发展历史。以及作为新手，日常学习中对 <code>Java</code> 语言的误解。</p>
<h2> 二、主要特性</h2>
<h3> 1. 简单性</h3>
<p>语法类似于 <code>C++</code> 语言，方便大多程序开发者能够简单地学习和实践。此外，抛弃了 <code>C++</code> 中复杂的语言特性，如操作符重载、多继承、自动强类型转换等，降低了程序开发者上手难度。<code>Java</code> 中移除了指针的概念，也提供了内容空间的自动分配与回收，使得内存管理也更加方便。</p>
<h3> 2. 面向对象</h3>
<p>面向对象是一种程序设计技术，将重点从过程集中到对象和对象的接口上。<code>Java</code> 提供类、接口和集成等面向对象的特性，抛弃了类之间复杂的多继承，仅支持单继承，但同时支持接口的多继承。</p>
<h3> 3. 分布式</h3>
<p><code>Java</code> 拥有丰富的类库，可处理 <code>HTTP</code> 和 <code>FTP</code> 类的协议请求。因此，<code>Java</code> 能够访问和打开网络上的资源，开发网络应用。</p>
<h3> 4. 健壮性</h3>
<p><code>Java</code> 中，没有了 <code>C++</code> 中类的多继承、指针等概念。同时它的强类型机制、异常处理机制、垃圾回收机制等都为 <code>Java</code> 程序的健壮性提供了重要保障。</p>
<h3> 5. 安全性</h3>
<p>开发网络应用时，安全性十分重要。利用 <code>Java</code> 的诸多安全特性能够构建防病毒、防篡改系统。</p>
<h3> 6. 体系结构中立</h3>
<p><code>Java</code> 源代码经编译后成为字节码，字节码能够在实现了 <code>Java</code> 虚拟机的各种系统中运行，无视系统差异。</p>
<h3> 7. 可移植性</h3>
<p>正是由于 <code>Java</code> 的体系结构中立，才有了适合分发和高度可移植的特点。</p>
<h3> 8. 解释型</h3>
<p><code>Java</code> 经编译后形成字节码文件，然后由虚拟机来解释这些字节码并执行，因此说 <code>Java</code> 是一门解释型语言。</p>
<h3> 9. 高性能</h3>
<p>相比于其他编译型编程语言，<code>Java</code> 性能毋庸置疑，同时，引入即时编译器，其性能已经和 <code>C++</code> 相差不大，在某些场景下甚至更胜一筹。</p>
<h3> 10. 多线程</h3>
<p>大量请求的场景下，单线程的交互响应和实时行为变得十分缓慢。随着摩尔定律的终结，多线程的引入，无疑会带来更加快速的交互响应和实时行为，大大提升体验。</p>
<h3> 11. 动态性</h3>
<p>随着各种应用场景的不断涌现，<code>Java</code> 也在动态适应变化的环境。<code>Java</code> 中所需的类既能动态加载到内存中，也能通过网络来载入，也更有利于软件的迭代升级。</p>
<h2> 三、发展简史</h2>
<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>
<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>
<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 <code>Java</code> 之父。</p>
<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>
<p>以下是截止到本文写作时间 <code>Java</code> 的历史年表，累计经过了 21 次主要版本更新，目前来到了 <code>JDK</code> 21。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 <code>JDK</code> 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 <code>JDK</code> 1.8 还占有如此高的市场比例。</p>
<table>
<thead>
<tr>
<th style="text-align:left">版本</th>
<th style="text-align:left">发布日期</th>
<th style="text-align:left">主要事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">JDK Beta</td>
<td style="text-align:left">1995</td>
<td style="text-align:left"><code>Java</code> 语言发布，用 <code>Java</code> 实现的浏览器和 <code>Java Applet</code> 被大量应用</td>
</tr>
<tr>
<td style="text-align:left">JDK 1.0</td>
<td style="text-align:left">1996 年 1 月</td>
<td style="text-align:left">奠定了 <code>JDK</code>、<code>JRE</code>、<code>JVM</code> 的体系结构</td>
</tr>
<tr>
<td style="text-align:left">JDK 1.1</td>
<td style="text-align:left">1997 年 2 月</td>
<td style="text-align:left">加入 <code>JIT</code>，提升 <code>JDK</code> 效率</td>
</tr>
<tr>
<td style="text-align:left">J2SE 1.2</td>
<td style="text-align:left">1998 年 12 月</td>
<td style="text-align:left">确立 <code>J2SE</code>、<code>J2EE</code>、<code>J2ME</code> 产品结构</td>
</tr>
<tr>
<td style="text-align:left">J2SE 1.3</td>
<td style="text-align:left">2000 年 5 月</td>
<td style="text-align:left">内置 <code>HotSpot JVM</code></td>
</tr>
<tr>
<td style="text-align:left">J2SE 1.4</td>
<td style="text-align:left">2002 年 2 月</td>
<td style="text-align:left"><code>XML</code> 处理、断言、支持正则表达式</td>
</tr>
<tr>
<td style="text-align:left">J2SE 5.0</td>
<td style="text-align:left">2004 年 9 月</td>
<td style="text-align:left">静态导入、泛型、<code>for-each</code> 循环、自动拆，装箱、枚举、可变参数</td>
</tr>
<tr>
<td style="text-align:left">JDK 6</td>
<td style="text-align:left">2006 年 12 月</td>
<td style="text-align:left">提供动态语言支持、同步垃圾回收</td>
</tr>
<tr>
<td style="text-align:left">JDK 7</td>
<td style="text-align:left">2011 年 7 月</td>
<td style="text-align:left">字符串的 <code>switch</code> 语句、多异常捕抓</td>
</tr>
<tr>
<td style="text-align:left"><strong>JDK  8 (LTS)</strong></td>
<td style="text-align:left">2014 年 3 月</td>
<td style="text-align:left"><code>Lambda</code> 表达式</td>
</tr>
<tr>
<td style="text-align:left">JDK 9</td>
<td style="text-align:left">2017 年 9 月</td>
<td style="text-align:left">轻量级 <code>json API</code>、垃圾收集机制更新</td>
</tr>
<tr>
<td style="text-align:left">JDK 10</td>
<td style="text-align:left">2018 年 3 月</td>
<td style="text-align:left">局部变量类型推断，<code>Java</code> 后续版本快速迭代更新</td>
</tr>
<tr>
<td style="text-align:left"><strong>JDK 11 (LTS)</strong></td>
<td style="text-align:left">2018 年 9 月</td>
<td style="text-align:left">常用类增强，<code>JDK</code> 11 是继 <code>JDK</code> 8 之后的首个长期支持本版</td>
</tr>
<tr>
<td style="text-align:left">JDK 12</td>
<td style="text-align:left">2019 年 3 月</td>
<td style="text-align:left"><code>switch</code> 表达式增强</td>
</tr>
<tr>
<td style="text-align:left">JDK 13</td>
<td style="text-align:left">2019 年 9 月</td>
<td style="text-align:left">文本块支持</td>
</tr>
<tr>
<td style="text-align:left">JDK 14</td>
<td style="text-align:left">2020 年 3 月</td>
<td style="text-align:left"><code>instanceof</code> 支持模式匹配</td>
</tr>
<tr>
<td style="text-align:left">JDK 15</td>
<td style="text-align:left">2020 年 9 月</td>
<td style="text-align:left"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>
</tr>
<tr>
<td style="text-align:left">JDK 16</td>
<td style="text-align:left">2021 年 3 月</td>
<td style="text-align:left">启用 <code>C++ 14</code> 语言特性、向量 <code>API</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>JDK 17 (LTS)</strong></td>
<td style="text-align:left">2021 年 9 月</td>
<td style="text-align:left">恢复总是严格的浮点语义、增强型伪随机数生成器</td>
</tr>
<tr>
<td style="text-align:left">JDK 18</td>
<td style="text-align:left">2022 年 3 月</td>
<td style="text-align:left">默认 <code>UTF-8</code> 编码、代码片段、简单的网络服务器</td>
</tr>
<tr>
<td style="text-align:left">JDK 19</td>
<td style="text-align:left">2022 年 9 月</td>
<td style="text-align:left">记录模式、外部函数与内存 <code>API</code>、<code>Linux</code>/<code>RISC-V</code> 移植、虚拟线程、结构化并发</td>
</tr>
<tr>
<td style="text-align:left">JDK 20</td>
<td style="text-align:left">2023 年 3 月</td>
<td style="text-align:left">1. 作用域值<br>2. 记录模式<br>3. <code>switch</code> 模式匹配<br>4. 外部函数和内存 <code>API</code><br>5. 虚拟线程<br>6. 结构化并发<br>7. 向量 <code>API</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>JDK 21（LTS）</strong></td>
<td style="text-align:left">2023 年 9 月</td>
<td style="text-align:left">1. 分代 <code>ZGC</code><br>2. 序列集合<br>3. 弃用 <code>Windows</code> 32 位 <code>x86</code><br>4. 密钥封装机制 <code>API</code><br>5. 字符串模板<br>6. 未命名类和实例主方法</td>
</tr>
</tbody>
</table>
<h2> 四、常见误解</h2>
<h3> 1. JavaScript 是 Java 的子集</h3>
<p>两个东西完全不沾边，<code>JavaScript</code> 是一种可以在网页中使用的脚本语言，而 <code>Java</code> 是完全的强类型语言，两者除了名字很像，其他方面可以说没有一点关系。</p>
<h3> 2. Java 是解释型语言，所以效率较低</h3>
<p>早期版本的 <code>Java</code> 的确是解释型的，但随着 <code>Java</code> 虚拟机中采用了即时编译器，其性能已经和 <code>C++</code> 相差不大，在某些场景下甚至更胜一筹。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础系列"/>
    <published>2023-09-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">开发环境配置</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20230922-environment.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20230922-environment.html"/>
    <updated>2023-10-08T14:52:36.000Z</updated>
    <summary type="html"><![CDATA[<h1> 开发环境配置</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>学习完 <code>Java</code> 的主要特性、发展历程以及常见误解之后。本篇文章来学习，如何在当前主流操作系统下搭建 <code>Java</code> 开发环境，为接下来的开发做好准备。</p>]]></summary>
    <content type="html"><![CDATA[<h1> 开发环境配置</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>学习完 <code>Java</code> 的主要特性、发展历程以及常见误解之后。本篇文章来学习，如何在当前主流操作系统下搭建 <code>Java</code> 开发环境，为接下来的开发做好准备。</p>
<h2> 二、Windows 环境配置</h2>
<h3> 1. 安装</h3>
<ol>
<li>首先进入 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">Oracle 官网</a>，然后找到自己想要的 <code>JDK</code> 版本，这边以 <code>JDK</code> 11 为例。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/jdk11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 <code>Windows</code> 64 位系统为例。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/download.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>点击最后的链接后，它会让你同意协议，勾选同意，然后登陆你的 <code>Oracle</code> 账户即可开始下载，若是没有 <code>Oracle</code> 账户，点击下面的创建一个就可以了。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/agree.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/login.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/install-path.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 配置</h3>
<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>
<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>
<ol>
<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686767330.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>点击高级后，就会打开如下界面，然后打开环境变量。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686806548.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/java-home.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\bin</code>。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/path-bin.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="5">
<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没有。</li>
</ol>
<h3> 3. 注意</h3>
<p>自 <code>JDK</code> 11 之后，安装完成后就无需在配置环境变量，安装完成即可去验证是否安装成功。</p>
<h3> 4. 验证</h3>
<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686544052.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686583197.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686620882.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、macOS 环境配置</h2>
<h3> 1. 安装</h3>
<ol>
<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-jdk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>接受相关协议并登录下载。</p>
</li>
<li>
<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装。</p>
</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/install-macos.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>安装过程中会让你输入密码，也就是你本机的密码。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/pwd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="5">
<li>安装成功。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/success.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 验证</h3>
<p>不同于 <code>Windows</code>，<code>macOS</code> 下不用再手动配置环境变量了，它会给你自动配置好，我们只需要去验证即可；</p>
<ol>
<li>查看 <code>JDK</code> 版本。</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-jdk-v.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>编译命令。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-javac.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>运行验证命令。</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-java.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、Linux 环境配置</h2>
<h3> 1. 安装</h3>
<ol>
<li>先去 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">下载</a> 要安装的 <code>JDK</code> 版本，然后解压到本地存放的位置。</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-install.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-path.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. 配置</h3>
<p>打开配置文件 <code>/etc/profile</code>，然后加入如下内容；</p>
<div class="language-profile line-numbers-mode" data-ext="profile"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-profile.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/profile-jdk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 验证</h3>
<p>安装和配置之后，在终端中输入如下命令进行验证是否成功。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/verify.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 五、安装目录详解</h2>
<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构，而各个模块的功能则如下表所示。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>目录</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bin</code></td>
<td>用于存放各种工具命令，比如我们最常用的 <code>javac</code>、<code>java</code> 等</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>存放工具的一些补充 <code>jar</code> 包</td>
</tr>
<tr>
<td><code>conf</code></td>
<td>存放相关配置文件</td>
</tr>
<tr>
<td><code>include</code></td>
<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>
</tr>
<tr>
<td><code>legal</code></td>
<td>存放各模块的授权文件</td>
</tr>
<tr>
<td><code>jmods</code></td>
<td>存放各种模块</td>
</tr>
<tr>
<td><code>release</code></td>
<td>版本发布内容以及版本信息</td>
</tr>
<tr>
<td><code>README</code></td>
<td><code>JDK</code> 信息</td>
</tr>
<tr>
<td><code>LICENSE</code></td>
<td>版权和签证相关的说明文档</td>
</tr>
</tbody>
</table>
<h2> 六、API 文档</h2>
<p><code>API（Application Programming Interface）</code>，应用程序编程接口，是 <code>Java</code> 提供的基本编程接口。<code>Java</code> 语言提供了大量的基础类，为了给开发者提供相应的说明文档，于是便有了 <code>Java API</code> 文档。它类似于我们日常生活中的字典，如果遇到什么不认识的字，那么就可以去这里找。而对应到 <code>Java</code> 语言中，就是当我们遇到未使用过的基础类或方法，可以去 <code>Java API</code> 中寻找。</p>
<p>为了方便大家，在这里贴出目前最常用的几个长期版本 <code>Java</code> 的在线阅读地址和离线下载地址，有需要的小伙伴可以自行去下载。</p>
<p>温馨提示：这里无论是在线阅读还是离线下载后的文档，都是纯英文的。</p>
<h3> 1. 在线阅读</h3>
<ul>
<li><strong><code>JDK 8 API</code></strong>：<a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/api/index.html</a></li>
<li><strong><code>JDK 11 API</code></strong>：<a href="https://docs.oracle.com/en/java/javase/11/docs/api/" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/en/java/javase/11/docs/api/</a></li>
<li><strong><code>JDK 17 API</code></strong>：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/en/java/javase/17/docs/api/</a></li>
<li><strong><code>JDK 21 API</code></strong>：<a href="https://docs.oracle.com/en/java/javase/21/docs/api/" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/en/java/javase/21/docs/api/</a></li>
</ul>
<h3> 2. 离线下载</h3>
<ul>
<li><strong><code>JDK 8 API</code></strong>：<a href="https://www.oracle.com/java/technologies/javase-jdk8-doc-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase-jdk8-doc-downloads.html</a></li>
<li><strong><code>JDK 11 API</code></strong>：<a href="https://www.oracle.com/java/technologies/javase-jdk11-doc-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase-jdk11-doc-downloads.html</a></li>
<li><strong><code>JDK 17 API</code></strong>：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></li>
<li><strong><code>JDK 21 API</code></strong>：<a href="https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html</a></li>
</ul>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础系列"/>
    <published>2023-09-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#33：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1125-1201.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1125-1201.html"/>
    <updated>2023-09-24T14:35:44.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#33：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h2> 二、软件</h2>
<h2> 三、网站</h2>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#33：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h2> 二、软件</h2>
<h2> 三、网站</h2>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-24T14:35:44.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#32：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1118-1124.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1118-1124.html"/>
    <updated>2023-09-24T14:35:44.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#32：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/Evil0ctal/Douyin_TikTok_Download_API" target="_blank" rel="noopener noreferrer">抖音/TikTok API</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#32：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/Evil0ctal/Douyin_TikTok_Download_API" target="_blank" rel="noopener noreferrer">抖音/TikTok API</a></h3>
<p>一个开箱即用的高性能异步抖音 | <code>TikTok</code> 数据爬取工具，支持 <code>API</code> 调用，在线批量解析及下载。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/weekly2023-32-1.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/didi/LogicFlow" target="_blank" rel="noopener noreferrer">LogicFlow</a></h3>
<p>一款流程图编辑框架，提供了一系列流程图交互、编辑所必需的功能和灵活的节点自定义、插件等拓展机制。<code>LogicFlow</code> 支持前端研发自定义开发各种逻辑编排场景，如流程图、<code>ER</code> 图、<code>BPMN</code> 流程等。在工作审批配置、机器人逻辑编排、无代码平台流程配置都有较好的应用。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/weekly2023-32-2.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/LorisYounger/VPet" target="_blank" rel="noopener noreferrer">VPet</a></h3>
<p>一个开源的桌宠软件，可以内置到任何 <code>WPF</code> 应用程序。支持各种互动投喂，开源免费并且支持创意工坊。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/weekly2023-32-3.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h2> 三、网站</h2>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-19T14:30:40.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#30：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1104-1110.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1104-1110.html"/>
    <updated>2023-09-26T08:49:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#30：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/FightingDesign/fighting-design" target="_blank" rel="noopener noreferrer">Fighting Design</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#30：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/FightingDesign/fighting-design" target="_blank" rel="noopener noreferrer">Fighting Design</a></h3>
<p>一款灵活、优质的组件库，可在 <code>vue3</code> 应用程序中快速构建交互界面。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694653832104.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/whyour/qinglong" target="_blank" rel="noopener noreferrer">青龙</a></h3>
<p>支持 <code>Python3</code>、<code>JavaScript</code>、<code>Shell</code>、<code>Typescript</code> 的定时任务管理平台，支持如下功能：</p>
<ul>
<li>支持多种脚本语言</li>
<li>支持在线管理脚本、环境变量、配置文件</li>
<li>支持在线查看任务日志</li>
<li>支持秒级任务设置</li>
<li>支持系统级通知</li>
<li>支持暗黑模式</li>
<li>支持手机端操作</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695081830349.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3.<a href="https://github.com/rev1si0n/lamda" target="_blank" rel="noopener noreferrer">LAMDA</a></h3>
<p><code>LAMDA</code> 是一个用于逆向及自动化的辅助框架，它设计为减少安全分析以及应用测试人员的时间及琐碎问题，以编程化的接口替代大量手动操作，它并不是一个单一功能的框架。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/demo.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/Dreamer365/topspeed-image-compressor" target="_blank" rel="noopener noreferrer">极速图片压缩器</a></h3>
<p>压缩速度极快的图片压缩软件，具有以下特点：</p>
<ul>
<li>具有超快的压缩速度</li>
<li>支持压缩 <code>GB</code> 级别的超大体积的图片</li>
<li>支持 7 种图片格式</li>
<li>支持深、浅色主题模式</li>
<li>可对原始图片进行预览</li>
<li>可通过【鼠标拖拽】【点击选择】【<code>ctrl + v</code> 粘贴】 等多种方式添加图片</li>
<li>支持添加文件夹，可自动解析文件夹内所有符合要求的图片</li>
<li>实时显示压缩进度</li>
<li>完全在本地执行压缩，有无网络均可，不上传图片，充分保证隐私安全</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695279363267.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/GuoXiCheng/SKIP" target="_blank" rel="noopener noreferrer">SKIP</a></h3>
<p>一款免费开源的安卓应用，旨在利用 <code>Android</code> 无障碍服务帮助用户快速点击 <code>APP</code> 开屏广告的跳过按钮，让你的使用体验更加流畅。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695689051489.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/HIllya51/LunaTranslator" target="_blank" rel="noopener noreferrer">LunaTranslator</a></h3>
<p><code>Galgame</code> 翻译工具，支持剪贴板、<code>OCR</code>、<code>HOOK</code>，支持 40 余种翻译引擎。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695706914976.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://www.freecodecamp.org/chinese/learn" target="_blank" rel="noopener noreferrer">FreeCodeCamp</a></h3>
<p>免费学习编程 - <code>Python</code>、<code>JavaScript</code>、<code>Java</code>、<code>Git</code> 等。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694650845929.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/gwuhaolin/dive-into-webpack" target="_blank" rel="noopener noreferrer">深入浅出 Webpack</a></h3>
<p>本书是国内第一本系统全面讲解 <code>Webpack</code> 的图书，涵盖了 <code>Webpack</code> 的入门、配置、实战、优化、原理。</p>
<ul>
<li>第 1 章教你从 0 开始学会使用 <code>Webpack</code>；</li>
<li>第 2 章详细的讲解了 <code>Webpack</code> 提供的常用配置项；</li>
<li>第 3 章结合实际项目中常见的场景给出最佳实践；</li>
<li>第 4 章罗列出了各种优化 <code>Webpack</code> 的手段；</li>
<li>第 5 章剖析了 <code>Webpack</code> 原理以及如何开发 <code>Plugin</code> 和 <code>Loader</code>。</li>
</ul>
<p>除了深入讲解 <code>Webpack</code>，本书还附带介绍了 <code>ES6</code>、<code>TypeScript</code>、<code>PostCSS</code>、<code>Prepack</code>、离线缓存、单页应用、<code>CDN</code> 等 <code>Web</code> 开发相关的技能。</p>
<p>无论是对 <code>Webpack</code> 一无所知的初学者，还是经验丰富的工程师，相信都能通过本书进一步提高对 <code>Webpack</code> 的理解，让你在 <code>Web</code> 开发中更加熟练的运用 <code>Webpack</code>。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695709833569.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-14T00:39:56.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#31：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1111-1117.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1111-1117.html"/>
    <updated>2023-10-09T09:41:09.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#31：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/honghuangdc/soybean-admin" target="_blank" rel="noopener noreferrer">Soybean Admin</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#31：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/honghuangdc/soybean-admin" target="_blank" rel="noopener noreferrer">Soybean Admin</a></h3>
<p>一个基于 <code>Vue3</code>、<code>Vite3</code>、<code>TypeScript</code>、<code>NaiveUI</code>、<code>Pinia</code> 和 <code>UnoCSS</code> 的清新优雅的中后台模版，它使用了最新流行的前端技术栈，内置丰富的主题配置，有着极高的代码规范，基于文件的路由系统以及基于 <code>Mock</code> 的动态权限路由，开箱即用的中后台前端解决方案，也可用于学习参考。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695133235107.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/chao921125/vue-vite" target="_blank" rel="noopener noreferrer">vue-vite</a></h3>
<p><code>vue3</code> + <code>vite4</code> + <code>vue-router</code> + <code>pinia</code>，动态路由、权限管理、<code>vw</code> 适配，路由切换 <code>PC</code> 与移动端，学习商用均可，配置简单，各种实用的插件库及对应示例。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695168150961.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/tw93/Pake" target="_blank" rel="noopener noreferrer">Pake</a></h3>
<p>利用 <code>Rust</code> 轻松构建轻量级多端桌面应用，支持 <code>Mac</code>/ <code>Windows</code>/<code>Linux</code>，具有以下特性：</p>
<ul>
<li>相比传统的 <code>Electron</code> 套壳打包，要小将近 20 倍，5M 上下。</li>
<li><code>Pake</code> 的底层使用的 <code>Rust Tauri</code> 框架，性能体验较 <code>JS</code> 框架要轻快不少，内存小很多。</li>
<li>不是单纯打包，实现了快捷键的透传、沉浸式的窗口、拖动、样式改写、去广告、产品的极简风格定制。</li>
<li>只是一个很简单的小玩具，用 <code>Rust</code> 替代之前套壳网页打包的老思路，其实 <code>PWA</code> 也很好。</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695175329694.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/chat2db/Chat2DB" target="_blank" rel="noopener noreferrer">Chat2DB</a></h3>
<p>一款开源免费的多数据库客户端工具，支持 <code>windows</code>、mac 本地安装，也支持服务器端部署，web 网页访问。 和传统的数据库客户端软件 Navicat、DBeaver 相比 Chat2DB 集成了 AIGC 的能力，能够将自然语言转换为 SQL， 也可以将 SQL 转换为自然语言，可以给出研发人员 SQL 的优化建议，极大的提升人员的效率，是 AI 时代数据库研发人员的利器， 不懂 SQL 的运营或业务也可以轻松使用快速查询业务数据、生成报表的能力。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1696648457125.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/PyJun/Mooc_Downloader" target="_blank" rel="noopener noreferrer">学无止下载器</a></h3>
<p>学无止下载器，慕课下载器，<code>Mooc</code> 网课下载，慕课网，中国大学，网易云课堂，有道精品课，腾讯课堂，中公网校，学浪，抖音课堂，小鹅通，千聊，超星学习通，学银在线，智慧职教，智慧树，学堂在线，爱课程，B 站下载；支持视频，课件同时下载。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1696754415579.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://kapeli.com/dash" target="_blank" rel="noopener noreferrer">Dash</a></h3>
<p>强大到你无法想象的 <code>API</code> 离线文档软件，目前仅支持 <code>macOS</code>，程序员居家必备神器。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1696814760761.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-14T00:39:56.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#29：项目管理软件</title>
    <id>https://cunyu1943.github.io/weekly/2023/1028-1103.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1028-1103.html"/>
    <updated>2023-09-26T08:49:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#29：项目管理软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/521xueweihan/HelloGitHub" target="_blank" rel="noopener noreferrer">HelloGithub</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#29：项目管理软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/521xueweihan/HelloGitHub" target="_blank" rel="noopener noreferrer">HelloGithub</a></h3>
<p>分享 <code>GitHub</code> 上有趣、入门级的开源项目。每月 28 号以月刊的形式更新发布，内容包括：有趣、入门级的开源项目、开源书籍、实战项目、企业级项目等，让你用很短时间感受到开源的魅力，爱上开源！</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694488288681.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://gitee.com/xiaoym/knife4j" target="_blank" rel="noopener noreferrer">knife4j</a></h3>
<p>为 <code>Java</code> <code>MVC</code> 框架集成 <code>Swagger</code> 生成 <code>Api</code> 文档的增强解决方案，前身是 <code>swagger-bootstrap-ui</code>，取名 <code>knife4j</code> 是希望她能像一把匕首一样小巧，轻量，并且功能强悍！主要提供如下功能：</p>
<ul>
<li>前后端 <code>Java</code> 代码以及前端 <code>UI</code> 模块进行分离,在微服务架构下使用更加灵活</li>
<li>提供专注于 <code>Swagger</code> 的增强解决方案,不同于只是改善增强前端 <code>UI</code> 部分</li>
<li>提供更多灵活的中间件方案\工具</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694517818971.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/PlexPt/awesome-chatgpt-prompts-zh" target="_blank" rel="noopener noreferrer">ChatGPT 中文调教指南</a></h3>
<p><code>ChatGPT</code> 中文调教指南。各种场景使用指南，学习怎么让它听你的话。支持如下功能：</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694518963641.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://pingcode.com/" target="_blank" rel="noopener noreferrer">PingCode</a></h3>
<p>简单易用的新一代研发管理工具，覆盖敏捷开发、测试管理、项目集和知识库，让研发管理自动化、数据化、智能化，帮助企业提升研发效能。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695275359711.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://trello.com/" target="_blank" rel="noopener noreferrer">Trello</a></h3>
<p>终极的项目管理工具，在几秒钟内启动看板，自动执行繁琐的任务，并在任何地方（甚至在移动设备上）进行协作。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695275910133.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://worktile.com/" target="_blank" rel="noopener noreferrer">Worktile</a></h3>
<p>深度整合项目与任务管理、<code>OKR</code>、网盘、在线沟通等应用，支持丰富的自定义功能，满足各行业各场景的个性化工作需求，助力企业提高管理效能。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695276074424.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://yyets.com/" target="_blank" rel="noopener noreferrer">人人影视</a></h3>
<p>由爱好者成员成立的网站，免费提供最新影视剧介绍和影评，发布最新的字幕包括美剧、日剧、电影、动漫等。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694046035369.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://kuaizi.cc/" target="_blank" rel="noopener noreferrer">筷子视频</a></h3>
<p>筷子视频，为您提供最新电影、美剧天堂、电影排行榜、最新美剧、韩剧、日剧、泰剧、最快最全的美剧在线视频网站，为广大美剧迷推荐精彩的美剧视频，是广大美剧迷必收藏的美剧网站！</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694046003402.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.mvcat.com/" target="_blank" rel="noopener noreferrer">MVCAT</a></h3>
<p>一个专门的电影推荐平台，通过收集经典电影，电影专题以及网友互动分享好看电影，为广大电影爱好者提供优质的电影推荐服务。不过要注意，这里仅仅是推荐，如果你想观看/下载相关影视资源，还请移步其他平台。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045950763.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/datawhalechina/easy-rl" target="_blank" rel="noopener noreferrer">强化学习教程</a></h3>
<p>本书结合了李宏毅老师的 “深度强化学习”、周博磊老师的 “强化学习纲要”、李科浇老师的 “世界冠军带你从零实践强化学习” 公开课的精华内容，在理论严谨的基础上深入浅出地介绍马尔可夫决策过程、蒙特卡洛方法、时序差分方法、<code>Sarsa</code>、Q 学习等传统强化学习算法，以及策略梯度、近端策略优化、深度 Q 网络、深度确定性策略梯度等常见深度强化学习算法的基本概念和方法，并以大量生动有趣的例子帮助读者理解强化学习问题的建模过程以及核心算法的细节。</p>
<p>此外，本书还提供较为全面的习题解答以及 <code>Python</code> 代码实现，可以让读者进行端到端、从理论到轻松实践的全生态学习，充分掌握强化学习算法的原理并能进行实战。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695708301057.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/zergtant/pytorch-handbook" target="_blank" rel="noopener noreferrer">PyTorch 中文手册</a></h3>
<p>一本开源的书籍，目标是帮助那些希望和使用 <code>PyTorch</code> 进行深度学习开发和研究的朋友快速入门，其中包含的 <code>Pytorch</code> 教程全部通过测试保证可以成功运行。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695708618216.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/datawhalechina/joyful-pandas" target="_blank" rel="noopener noreferrer">pandas 中文教程</a></h3>
<p>教程共有十章，可分为三大模块：基础知识、四类操作、四类数据，涵盖了 <code>pandas</code> 的所有核心操作与特性。</p>
<p>在第一个模块中，包含了 <code>python</code> 基础、<code>numpy</code> 基础和 <code>pandas</code> 基础三大部分。其中，<code>python</code> 基础将回顾列表推导式、匿名函数、<code>map</code> 对象以及 <code>zip</code> 对象的概念与应用；<code>numpy</code> 基础包含了常见的数组操作，如：数组构造、数组变形与合并、数组切片、数组函数以及广播机制。<code>pandas</code> 基础中涵盖了文件 <code>IO</code>、数据存储结构、滑窗对象、以及 <code>pandas</code> 中的所有基本函数。</p>
<p>在第二个模块中，包含了索引、分组、变形、连接四类操作的介绍。其中，第三章索引涵盖了单层索引、多层索引、索引设定以及索引运算的内容；第四章分组介绍了分组对象的基本概念、聚合函数的使用、变换函数与过滤函数的用法，以及跨列分组的相关内容；第五章变形将讨论长宽表的变形、索引间的变形，以及类变形函数；第六章连接将涉及关系连接与方向连接的区别于使用方法，以及类变形函数的相关内容。</p>
<p>在第三个模块中，包含了缺失数据、文本数据、分类数据和时序数据的介绍。其中，第七章缺失数据将涉及其四大操作 ———— 汇总、删除、填充、插值，以及 <code>Nullable</code> 类型的详细介绍；第八章文本数据中将涵盖 <code>str</code> 对象，正则基础，文本的五大操作 ———— 拆分、合并、匹配、替换、提取，以及常用字符串函数；第九章分类数据将涉及 <code>cat</code> 对象、有序类别以及区间类别；第十章时序数据将涵盖时间戳对象、时间差对象、日期偏置、时序滑窗以及时序分组的内容。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695709746411.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-06T13:42:10.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#26：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1007-1013.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1007-1013.html"/>
    <updated>2023-09-19T00:32:31.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#26：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/lss233/chatgpt-mirai-qq-bot" target="_blank" rel="noopener noreferrer">ChatGPT for Bot</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#26：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/lss233/chatgpt-mirai-qq-bot" target="_blank" rel="noopener noreferrer">ChatGPT for Bot</a></h3>
<p>一键部署！真正的 <code>AI</code> 聊天机器人！支持 <code>ChatGPT</code>、文心一言、讯飞星火、<code>Bing</code>、<code>Bard</code>、<code>ChatGLM</code>、<code>POE</code>，多账号，人设调教，虚拟女仆、图片渲染、语音发送 | 支持 <code>QQ</code>、<code>Telegram</code>、<code>Discord</code>、微信等平台。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476667904.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/coderzcr/JavaWeb-Project-Source-Share" target="_blank" rel="noopener noreferrer">JavaWeb-Project-Source-Share</a></h3>
<p>分享基于 <code>Servlet</code>、<code>SSH</code>、<code>SSM</code>、<code>SpringBoot</code>、<code>SpringCloud</code> 等流行技术实现的 <code>JavaWeb</code> 项目，难度分为 5 个等级，帮助小白入门 <code>JavaWeb</code> 开发，协助 <code>JavaWeb</code> 开发者熟悉最新技术。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476703078.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/maliangnansheng/bbs-springboot" target="_blank" rel="noopener noreferrer">南生论坛</a></h3>
<p>仿掘金之南生论坛基于 <code>SpringBoot</code> + <code>Vue</code> 框架实现前后端分离（大厂微服务架构设计；代码简洁、高效无冗余；注释详细易阅读），自适应手机端和电脑端，界面简洁美观，功能完善，性能高效。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476726541.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://www.glasswire.com/" target="_blank" rel="noopener noreferrer">GlassWire</a></h3>
<p>用户体验优秀的全能网络流量监控工具，同时具备防火墙功能。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694390519558.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.scootersoftware.com/" target="_blank" rel="noopener noreferrer">Beyond Compare</a></h3>
<p>一款专业的文本文件对比工具，可以高效的针对文件、文件夹、表格、<code>mp3</code>、图片、数据、注册表等文件并进行比较、合并、同步分析，并把相差的每一个字节用颜色加以表示，查看方便。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694390548096.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.ipip.net/product/client.html" target="_blank" rel="noopener noreferrer">BestTrace</a></h3>
<p>集 <code>ping</code>、<code>traceroute</code>、<code>IP</code> 归属地、地图于一体的网络测试工具。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694390769310.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://www.ppter8.com/" target="_blank" rel="noopener noreferrer">PPTer 吧</a></h3>
<p>提供免费 <code>PPT</code> 模板、<code>PPT</code> 课件及国外 <code>PPT</code> 模版，相关 <code>PPT</code> 素材全部免费（<code>PNG</code> 免抠图、<code>PPT</code> 背景图片、<code>PPT</code> 专用的背景音乐、3D 模型、图标）。这里的 <code>PPT</code> 模板免费下载，致力成为受 <code>PPTer</code> 喜爱的 <code>PPT</code> 模板网站。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958880565.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.ppthui.com/" target="_blank" rel="noopener noreferrer">PPT 汇</a></h3>
<p><code>PPT</code> 模板网提供高品质 <code>PPT</code> 模板、<code>PPT</code> 背景、<code>PPT</code> 素材、<code>PPT</code> 课件等精美 <code>PPT</code> 模板免费下载资源。无需注册，完全免费，直接 <code>PPT</code> 模板免费下载。带来快速、高效、便捷的下载体验。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958907803.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.ypppt.com/" target="_blank" rel="noopener noreferrer">优品 PPT</a></h3>
<p>一家专注于分享高质量的免费 <code>PPT</code> 模板下载网站，包括图表、背景图片、素材、教程等各类 <code>PPT</code> 模板相关资源。致力于打造国内最大最权威的 <code>PPT</code> 下载一站式服务平台。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958977192.webp" alt="169395897792" tabindex="0" loading="lazy"><figcaption>169395897792</figcaption></figure>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/javascript-tutorial/zh.javascript.info/" target="_blank" rel="noopener noreferrer">现代 JavaScript 教程</a></h3>
<p>依托于 <code>learn.javascript.ru</code> 而来，它是俄罗斯最大的 <code>JavaScript</code> 教程和学习平台之一，质量有保障，而且是在线学习，教程都是实时更新且免费的，不像书籍可能存在看的技术过时的问题。现代 <code>JavaScript</code> 教程是 <code>React</code> 官方文档中与 <code>MDN</code> 共同推荐的 <code>JavaScript</code> 学习教程，质量有保障。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694648658881.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/Wei-Xia/most-frequent-technology-english-words" target="_blank" rel="noopener noreferrer">程序员英语词汇宝典</a></h3>
<p>本列表中的单词是英语类计算机书籍、文档、文章中高频常见的技术词汇，也是程序员工作中常见的英语词汇，最终目的是希望程序员集合自身的英语基础，在掌握列表中的词汇后，可以无障碍阅读英语技术文章和文档。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695021839312.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/yuesong-feng/30dayMakeCppServer" target="_blank" rel="noopener noreferrer">30 天自制 C++ 服务器</a></h3>
<p>30 天自制 <code>C++</code> 服务器，包含教程和源代码。教程模仿《30 天自制操作系统》，面向零经验的新手，教你在 30 天内入门 <code>Linux</code> 服务器开发。教程更偏向实践，将会把重点放在如何写代码上，而不会花太多的篇幅讲解背后的计算机基础原理，涉及到的地方会给出相应书籍的具体章节。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695081640931.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-05T15:19:41.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#27：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1014-1020.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1014-1020.html"/>
    <updated>2023-09-20T00:26:16.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#27：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/dromara/lamp-cloud" target="_blank" rel="noopener noreferrer">lamp 快速开发平台</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#27：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/dromara/lamp-cloud" target="_blank" rel="noopener noreferrer">lamp 快速开发平台</a></h3>
<p><code>lamp-cloud</code> 基于 <code>Jdk11</code> + <code>SpringCloud</code> + <code>SpringBoot</code> 开发的微服务中后台快速开发平台，专注于多租户(<code>SaaS</code> 架构)解决方案，亦可作为普通项目（非 <code>SaaS</code> 架构）的基础开发框架使用，目前已实现插拔式数据库隔离、<code>SCHEMA</code> 隔离、字段隔离 等租户隔离方案。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476767200.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/valarchie/AgileBoot-Back-End" target="_blank" rel="noopener noreferrer">AgileBoot</a></h3>
<p>规范易于二开的全栈基础快速开发脚手架。采用 <code>SpringBoot</code> + <code>Vue3</code> + <code>Typescript</code> + <code>Mybatis Plus</code> + <code>Redis</code> + 更面向对象的业务建模 + 面向生产的项目。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476838686.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/dromara/RuoYi-Vue-Plus" target="_blank" rel="noopener noreferrer">RuoYi-Vue-Plus</a></h3>
<p>基于 <code>RuoYi-Vue</code> 集成 <code>Lombok</code> + <code>Mybatis-Plus</code> + <code>Undertow</code> + <code>knife4j</code> + <code>Hutool</code> + <code>Feign</code> 重写所有原生业务 定期与 <code>RuoYi-Vue</code> 同步。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476808383.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/maotoumao/MusicFree" target="_blank" rel="noopener noreferrer">MusicFree</a></h3>
<p>一个插件化、定制化、无广告的免费音乐播放器，目前只支持 <code>Android</code> 和 <code>Harmony OS</code>。具有以下特性：</p>
<ul>
<li>插件化</li>
<li>插件支持搜索、播放、查看专辑等功能</li>
<li>定制化、无广告</li>
<li>隐私</li>
<li>歌词关联</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476868291.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://gitee.com/dromara/redisfront" target="_blank" rel="noopener noreferrer">RedisFront</a></h3>
<p>一款基于 <code>Java Swing</code> 开发的跨平台 <code>Redis</code> 桌面客户端工具，简单易用，功能完善，支持单机模式, 集群模式, 哨兵模式以及 <code>SSH</code> 隧道连接。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694479428453.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/lyswhut/lx-music-desktop" target="_blank" rel="noopener noreferrer">洛雪音乐助手</a></h3>
<p>一个基于 <code>Electron</code> + <code>Vue</code> 开发的音乐软件。使用到的技术栈：</p>
<ul>
<li><code>Electron 15+</code></li>
<li><code>Vue 3</code></li>
</ul>
<p>已支持如下平台：</p>
<ul>
<li><code>Windows</code> 7 及以上</li>
<li><code>macOS</code></li>
<li><code>Linux</code></li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695020246006.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://trends.google.com/trends/" target="_blank" rel="noopener noreferrer">Google 指数</a></h3>
<p>基于 <code>Google</code> 搜索数据的数据分享平台，可以展示不同关键词、主题、时间段或区域的搜索热度和趋势，还能查看时下流行每日/实时搜索趋势。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045669849.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://index.baidu.com/v2/index.html#/" target="_blank" rel="noopener noreferrer">百度指数</a></h3>
<p>百度指数是以百度海量网民行为数据为基础的数据分享平台。在这里，你可以研究关键词搜索趋势、洞察网民兴趣和需求、监测舆情动向、定位受众特征。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045709392.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://index.chinaz.com/" target="_blank" rel="noopener noreferrer">站长指数</a></h3>
<p>站长全网指数查询是以各大搜索引擎海量网民搜索行为数据为基础的数据分享平台。在这里，你可以研究关键词在各大搜索引擎的趋势、洞察网民需求变化、监测媒体舆情趋势、定位数字消费者特征；还可以从行业的角度，分析市场特点。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045739609.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/EndlessCheng/codeforces-go" target="_blank" rel="noopener noreferrer">算法竞赛模板库</a></h3>
<p><code>Golang</code> 算法竞赛模板库，涵盖以下知识：</p>
<ul>
<li>对该算法的基本介绍（核心思想、复杂度等）</li>
<li>参考链接或书籍章节（讲的比较好的资料）</li>
<li>模板代码（可以包含一些注释、使用说明）</li>
<li>模板补充内容（常见题型中的额外代码、建模技巧等）</li>
<li>相关题目链接（模板题、经典题、思维转换题等）</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695167550597.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/cbamls/AI_Tutorial" target="_blank" rel="noopener noreferrer">AI_Tutorial</a></h3>
<p>全面整理高质量的人工智能、机器学习、大数据等技术资料。内容主要来自开源项目官网、综合技术网站（<code>AIQ</code> 、<code>InfoQ</code>、<code>Stackoverflow</code>、<code>Github</code> 等、国内外知名互联网公司技术博客 (<code>FAANG</code>、<code>Alibaba</code>、<code>Meituan etc</code>)、知名技术公众号 (<code>DatafunTalk</code>、阿里技术等)。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695167590367.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/Visualize-ML/Book3_Elements-of-Mathematics" target="_blank" rel="noopener noreferrer">数学要素</a></h3>
<p>为了让大家学数学、用数学，甚至爱上数学，作者颇费心机。尽量克服了传统数学教材的各种弊端，让大家学习时有兴趣、能看懂、有思考、更自信。丛书内容具有以下特点：</p>
<ul>
<li>数学 + 艺术</li>
<li>零基础</li>
<li>知识网络</li>
<li>理论 + 实践</li>
<li>学习生态</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695168676584.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-05T15:19:41.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#28：</title>
    <id>https://cunyu1943.github.io/weekly/2023/1021-1027.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/1021-1027.html"/>
    <updated>2023-09-21T08:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#28：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/ashutosh00710/github-readme-activity-graph" target="_blank" rel="noopener noreferrer">github-readme-activity-graph</a></h3>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#28：</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/ashutosh00710/github-readme-activity-graph" target="_blank" rel="noopener noreferrer">github-readme-activity-graph</a></h3>
<p>动态生成的活动图表，显示您过去 31 天的 <code>GitHub</code> 活动。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694477896036.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/dotnetcore/FastGithub" target="_blank" rel="noopener noreferrer">FastGithub</a></h3>
<p>访问 <code>Github</code> 的加速神器，解决 <code>Github</code> 打不开、用户头像无法加载、<code>releases</code> 无法上传下载、<code>git-clone</code>、<code>git-pull</code>、<code>git-push</code> 失败等问题。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694478496664.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/SocialSisterYi/bilibili-API-collect" target="_blank" rel="noopener noreferrer">bilibili-API-collect</a></h3>
<p>对 B 站 <code>WEB</code>、<code>APP</code>、<code>TV</code> 等客户端中，散落在世界各地的野生 <code>API</code> 进行收集整理，研究使用方法并对其进行说明，运用了黑箱法、控制变量法、代码逆向分析、拆包及反编译法、网络抓包法等研究办法。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694488059398.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/cuifengcn/TAICHI-flet" target="_blank" rel="noopener noreferrer">TAICHI-flet</a></h3>
<p>基于 <code>flet</code> 的一款 <code>Windows</code> 桌面应用，实现了浏览图片、音乐、小说、漫画、各种资源的功能。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695082724336.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/JoeanAmier/TikTokDownloader" target="_blank" rel="noopener noreferrer">TikTokDownloader</a></h3>
<p>完全开源，基于 <code>Requests</code> 模块实现；批量下载抖音账号发布、喜欢、收藏的作品；单独下载抖音链接或 TikTok 链接对应的作品；获取抖音直播推流地址；下载抖音直播视频；采集抖音作品评论数据；批量下载抖音合集作品；采集抖音账号详细数据；采集抖音用户 / 作品搜索结果；采集抖音热榜数据。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695132672885.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/hiroi-sora/Umi-OCR" target="_blank" rel="noopener noreferrer">Umi-OCR</a></h3>
<p><code>OCR</code> 图片转文字识别软件，完全离线。截屏/批量导入图片，支持多国语言、合并段落、竖排文字。可排除水印区域，提取干净的文本，基于 <code>PaddleOCR</code> 。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695177438928.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://data.stats.gov.cn/" target="_blank" rel="noopener noreferrer">国家数据</a></h3>
<p>数据源于国家统计局，包含了我国经济民生等多个方面的数据，包含普查数据、地区数据、部门数据、国际数据等多方面内容，并且在月度、季度、年度都有覆盖，十分全面。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045793670.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.ceicdata.com/zh-hans" target="_blank" rel="noopener noreferrer">CEIC</a></h3>
<p>前所未有地覆盖全球超过 213 个国家和地区的经济数据（宏观经济、<code>GDP</code>、进出口、能源等）。<code>CEIC</code> 帮助您一站式获取来自上千个数据源的百万级的时间序列数据，客服团队帮助您寻找或解释您想要的数据信息。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045837586.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.un.org/zh/library/page/databases" target="_blank" rel="noopener noreferrer">联合国数据库</a></h3>
<p>包含发展、裁军、经济和金融、国际法、国际关系、和平与安全、社会事务等多个方面的内容。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694045873807.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/AmazingAng/WTF-Solidity" target="_blank" rel="noopener noreferrer">WTF Solidity</a></h3>
<p><code>Solidity</code> 极简入门教程，供小白们使用，每周更新 1-3 讲。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695168807414.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/zotero-chinese/wiki" target="_blank" rel="noopener noreferrer">Zotero 中文文档仓库</a></h3>
<p><code>Zotero</code> 中文用户文档、中文开发文档、<code>CSL</code> 文档中文译文。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695254544777.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/xdite/note-hack" target="_blank" rel="noopener noreferrer">打造超人笔记</a></h3>
<p>一本关于如何有效记录和整理笔记的书籍。作者认为，笔记是一个看起来复杂但实际上比学习和阅读更简单的问题。通过拆解笔记的流程，作者发现主要问题的结构变得非常简单。此外，随着科技的发展，许多快速记录工具和笔记整理软件已经被发明出来，使笔记搜索变得更加容易。在本书中，作者探讨了如何通过做笔记和整理笔记来挖掘和整理自己对一个领域的各种答案。通过阅读本书，读者可以学习到如何使用各种工具和方法来提高自己的笔记能力，成为一个笔记超人。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695278993808.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-05T15:19:41.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#24：动手学深度学习</title>
    <id>https://cunyu1943.github.io/weekly/2023/0923-0929.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0923-0929.html"/>
    <updated>2023-09-29T14:35:48.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#24：动手学深度学习</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/pYE7ZWfc9YpFG9YLyTwe5Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/pYE7ZWfc9YpFG9YLyTwe5Q</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#24：动手学深度学习</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/pYE7ZWfc9YpFG9YLyTwe5Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/pYE7ZWfc9YpFG9YLyTwe5Q</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://gitee.com/dromara/x-easypdf" target="_blank" rel="noopener noreferrer">x-easypdf</a></h3>
<p>一个基于 <code>pdfbox/fop</code> 二次封装的框架，目前拥有两大模块：<code>pdfbox</code> 模块与 <code>fop</code>模块。</p>
<ul>
<li><strong>pdfbox 模块</strong>：主打 <code>pdf</code> 编辑功能，以组件化的形式进行 <code>pdf</code> 的构建。</li>
<li><strong>fop 模块</strong>：主打 <code>pdf</code> 导出功能，采用数据源的方式对 <code>xsl-fo</code> 模板进行转换，同时提供 <code>Java</code> 对象的方式构建 <code>dom</code> 模板文档，即使完全不懂 <code>xsl-fo</code> 的语法，也能轻松上手写出对应的模板。两个模块均可单独使用，也可以结合使用，帮助开发者快速生成 <code>pdf</code> 文档。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/primihub/primihub" target="_blank" rel="noopener noreferrer">primihub</a></h3>
<p>由密码学专家团队打造的开源隐私计算平台，支持多方安全计算、联邦学习、隐私求交、匿踪查询等。项目具有以下特点：</p>
<ul>
<li>开源：完全开源、免费</li>
<li>安装简单：支持 <code>Docker</code> 一键部署</li>
<li>开箱即用：拥有 <code>Web</code> 界面、命令行 和 <code>Python SDK</code> 多种使用方式</li>
<li>功能丰富：支持隐匿查询、隐私求交、联合统计、数据资源管理等功能</li>
<li>灵活配置：支持自定义扩展语法、语义、安全协议等</li>
<li>自主研发：基于安全多方计算、联邦学习、同态加密、可信计算等隐私计算技术</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/tangly1024/NotionNext" target="_blank" rel="noopener noreferrer">NotionNext</a></h3>
<p>使用 <code>NextJS</code> + <code>Notion API</code> 实现的，支持多种部署方案的静态博客，无需服务器、零门槛搭建网站，为<code>Notion</code> 和所有创作者设计。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://33-app.agilestudio.cn/" target="_blank" rel="noopener noreferrer">33 台词</a></h3>
<p>通过台词找影片素材，视频创作者、自媒体、英语/日语学习者的必备利器。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.yingdev.com/projects/wgestures2" target="_blank" rel="noopener noreferrer">WGestures</a></h3>
<p>优秀实用的全局鼠标手势应用，支持重新定义手势、自定义菜单、脚本支持、黑/白名单等多项功能。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.onenote.com/" target="_blank" rel="noopener noreferrer">One Note</a></h3>
<p>是 <code>Microsoft</code> 推出的一款数字笔记本软件，Office 365 包的一部分。最常用于笔记本电脑或台式电脑，但这套软件更适合用于支持手写笔操作的平板电脑，在这类设备上可使用触笔、声音或视频创建笔记。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://www.appinn.com/" target="_blank" rel="noopener noreferrer">小众软件</a></h3>
<p>一个分享、体验、评测电脑软件、手机应用、互联网产品的网站。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.smzdm.com/" target="_blank" rel="noopener noreferrer">什么值得买</a></h3>
<p>什么值得买是千万用户热爱的科学消费指南，以“独立思考、高效决策、利他共享、真知灼见”为核心价值，主张“科学消费，认真生活”。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.iplaysoft.com/" target="_blank" rel="noopener noreferrer">异次元软件</a></h3>
<p>极具人气和特色的软件网站！专注于推荐优秀软件、<code>APP</code> 应用和互联网资源，每篇图文评测都极其用心，并提供大量软件资源下载。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://chromewebstore.google.com/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah" target="_blank" rel="noopener noreferrer">购物党自动比价工具</a></h3>
<p>浏览商品页面时，自动查询 180 天历史价格、比较同款商品的全网最低价、提示促销和隐藏优惠券、一旦降价还能通过微信提醒你，海淘、二手房和 <code>Steam</code> 游戏也能比价！插件具有以下特性：</p>
<ul>
<li>180 天历史价格跟踪，识别虚假促销（历史促销信息也能跟踪）</li>
<li>自动货比三家，帮你找到全网最低价，防止买贵</li>
<li>自动提示促销活动和隐藏优惠券，能省则省</li>
<li>支持全网收藏，一旦降价可以通过微信提醒</li>
<li>支持比价的网站包括淘宝、京东、天猫、苏宁、当当、亚马逊（含美亚日亚德亚英亚）、<code>Steam</code>&nbsp;游戏、链家贝壳我爱我家二手房等数百家，网上能买的东西都能比！</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://chromewebstore.google.com/detail/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E4%BB%AC%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E4%B8%AA%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd" target="_blank" rel="noopener noreferrer">为什么你们就是不能加个空格呢？</a></h3>
<p>自动在网页中所有的中文字和半形的英文、数字、符号之间插入空白。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://chromewebstore.google.com/detail/%E6%97%A0%E5%90%8D%E5%9B%BE%E4%B9%A6/phdenkfgmlepeekcelnaijpophlbcnoa" target="_blank" rel="noopener noreferrer">无名图书</a></h3>
<p>图书搜索并下载，便捷的图书搜索平台，大部分图书基本都能搜到并且可以免费下载图书。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">toBeBetterJavaer</a></h3>
<p>一份通俗易懂、风趣幽默的 <code>Java</code> 学习指南，内容涵盖 <code>Java</code> 基础、<code>Java</code> 并发编程、<code>Java</code> 虚拟机、<code>Java</code> 企业级开发、<code>Java</code> 面试等核心知识点。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreferrer">动手学深度学习</a></h3>
<p>面向中文读者、能运行、可讨论。中英文版被 70 多个国家的 500 多所大学用于教学。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/YSGStudyHards/DotNetGuide" target="_blank" rel="noopener noreferrer">DotNetGuide</a></h3>
<p>记录、收集和总结 <code>C#/.NET/.NET Core</code> 基础知识、学习路线、开发实战、学习视频、文章、书籍、项目框架、社区组织、开发必备工具、常见面试题、面试须知、简历模板、以及自己在学习和工作中的一些微薄见解。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-05T00:30:39.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#25：PPT 超级市场</title>
    <id>https://cunyu1943.github.io/weekly/2023/0930-1006.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0930-1006.html"/>
    <updated>2023-10-06T10:33:40.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#25：PPT 超级市场</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/vdKsUXuj5vdEDKso9OJ4eQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/vdKsUXuj5vdEDKso9OJ4eQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#25：PPT 超级市场</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/vdKsUXuj5vdEDKso9OJ4eQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/vdKsUXuj5vdEDKso9OJ4eQ</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/bage2014/study" target="_blank" rel="noopener noreferrer">study</a></h3>
<p><code>Java</code> 全栈工程师学习笔记；<code>Spring</code>、<code>shiro</code>、<code>CAS</code>、<code>oauth2</code> 单点登录；<code>cache </code>、<code>Redis</code>; <code>web</code> 安全及解决思路；<code>mq</code>、<code>quartz</code>、<code>Docker</code>；<code>Docker</code> 各种组件实践等；<code>MyBatis</code>、<code>Spring</code>、<code>Spring Boot</code> 实践；分布式锁；基于分库分表等等。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694391373421.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights" target="_blank" rel="noopener noreferrer">MaaAssistantArknights</a></h3>
<p>一款明日方舟游戏小助手，基于图像识别技术，一键完成全部日常任务！</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476585427.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/dushixiang/next-terminal" target="_blank" rel="noopener noreferrer">Next Terminal</a></h3>
<p>一个简单好用安全的开源交互审计系统，支持 <code>RDP</code>、<code>SSH</code>、<code>VNC</code>、<code>Telnet</code>、<code>Kubernetes</code> 协议。目前支持的功能有：</p>
<ul>
<li>授权凭证管理</li>
<li>资产管理（支持 <code>RDP</code>、<code>SSH</code>、<code>VNC</code>、<code>TELNET</code> 协议）</li>
<li>指令管理</li>
<li>批量执行命令</li>
<li>在线会话管理（监控、强制断开）</li>
<li>离线会话管理（查看录屏）</li>
<li>双因素认证</li>
<li>资产标签</li>
<li>资产授权</li>
<li>多用户&amp;用户分组</li>
<li>计划任务</li>
<li><code>ssh server</code></li>
<li>登录策略</li>
<li>系统监控</li>
</ul>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694476618572.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://www.flowlauncher.com/" target="_blank" rel="noopener noreferrer">Flow Launcher</a></h3>
<p>快搜搜索文件和启动 <code>app</code>，取代 <code>Windows</code> 自带搜索的必备神器，类似于 <code>macOS</code> 中的 <code>Alfred</code>。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694388736952.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://geekuninstaller.com/" target="_blank" rel="noopener noreferrer">Geek Uninstaller</a></h3>
<p>是一款 100% 免费且高效、快速、小而便携电脑清理卸载软件，易于使用的用户界面，执行深度和快速扫描并删除所有残留信息。保持你的电脑干净！支持卸载 <code>Windows</code> 8/8.1/10 上的 <code>Windows</code> 应用商店应用。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694389024194.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/namazso/OpenHashTab" target="_blank" rel="noopener noreferrer">OpenHashTab</a></h3>
<p>资源管理器右键文件-&gt;属性，即可查看文件 <code>MD5</code>、<code>SHA1</code> 等各类 <code>Hash</code> 信息。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694389152477.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://www.1ppt.com/" target="_blank" rel="noopener noreferrer">第 1 PPT</a></h3>
<p>这里有海量 <code>PPT</code> 素材，幻灯片背景图片，<code>PPT</code> 模板免费下载，专注 <code>PowerPoint</code> 素材下载！</p>
<p>而且支持在线预览，不用登录即可免费下载。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958767707.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.pptsupermarket.com/" target="_blank" rel="noopener noreferrer">PPT 超级市场</a></h3>
<p>免费下载 <code>PPT</code> 模板与 <code>PPT</code> 作品，提供免费的 <code>PPT</code> 代做服务，提供一站式 <code>PPT</code>(模板、定制、工具、教程)服务，有了它，一切制作 <code>PPT</code> 的烦恼都将成为过去！</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958801945.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.aigei.com/" target="_blank" rel="noopener noreferrer">爱给网</a></h3>
<p>中国最大的数字娱乐免费素材下载网站,免费提供免费的音效配乐、3D模型、视频、游戏素材资源下载。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1693958840698.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://chromewebstore.google.com/detail/microsoft-365/ndjpnladcallmjemlbaebfadecfhkepb" target="_blank" rel="noopener noreferrer">Microsoft 365</a></h3>
<p>在浏览器中查看、编辑和创建文档。</p>
<p>专用于 <code>Chrome</code> – 无需安装 <code>Microsoft</code> 365 应用即可使用 <code>Word</code>、<code>Excel</code>、<code>PowerPoint</code>、<code>OneNote</code> 和 <code>Sway Online</code>。</p>
<p>熟练地创建文件 – 使用熟悉的格式和布局选项来完全忠实地表达你的想法。</p>
<p>随时随地开展工作 – 与 <code>OneDrive</code> 和 <code>OneDrive for Business</code> 集成，可从任意位置获取文件。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695607160427.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.turnoffthelights.com/zh-cn/" target="_blank" rel="noopener noreferrer">关灯看视频</a></h3>
<p>一个免费的开源浏览器扩展，允许用户将除 <code>HTML5</code> 视频以外的所有部分变暗。适用于所有网络浏览器，例如 <code>Google Chrome</code>、<code>Microsoft Edge</code> 等。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695607160706.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.awesomescreenshot.com/" target="_blank" rel="noopener noreferrer">Awesome Screenshot</a></h3>
<p>超级截图录屏大师是一款录屏神器，也是一款截屏神器．屏幕截图 &amp; 图片编辑，屏幕录像 ＆ 视频编辑，所有这些截图，录屏功能，都被一气呵成的集成到插件和对应的网站服务中。支持如下功能：</p>
<ul>
<li><strong>屏幕录像</strong></li>
</ul>
<ol>
<li>对网页内容进行屏幕录像</li>
<li>对全桌面进行录屏</li>
<li>对某一个软件进行录屏</li>
<li>录摄像头</li>
<li>支持高清录制</li>
<li>支持下载为 <code>MP4</code> 格式</li>
<li>视频编辑功能</li>
<li>既可以保存到云端，也可以保存到本地</li>
</ol>
<ul>
<li><strong>屏幕截图和抓屏</strong></li>
</ul>
<ol>
<li>截取网页全屏，不论网页多长，都可以将这个网页变成一张图片，方便编辑和分享</li>
<li>选择部分屏幕截取</li>
<li>对屏幕可视部分进行截图</li>
<li>不但帮助保存截图，还可以保存该截图对应的 <code>URL</code></li>
</ol>
<ul>
<li><strong>图片批注和编辑</strong></li>
</ul>
<ol>
<li>选择你所需要的尺寸</li>
<li>方框，圆圈，箭头等各种尺寸的批注</li>
</ol>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1695607160427.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1. <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/" target="_blank" rel="noopener noreferrer">C# 文档</a></h3>
<p>面向新手开发人员、刚开始接触 <code>C#</code> 的开发人员、以及经验丰富的 <code>C#/.NET</code> 开发人员。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694518162388.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 2. <a href="https://learn.microsoft.com/zh-cn/dotnet/" target="_blank" rel="noopener noreferrer">.NET 文档</a></h3>
<p>了解如何使用 <code>.NET</code> 在任何使用 <code>C#</code>、<code>F#</code> 和 <code>Visual Basic</code> 的平台上创建应用程序。 浏览 <code>API</code> 引用、代码示例、教程以及其他内容。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694518376166.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/ljinkai/weekly" target="_blank" rel="noopener noreferrer">独立开发变现周刊</a></h3>
<p>分享独立开发变现人物志、产品周刊、工具集，每周五发布。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/weekly/2023/assets/1694518686460.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-09-05T00:30:39.000Z</published>
  </entry>
  <entry>
    <title type="text">CSS 教程</title>
    <id>https://cunyu1943.github.io/java-tutorial/web-front-series/20230903-css.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/web-front-series/20230903-css.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> CSS 教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<h2> 二、概念</h2>
<h3> 1. 什么是 CSS</h3>
<p><code>CSS</code>（<code>Cascading Style Sheets</code>），中文译为 <strong>层叠样式表</strong>。它是一种样式表语言，用于美化 <code>HTML</code> 文档的呈现。一般位于 <code>&lt;head&gt;</code> 头部，<code>&lt;title&gt;</code> 标签下添加 <code>&lt;style&gt;</code> 标签，<code>CSS</code> 代码就放在 <code>&lt;style&gt;</code> 中。</p>]]></summary>
    <content type="html"><![CDATA[<h1> CSS 教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<h2> 二、概念</h2>
<h3> 1. 什么是 CSS</h3>
<p><code>CSS</code>（<code>Cascading Style Sheets</code>），中文译为 <strong>层叠样式表</strong>。它是一种样式表语言，用于美化 <code>HTML</code> 文档的呈现。一般位于 <code>&lt;head&gt;</code> 头部，<code>&lt;title&gt;</code> 标签下添加 <code>&lt;style&gt;</code> 标签，<code>CSS</code> 代码就放在 <code>&lt;style&gt;</code> 中。</p>
<h3> 2. CSS 引入方式</h3>
<p><code>CSS</code> 引入方式有三种，分别是：</p>
<ul>
<li><strong>内部样式表</strong></li>
<li><strong>外部样式表</strong></li>
<li><strong>行内样式</strong></li>
</ul>
<p><strong>（1）内部样式表</strong></p>
<p>将样式代码写在 <code>style</code> 标签中。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274512428615303226" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274512428615303226</a></p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）外部样式表</strong></p>
<p>将样式代码写在单独的 <code>CSS</code> 文件中（后缀为 <code>.css</code>），接着在 <code>HTML</code> 中通过 <code>&lt;link&gt;</code> 标签引入即可。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274578705379229759" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274578705379229759</a></p>
</blockquote>
<div class="language-css-demo.css line-numbers-mode" data-ext="css-demo.css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）行内样式</strong></p>
<p>在 <code>HTML</code> 基础标签中添加 <code>style</code> 属性，<code>style</code> 属性的值为 <code>CSS</code> 代码。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274579350450602045" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274579350450602045</a></p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 三、选择器</h2>
<h3> 1. 基础选择器</h3>
<p>使用标签名作为选择器，然后为其设置相同的样式。比如选择器如果为 <code>a</code>，则代表所有链接标签都将具有 <code>a</code> 选择器所设置的样式。</p>
<h3> 2. 类选择器</h3>
<p>查找标签，差异化设置标签的显示效果。</p>
<p>使用类选择器的步骤如下。</p>
<ul>
<li>定义类选择器，一般是 <code>.类名</code></li>
<li>使用类选择器，在标签中添加 <code>class="类名"</code></li>
</ul>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274579791225815095" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274579791225815095</a></p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，一个标签中可以使用多个类选择器，只需要将各个选择器用空格隔开就好。类选择器名自定义，注意不要用纯数字或者中文，尽量用英文。</p>
<h3> 3. id 选择器</h3>
<p>类似于类选择器，用于查找标签，差异化设置标签的显示效果。一般是配合 <code>JavaScript</code> 使用，很少用来设置 <code>CSS</code> 样式。</p>
<p>使用 <code>id</code> 选择器的步骤如下：</p>
<ul>
<li>定义 <code>id</code> 选择器，一般是 <code>#id名</code></li>
<li>使用 <code>id</code> 选择器，在表其中添加 <code>id="id名"</code></li>
</ul>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274586257244553273" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274586257244553273</a></p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，同一个 <code>id</code> 选择器，在一个页面中通常只能使用一次。</p>
<h3> 4. 通配符选择器</h3>
<p>用于查找页面中所有的标签，然后给它们设置相同的样式。通配符选择器为 <code>*</code>，无需调用浏览器就会自动查找页面中的所有标签，设置统一样式。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274588738708537403" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274588738708537403</a></p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 复合选择器</h3>
<p>由两个或多个基础选择器通过不同的方式组合而成的选择器，能够更加准确高效地选择目标元素。</p>
<p>可以分为后代选择器、子代选择器、并集选择器。</p>
<p>（1）<strong>后代选择器</strong></p>
<p>用于选中某元素的后代元素，书写语法如下，其中，父选择器和子选择器之间用空格分隔。</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7278316108086509583" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7278316108086509583</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）<strong>子代选择器</strong></p>
<p>用于选中某元素的子代元素，书写语法如下，其中，父选择器和子选择器之间用 <code>&gt;</code> 分隔。</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7278317640706162748" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7278317640706162748</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）<strong>并集选择器</strong></p>
<p>用于选中多组标签，设置相同的样式。书写语法如下，选择器之间用 <code>,</code> 分隔。</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7278319757644005376" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7278319757644005376</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四、画盒子</h2>
<p>利用合适的选择器画盒子，常用属性如下表。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7274599388759916603" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7274599388759916603</a></p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>width</code></td>
<td>设置盒子宽度</td>
</tr>
<tr>
<td style="text-align:left"><code>height</code></td>
<td>设置盒子高度</td>
</tr>
<tr>
<td style="text-align:left"><code>background-color</code></td>
<td>设置背景色</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 五、文字控制属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>font-size</code></td>
<td>字体大小</td>
</tr>
<tr>
<td><code>font-weight</code></td>
<td>字体粗细</td>
</tr>
<tr>
<td><code>font-style</code></td>
<td>字体倾斜</td>
</tr>
<tr>
<td><code>line-height</code></td>
<td>行高</td>
</tr>
<tr>
<td><code>font-family</code></td>
<td>字体族</td>
</tr>
<tr>
<td><code>font</code></td>
<td>字体复合属性</td>
</tr>
<tr>
<td><code>text-indent</code></td>
<td>文本缩进方式</td>
</tr>
<tr>
<td><code>text-align</code></td>
<td>文本对齐方式</td>
</tr>
<tr>
<td><code>text-decoration</code></td>
<td>文本修饰线</td>
</tr>
<tr>
<td><code>color</code></td>
<td>字体颜色</td>
</tr>
</tbody>
</table>
<h3> 1. 字体大小</h3>
<p>用于指定文字尺寸大小，必须带有单位，否则不会生效，常用单位为 <code>px</code>。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7275347343271002167" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275347343271002167</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. 字体粗细</h3>
<p>用于设置字体粗细，单位既可以使用数字，也可以使用关键字。不过在正式开发时，一般都推荐使用数字的形式。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7275351160939577405" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275351160939577405</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. 字体倾斜</h3>
<p>设置文字倾斜效果。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7275713613934329914" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275713613934329914</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 行高</h3>
<p>设置多行文本的间距，属性值有两种写法，一种是 数字 + <code>px</code> 的方式，而另一种则是直接数字的方式，表示为标签 <code>font-size</code> 属性值的倍数。</p>
<blockquote>
<p><strong>预览效果</strong>：<a href="https://code.juejin.cn/pen/7275715629028802616" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275715629028802616</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5. 字体族</h3>
<p>设置文本字体，属性值为字体名。注意，属性值可以有多个字体名，只需要用逗号隔开即可，执行顺序是从左往右依次查找。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7275720518836158523" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275720518836158523</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6. 复合属性</h3>
<p>用于设置网页文字的公共样式，使用语法如下：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用时，属性一定要按照顺序写，而且字号和字体必须要有，否则 <code>font</code> 属性将无效。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7275723268651548709" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7275723268651548709</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7. 文本缩进</h3>
<p>设置文本首行缩进效果，属性值可以是两种形式，一种是 <strong>数字 + <code>px</code></strong>，而另一种则是 <strong>数字 + <code>em</code></strong> 的形式，其中 <code>1em</code> = 当前标签的字号大小。</p>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7276092884367966269" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7276092884367966269</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8. 文本对齐</h3>
<p>控制文本水平对齐方式，主要有左对齐、居中对齐、右对齐等形式，其中默认效果是左对齐。各属性值说明如下：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>left</code></td>
<td>左对齐</td>
</tr>
<tr>
<td><code>center</code></td>
<td>居中对齐</td>
</tr>
<tr>
<td><code>right</code></td>
<td>右对齐</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7276094993277091852" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7276094993277091852</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9. 修饰线</h3>
<p>用于给文本添加修饰线，常用的有以下几个属性值：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>none</code></td>
<td>无效果</td>
</tr>
<tr>
<td><code>underline</code></td>
<td>下划线</td>
</tr>
<tr>
<td><code>line-through</code></td>
<td>删除线</td>
</tr>
<tr>
<td><code>overline</code></td>
<td>上划线</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>预览地址</strong>：<a href="https://code.juejin.cn/pen/7276097261292945408" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7276097261292945408</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10. 颜色</h3>
<p>设置文本颜色，属性值主要有 4 种表示方式：</p>
<table>
<thead>
<tr>
<th>表示方式</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>颜色关键字</td>
<td>英文单词</td>
<td><code>green</code>、<code>blue</code>、<code>red</code></td>
</tr>
<tr>
<td><code>rgb</code></td>
<td><code>rgb(r, g, b)</code></td>
<td><code>r</code>、<code>g</code>、<code>b</code> 表示红绿蓝三原色，取值范围是：<code>0 -255</code></td>
</tr>
<tr>
<td><code>rgba</code></td>
<td><code>rgba(r, g, b, a)</code></td>
<td>相比于 <code>rgb</code> 表示法多了一个 <code>a</code>，用于表示透明度，取值范围是：<code>0 - 1</code></td>
</tr>
<tr>
<td>十六进制</td>
<td><code>#RRGGBB</code></td>
<td>如 <code>#000000</code> 表示黑色，<code>#FFFFFF</code> 表示白色</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>效果预览</strong>：<a href="https://code.juejin.cn/pen/7276102359267639331" target="_blank" rel="noopener noreferrer">https://code.juejin.cn/pen/7276102359267639331</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Web 前端教程"/>
    <published>2023-09-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTML 大揭秘</title>
    <id>https://cunyu1943.github.io/java-tutorial/web-front-series/20230829-html.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/web-front-series/20230829-html.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> HTML 大揭秘</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>准备工作完成，就该正式进入 <code>Web</code> 前端相关知识的学习了。而前端三件套（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）中，首当其冲的当然就是 <code>HTML</code> 。本篇文章中，就来看看 <code>HTML</code> 的基础语法学习。</p>]]></summary>
    <content type="html"><![CDATA[<h1> HTML 大揭秘</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>准备工作完成，就该正式进入 <code>Web</code> 前端相关知识的学习了。而前端三件套（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）中，首当其冲的当然就是 <code>HTML</code> 。本篇文章中，就来看看 <code>HTML</code> 的基础语法学习。</p>
<h2> 二、概念</h2>
<p><code>HTML</code>（<code>Hyper Text Markup Language</code>），中文译为超文本标记语言。其中，我们需要注意两个关键词。一个是 <strong>超文本</strong>，一个是 <strong>标记</strong>。所谓超文本，就是将不同空间的文字信息通过超链接的方式组织在一起的网状文本，往简单了将就是我们说的链接。而标记的另一个名字也叫标签，就是网页源码中带尖括号（<code>&lt;&gt;</code>）的文本。</p>
<h2> 三、语法</h2>
<h3> 1. 标签</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个标签示例，其中 <code>&lt;h1&gt;</code> 叫做 <strong>开始标签</strong>，而 <code>&lt;/h1&gt;</code> 叫做 <strong>结束标签</strong>。</p>
<p>通过观察，可以发现标签的主要特点，分别是：</p>
<ul>
<li>标签成对出现，标签中间包裹内容。</li>
<li>标签由尖括号（<code>&lt;&gt;</code>）中加英文单词共同组成，而这个英文单词，就叫做标签名。</li>
<li>相比于开始标签，结束标签多了 <code>/</code></li>
</ul>
<p>此外，标签还有不同的分类，一类是单标签，而另一类则是双标签。</p>
<p>单标签指的是那些只有开始标签，没有结束标签的标签，而双标签则是那些成对出现的标签。</p>
<h3> 2. HTML 基本骨架</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是 <code>HTML</code> 的基本骨架，网页所有内容都包含在 <code>html</code> 标签中。网页中，主要由头部 <code>head</code> 和主体 <code>body</code> 共同组成。其中头部用于存放给浏览器使用的信息，比如 <code>CSS</code> 样式、<code>JS</code> 脚本。而网页主体则存放展示给用户的信息，如图片、文字、视频等。</p>
<h3> 3. 标签之间的关系</h3>
<p>各标签之间，最主要的有两种关系，一种是 <strong>嵌套关系</strong>，一种是 <strong>并列关系</strong>，而它们存在的意义就是让我们明确标签的书写位置，让代码格式更加整齐，提高代码可读性。</p>
<p>以基本骨架中的代码来说，<code>html</code> 和 <code>head</code> 是嵌套关系，而 <code>head</code> 和 <code>body</code> 之间的关系则是并列关系。</p>
<ul>
<li><strong>嵌套关系</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>并列关系</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4. 注释</h3>
<p>注释就是对代码的解释说明，存在的意义是让开发者能更加轻松地了解代码。一般是开发者在编码时为某些语句、程序段、函数等添加的提示，从而提高代码的可读性，方便其他开发者快速掌握，也方便后续代码修改。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5. 标题</h3>
<p>一般用在文章标题、网页区域名称、产品名称等，共分为 6 级标题，对应的标签分别是：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在日常使用时需要注意，一个网页中 <code>h1</code> 一般只能使用一次，而 <code>h2~h6</code> 则没有使用次数的限制。</p>
<h3> 6. 段落</h3>
<p>一般用于文章段落、产品描述信息等。该标签会自动在其前后创建一些空白，浏览器将自动添加这些空间。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 7. 换行 &amp; 水平线</h3>
<ul>
<li><strong>换行</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>水平线</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不同于其他双标签，这两个标签都属于单标签，用于实现文本换行和在文本中间添加水平线。</p>
<h3> 8. 文本格式化</h3>
<p>可以给文本添加特殊格式，比如加粗、斜体、下划线、删除线等效果。</p>
<ul>
<li><strong>加粗</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>斜体</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>下划线</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除线</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9. 图片</h3>
<p>为了在网页中插入图片，可以使用图像标签，其使用语法如下：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>src</code> 属性用于指定图片位置和名称，是 <code>img</code> 标签不可缺少的属性。</p>
<p>除开 <code>src</code> 属性之外， <code>img</code> 最常用的标签还有下表中的几个。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>alt</code></td>
<td>替换文本</td>
<td>图片无法显示时展示的文字</td>
</tr>
<tr>
<td><code>title</code></td>
<td>提示文本</td>
<td>鼠标悬停时显示的文字</td>
</tr>
<tr>
<td><code>width</code></td>
<td>设置图片宽度</td>
<td>值一般是数字</td>
</tr>
<tr>
<td><code>height</code></td>
<td>设置图片高度</td>
<td>值一般是数字</td>
</tr>
</tbody>
</table>
<p>注意，标签中存在多个属性时，属性之间用空格隔开，且没有先后顺序之分。</p>
<h3> 10. 超链接</h3>
<p>通过使用超链接，能够实现鼠标点击后跳转到其他页面的效果。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>href</code> 是必需属性，用于指定跳转的页面地址，当 <code>href</code> 属性的值为 <code>#</code>，则表示该链接为空链接，点击后不会进行跳转。除此之外，<code>a</code> 标签还有 <code>target</code> 属性，用于指定是否在新窗口中打开跳转页面。当属性值为 <code>_blank</code> 时，表示在新窗口打开。默认情况下，表示在当前窗口打开。</p>
<h3> 11. 音频</h3>
<p>使用该标签往网页中添加音频，使用语法如下。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常见属性如下表：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>音频地址</td>
<td>必需属性，支持 <code>MP3</code>、<code>Wav</code></td>
</tr>
<tr>
<td><code>controls</code></td>
<td>是否显示音频控制面板</td>
<td></td>
</tr>
<tr>
<td><code>loop</code></td>
<td>是否循环播放</td>
<td></td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>是否自动播放</td>
<td></td>
</tr>
</tbody>
</table>
<h3> 12. 视频</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>视频地址</td>
<td>必需属性，支持 <code>MP4</code>、<code>WebM</code></td>
</tr>
<tr>
<td><code>controls</code></td>
<td>是否显示视频控制面板</td>
<td></td>
</tr>
<tr>
<td><code>loop</code></td>
<td>是否循环播放</td>
<td></td>
</tr>
<tr>
<td><code>muted</code></td>
<td>是否静音播放</td>
<td></td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>是否自动播放</td>
<td>必须在开启静音播放的前提下才能生效</td>
</tr>
</tbody>
</table>
<h3> 13. 列表</h3>
<p>用于布局内容排列整齐的区域，主要分为：<strong>无序列表</strong>、<strong>有序列表</strong>、<strong>定义列表</strong>。</p>
<p><strong>（1）无序列表</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于布局排列整齐的无序规定顺序的区域，语法为 <code>&lt;ul&gt;</code> 标签嵌套 <code>&lt;li&gt;</code> 标签，其中 <code>&lt;ul&gt;</code> 标签表示无序列表，而 <code>&lt;li&gt;</code> 则代表无序列表中的条目。需要注意， <code>&lt;ul&gt;</code> 标签中只能包裹 <code>&lt;li&gt;</code> 标签。</p>
<p><strong>（2）有序列表</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于布局排列整齐的规定顺序的区域，语法为 <code>&lt;ol&gt;</code> 标签嵌套 <code>&lt;li&gt;</code> 标签，其中 <code>&lt;ol&gt;</code> 标签表示无序列表，而 <code>&lt;li&gt;</code> 则代表无序列表中的条目。而且需要注意， <code>&lt;ol&gt;</code> 标签中只能包裹 <code>&lt;li&gt;</code> 标签。</p>
<p><strong>（3）定义列表</strong></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法为 <code>&lt;dl&gt;</code> 嵌套 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code> 标签，其中 <code>&lt;dl&gt;</code> 用于定义列表，<code>&lt;dt&gt;</code> 用于定义列表标题，<code>&lt;dd&gt;</code> 则用于定义列表的描述/详情。注意， <code>&lt;dl&gt;</code> 标签中只能包裹 <code>dt&gt;</code> 和 <code>&lt;dd&gt;</code> 标签。</p>
<h3> 14. 表格</h3>
<p>类似于日常使用中的 <code>Excel</code>，主要用于展示数据。注意，默认情况下，网页中的表格是没有边框线的，需要使用<code>border</code> 属性添加。</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>table</code></td>
<td>表格</td>
</tr>
<tr>
<td><code>tr</code></td>
<td>行</td>
</tr>
<tr>
<td><code>th</code></td>
<td>表头单元格</td>
</tr>
<tr>
<td><code>td</code></td>
<td>内容单元格</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让表格结构和语义更加清晰，通常还是用表格结构标签用来划分区域。下表是表格结构标签的说明。</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>thead</code></td>
<td>表格头部</td>
<td>表格头部内容</td>
</tr>
<tr>
<td><code>tbody</code></td>
<td>表格主体</td>
<td>主要内容区域</td>
</tr>
<tr>
<td><code>tfoot</code></td>
<td>表格底部</td>
<td>汇总信息区域</td>
</tr>
</tbody>
</table>
<p><strong>合并单元格</strong>：将多个单元格合并为一个单元格，用于合并同类信息。又可以分为跨行合并和跨列合并，合并步骤如下：</p>
<ul>
<li>保留最左最上的单元格，添加属性（值为数字，表示需要合并的单元格数量）
<ul>
<li>跨行合并：保留最上的单元格，添加属性 <code>rowspan</code></li>
<li>跨列合并：保留最左的单元格，添加属性 <code>colspan</code></li>
</ul>
</li>
</ul>
<h3> 15. 表单</h3>
<p><strong>（1）input</strong></p>
<p>用于在网页中收集信息。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据标签中 <code>type</code> 属性的值不同，从而具备不同的功能。</p>
<table>
<thead>
<tr>
<th>type 属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text</code></td>
<td>文本框，用于输入单行文本</td>
</tr>
<tr>
<td><code>password</code></td>
<td>密码框</td>
</tr>
<tr>
<td><code>radio</code></td>
<td>单元框</td>
</tr>
<tr>
<td><code>checkbox</code></td>
<td>多选框</td>
</tr>
<tr>
<td><code>file</code></td>
<td>上传文件</td>
</tr>
</tbody>
</table>
<p>为了在输入时更加友好，可以在文本框和密码框中使用 <code>placeholder</code> 来进行提示。</p>
<p>针对单选框，常用属性如下表。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>控件名</td>
<td>控件分组，一组只能选一个</td>
</tr>
<tr>
<td><code>checked</code></td>
<td>默认选中</td>
<td>属性名和属性值相同，简写为一个单词</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>文件上传时，默认上传表单控件只能上传一个文件，如果要实现文件多选功能，需要添加 <code>multiple</code> 属性。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）下拉菜单</strong></p>
<p><code>&lt;select&gt;</code> 嵌套 <code>&lt;option&gt;</code>，其中 <code>&lt;select&gt;</code> 表示下拉菜单整体，而 <code>&lt;option&gt;</code> 则是下来菜单中的每一项，<code>selected</code> 属性表示默认选中项目。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）文本域</strong></p>
<p>用于输入多行文本的表单控件，默认可拖拽。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（4）label</strong></p>
<p>网页中对于某个标签的说明文本。一般可以用 <code>&lt;label&gt;</code> 标签绑定文字和表单控件的关系，从而增大表单控件的点击范围。实现以上功能有两种方式：</p>
<ul>
<li>方式一：<code>&lt;label&gt;</code> 只包裹内容，不包裹表单控件。设置 <code>&lt;label&gt;</code> 的 <code>for</code> 属性值和表单控件的 <code>id</code> 属性值一致。</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方式二：用 <code>&lt;label&gt;</code> 直接包裹文字和表单控件，此时无需设置额外属性。</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（5）按钮</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>submit</code></td>
<td>提交，点击后将数据提交到后台，默认功能</td>
</tr>
<tr>
<td><code>reset</code></td>
<td>重置，点击后将表单控件恢复默认值</td>
</tr>
<tr>
<td><code>button</code></td>
<td>普通按钮，默认无功能，需要配合 <code>JavaScript</code> 使用</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 16. 布局</h3>
<p>用于划分网页区域摆放内容，实现网页布局。</p>
<p><strong>（1）div</strong></p>
<p>独占一行，又叫大盒子。</p>
<p><strong>（2）span</strong></p>
<p>不单独另起一行，又叫小盒子。</p>
<h3> 17. 字符</h3>
<p>用于在网页中显示预留字符。</p>
<table>
<thead>
<tr>
<th>显示</th>
<th>描述</th>
<th>实体名</th>
</tr>
</thead>
<tbody>
<tr>
<td><code> </code></td>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
<td><code>&amp;lt;</code></td>
</tr>
</tbody>
</table>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Web 前端教程"/>
    <published>2023-08-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">开发环境搭建</title>
    <id>https://cunyu1943.github.io/java-tutorial/web-front-series/20230829-environment.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/web-front-series/20230829-environment.html"/>
    <updated>2023-09-18T07:04:08.000Z</updated>
    <summary type="html"><![CDATA[<h1> 开发环境搭建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>正所谓欲善其事，必先利器。那在正式学习 <code>Web</code> 前端之前，不妨来看看，我们都要先做好那些事前准备。</p>
<p>首先，既然要开始写代码了，一个趁手的编辑器/<code>IDE</code> 肯定是必不可少了，不可能还去使用记事本吧。当然也不是看不起记事本，只是技术虽然很重要，但效率也不能落下，要两手抓，才能有更好的产出。</p>]]></summary>
    <content type="html"><![CDATA[<h1> 开发环境搭建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> 一、前言</h2>
<p>正所谓欲善其事，必先利器。那在正式学习 <code>Web</code> 前端之前，不妨来看看，我们都要先做好那些事前准备。</p>
<p>首先，既然要开始写代码了，一个趁手的编辑器/<code>IDE</code> 肯定是必不可少了，不可能还去使用记事本吧。当然也不是看不起记事本，只是技术虽然很重要，但效率也不能落下，要两手抓，才能有更好的产出。</p>
<p>目前主流市场中，前端开发无非主要有以下几个常用的编辑器/<code>IDE</code>，它们分别是：</p>
<ul>
<li><strong>Visual Studio Code</strong></li>
<li><strong>Webstorm</strong></li>
<li><strong>HBuider</strong></li>
<li><strong>Sublime Text</strong></li>
</ul>
<p>软件各有千秋，都有着各自的特色功能。不过环顾左右的前端开发者，大多都选择的是 <code>VS Code</code>（<code>Visual Studio Code</code>）。于是，我们也选择它作为我们 <code>Web</code> 前端教程中的代码编辑器。</p>
<p>有了写代码的家伙事儿还不够，所谓前端，最终的目的无非是实现各种图形化的效果，供用户交互，让用户能一目了然的看到效果。既然如此，写了代码之外，我们就还需要一个载体，将我们代码实现的效果渲染。而这个载体也很常见，也就是我们日常都会用到的浏览器。</p>
<p>截止目前，根据 <code>W3Counter</code> 的统计，<code>Chrome</code> 浏览器占据了绝大部分市场，处于绝对领先地位。</p>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693786691442.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>同时，<code>Chrome</code> 也深受前端开发者的欢迎。出于两方面的考虑，因此选用 <code>Chrome</code> 作为系列教程中用于看效果的载体。</p>
<p>接下来，我们就先来看看，如何在我们的电脑中安装 <code>VS Code</code> 和 <code>Chrome</code>。</p>
<h2> 二、VS Code 安装</h2>
<h3> 1. 下载</h3>
<p>说起来好笑，之前在网上看到有人仿了一个 <code>VS Code</code> 的官网，并且下载安装需要收费。当时没忍住，直接笑出了声。不过也从侧面说明，肯定也有不少小白上过当的，不然也就不会有人闲的去仿官网了。</p>
<p>在此，提醒下大家，<code>VS Code</code> 是微软完全免费开源的一款编辑器，完全没有收费一说。下载时，请认准唯一指定官网。</p>
<blockquote>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/</a></p>
</blockquote>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693786800554.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>虽说官网是英文界面，不过都很简单。选择对应操作的安装包，点击 <code>Download</code> 就能得到想要的安装包了。</p>
<h3> 2. 安装</h3>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693787359078.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693787400353.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693787430775.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693787469522.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/web-front-series/assets/1693787504599.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3. 插件</h3>
<p><strong>（1）插件安装</strong></p>
<p>点击左侧扩展（插件）-&gt; 搜索插件 -&gt; install -&gt; 重启 <code>VS Code</code>。</p>
<p><strong>（2）推荐插件</strong></p>
<ul>
<li><strong>Chinese</strong></li>
</ul>
<p>安装该插件后，<code>VS Code</code> 就能支持中文了，再也不用害怕是英语操作界面而苦恼。</p>
<ul>
<li><strong>Open in Browser</strong></li>
</ul>
<p>顾名思义，就是能够在写好的代码文件中鼠标右键打开对应选项，它就会自动打开浏览器帮助我们渲染了。</p>
<h2> 三、Chrome 安装</h2>
<h3> 1. 下载</h3>
<p>当然了，最靠谱的方式就是从 <code>Chrome</code> 官网下载安装包。不过不出意外的话，大概率是打不开官网的。</p>
<blockquote>
<p><a href="https://www.google.com/chrome/" target="_blank" rel="noopener noreferrer">https://www.google.com/chrome/</a></p>
</blockquote>
<p>这个时候，我们就必须退而求其次，去找找我们能正常下载 <code>Chrome</code> 的地址了。这里推荐去异次元软件世界进行下载，网站提供 <code>Windows</code> 7/8/10/11、<code>macOS</code> 等平台稳定版、测试版、金丝雀版的离线包的下载，还区分 32/64 位安装包，可以说是非常良心了。</p>
<blockquote>
<p><a href="https://www.iplaysoft.com/tools/chrome/" target="_blank" rel="noopener noreferrer">https://www.iplaysoft.com/tools/chrome/</a></p>
</blockquote>
<h3> 2. 安装</h3>
<p>相对与下载而言，<code>Chrome</code> 的安装就十分简单了，只需要双击打开安装包，它就会自动开始安装。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Web 前端教程"/>
    <published>2023-08-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Web 前端教程</title>
    <id>https://cunyu1943.github.io/java-tutorial/web-front-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/web-front-series/"/>
    <updated>2023-08-29T15:08:10.000Z</updated>
    <published>2023-08-29T15:08:10.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#20：写作辅助插件</title>
    <id>https://cunyu1943.github.io/weekly/2023/0826-0901.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0826-0901.html"/>
    <updated>2023-09-19T02:38:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#20：写作辅助插件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zvn977rKj31sJ6QUvMOqwA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zvn977rKj31sJ6QUvMOqwA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#20：写作辅助插件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zvn977rKj31sJ6QUvMOqwA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zvn977rKj31sJ6QUvMOqwA</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/saysky/ForestBlog" target="_blank" rel="noopener noreferrer">ForestBlog</a></h3>
<p>一个简单漂亮的博客系统，基于 SSM（Spring、Spring MVC、MyBatis）开发，适合初学 SSM 和想要制作个人博客的朋友学习。最新版本已经支持用户注册，包含用户和管理员两种角色。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/auroral-ui/hexo-theme-aurora" target="_blank" rel="noopener noreferrer">hexo-theme-aurora</a></h3>
<p>使用极光颜色和 UI 元素的下一代 Hexo 主题，基于 Vue3 开发，给你带来一种平滑流畅的色彩和未来感。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/more-strive/yft-design" target="_blank" rel="noopener noreferrer">yft-design</a></h3>
<p>使用 Vue3 + TypeScript + Fabric.js + Pinia + Element-Plus，支持 文字、图片、形状、线条、二维码 、条形码几种最常用的元素类型，每一种元素都拥有高度可编辑能力，缩略图显示，模板，支持导出 JSON、SVG、Image 文件。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://nxshell.github.io/" target="_blank" rel="noopener noreferrer">NxShell</a></h3>
<p>一款跨平台的 SSH 新终端工具,就像当下流行的 PuTTY 终端一样。但 NxShell 随着后期功能的迭代完善,会生长出自己独有的终端工具超能力。</p>
<p>软件支持如下功能：</p>
<ul>
<li>支持 SSH/Sftp/ftp/Serial/VNC 协议</li>
<li>支持 Linux/Windows/macOS 多端平台</li>
<li>支持中文和英文两种语言</li>
<li>支持 SSH 隧道 Socks v5，当前开启后默认监听在 localhost:10080</li>
<li>支持会话管理,导入和导出功能等</li>
<li>支持 SSH rz/sz 命令文件上传下载</li>
<li>支持终端主题配置</li>
<li>支持终端日志管理</li>
<li>支持分组分屏展示</li>
<li>支持全屏模式</li>
<li>支持同时发送命令到多个打开的 SSH 会话中</li>
<li>支持会话锁定</li>
<li>支持快捷键操作</li>
<li>支持 Sftp 在线编辑器</li>
<li>支持 lrz/lsz 文件传输</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://tableplus.com/" target="_blank" rel="noopener noreferrer">TablePlus</a></h3>
<p>让数据库管理变得更简单，适用于关系型数据库的现代、原生且友好的可视化管理工具，支持 MySQL、PostgreSQL、SQLite、SQLServer、Redis、mongoDB 等。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/leovan/SciHubEVA" target="_blank" rel="noopener noreferrer">SciHubEVA</a></h3>
<p>一款由 <code>Python</code> 和 <code>Qt</code> 提供支持的跨平台 <code>Sci-Hub GUI</code> 应用程序。想必每个被论文折磨的朋友都不陌生，主需要输入 <code>URL</code>、<code>PMID</code>、<code>DOI</code> 就能下载到绝大部分论文，妥妥地下载论文利器。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://codepen.io/" target="_blank" rel="noopener noreferrer">CodePen</a></h3>
<p>一个前端在线开发工具，能够直接在线实时渲染代码效果。而且可以免费托管前端代码，用于制作和测试页面。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://jsrun.net/" target="_blank" rel="noopener noreferrer">JSRUN</a></h3>
<p>创建于 2016 年，专注于在线代码运行，支持在移动端编写代码的编辑器，支持在线运行 <code>HTML</code>、<code>Node.JS</code>、<code>C</code>、<code>Python</code>、<code>PHP</code>、<code>Java</code>、<code>MySQL</code>、<code>C#</code>、<code>Go</code> 等语言。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://codesandbox.io/" target="_blank" rel="noopener noreferrer">CodeSandbox</a></h3>
<p>一个可以在线运行代码的编辑器，主要用于创建 <code>Web</code> 应用，支持 <code>JavaScript</code>、<code>TypeScript</code>、<code>CSS</code>、<code>Less</code>、<code>Sass</code>、<code>HTML</code> 等多种文件。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://linguix.com/" target="_blank" rel="noopener noreferrer">Linguix</a></h3>
<figure><figcaption></figcaption></figure>
<p>通过 <code>Linguix</code> 多语种语法检查和改写工具来提升您的写作水平并创作引人入胜的内容。其功能包括语法检查、标点符号检查、改写以及 <code>ChatGPT</code> 写作。</p>
<p>提供实时语法检查和改写，以即时提高各大网站上的内容质量。从撰写电子邮件到准备大型文档，解决您的写作任务。生成式人工智能功能和 <code>OpenAI</code>/<code>ChatGPT</code> 集成还可以立即修复错误，让内容变短/长等。</p>
<h3> 2. <a href="https://languagetool.org/" target="_blank" rel="noopener noreferrer">LanguageTool</a></h3>
<figure><figcaption></figcaption></figure>
<p>使用 LanguageTool 的语法检查器和释义工具立即增强您的文本，具有以下特点：</p>
<ul>
<li>无需注册</li>
<li>支持超 25 种语言：英语、西班牙语、法语、德语、波兰语、俄语……</li>
<li>应用范围广，几乎包含所有网站</li>
</ul>
<h3> 3. <a href="https://chromewebstore.google.com/detail/rememberry-%E7%BF%BB%E8%AF%91%E5%92%8C%E8%AE%B0%E4%BD%8F/dipiagiiohfljcicegpgffpbnjmgjcnf" target="_blank" rel="noopener noreferrer">Rememberry</a></h3>
<figure><figcaption></figcaption></figure>
<p>在浏览网页时翻译单词和短语，并使用抽认卡轻松补充属于自己的外语词典，插件具有以下特点：</p>
<ul>
<li>简便但强大的翻译扩展</li>
<li>支持几乎所有语言的翻译和阅读，且同时支持国内外的谷歌翻译</li>
<li>划词即显示翻译结果，简单方便</li>
<li>有道智能翻译</li>
<li>文本翻译为任何语言</li>
<li>单词释义详细精准</li>
<li>……</li>
</ul>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/LjyYano/Thinking_in_Java_MindMapping" target="_blank" rel="noopener noreferrer">Thinking_in_Java_MindMapping</a></h3>
<p>一个包含了博主的编程笔记、观影指南、读书笔记、生活感悟、Switch 游戏等内容的仓库。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/dunwu/javacore" target="_blank" rel="noopener noreferrer">JavaCore</a></h3>
<p>一个 Java 核心技术教程，包含以下方面内容：</p>
<ul>
<li>Java 基础特性</li>
<li>Java 高级特性</li>
<li>Java 容器</li>
<li>Java IO</li>
<li>Java 并发</li>
<li>Java 虚拟机</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/polaris1119/golangweekly" target="_blank" rel="noopener noreferrer">Go 语言爱好者周刊</a></h3>
<p>随着 Go 受到越来越多的关注，相关的文章、软件、资源也越来越多。Go 语言爱好者周刊旨在为大家分享一周值得了解、学习的 Go 语言相关内容。每周日发布。</p>
<p>周刊自 2019 年开始发布，截止目前已经持续到了 198 期。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T07:41:05.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#21：前端学习资料</title>
    <id>https://cunyu1943.github.io/weekly/2023/0902-0908.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0902-0908.html"/>
    <updated>2023-09-19T02:38:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#21：前端学习资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/p-tN_OM8nbh6IbjF5d6nyw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/p-tN_OM8nbh6IbjF5d6nyw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#21：前端学习资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/p-tN_OM8nbh6IbjF5d6nyw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/p-tN_OM8nbh6IbjF5d6nyw</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/Nepxion/Discovery" target="_blank" rel="noopener noreferrer">Discovery</a></h3>
<p>云原生微服务解决方案，支持蓝绿灰度发布、路由、限流、熔断、降级、隔离、追踪、流量染色、故障转移、多活。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://gitee.com/oschina/tide" target="_blank" rel="noopener noreferrer">Tide</a></h3>
<p>开箱即用、扩展性强、支持 <code>Markdown</code> 语法、基础功能完善的 <code>React</code> 富文本编辑器。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://gitee.com/tamlok/vnote" target="_blank" rel="noopener noreferrer">VNote</a></h3>
<p>一个专注于 <code>Markdown</code> 的基于 <code>Qt</code> 的开源免费的笔记应用，愿景是希望能提供一个拥有完美编辑体验的舒适的笔记平台。支持 <code>macOS</code>、<code>Windows</code>、<code>Linux</code> 三大平台。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/Tatsu-syo/noMeiryoUI" target="_blank" rel="noopener noreferrer">noMeiryoUI</a></h3>
<p>Windows 系统字体修改工具，支持 Windows 8/8.1/10/11 系统的的字体修改，软件只是对主题字体风格设置进行修改，而不是对系统字体本身的渲染、修改，所以无风险，无占用，渲染美化系统字体风格。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://tabby.sh/" target="_blank" rel="noopener noreferrer">Tabby</a></h3>
<p>一个可高度配置的终端模拟器和 SSH 或串口客户端，支持 Windows，macOS 和 Linux，支持如下功能：</p>
<ul>
<li>集成 SSH，Telnet 客户端和连接管理器</li>
<li>集成串行终端</li>
<li>定制主题和配色方案</li>
<li>完全可配置的快捷键和多键快捷键</li>
<li>分体式窗格</li>
<li>自动保存标签页</li>
<li>支持 PowerShell（和 PS Core）、WSL、Git-Bash、Cygwin、MSYS2、Cmder 和 CMD</li>
<li>在 SSH 会话中通过 Zmodem 进行直接文件传输</li>
<li>完整的 Unicode 支持，包括双角字符</li>
<li>不会因快速的输出而卡住</li>
<li>Windows 上舒适的 shell 体验，包括 tab 自动补全（通过 Clink）</li>
<li>为 SSH secrets 和设置集成了加密容器</li>
<li>SSH、SFTP 和 Telnet 客户端可用作 Web 应用（也可托管）</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener noreferrer">PicGo</a></h3>
<p>一个用于快速上传图片并获取图片 URL 链接的工具，目前支持如下图床：</p>
<ul>
<li>七牛图床</li>
<li>腾讯云 COS</li>
<li>又拍云</li>
<li>Github</li>
<li><a href="http://SM.MS" target="_blank" rel="noopener noreferrer">SM.MS</a></li>
<li>阿里云 OSS</li>
<li>Imgur</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="https://www.wappalyzer.com/" target="_blank" rel="noopener noreferrer">Wappalyzer</a></h3>
<p>一个跨平台程序，能够发现网站上使用的技术。检测网站的内容管理系统、Web 框架、服务器软件、分析工具等等。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.photopea.com/" target="_blank" rel="noopener noreferrer">Photopea</a></h3>
<p>一个在线版的 PhotoShop，支持 PSD、AI、XD、sketch、PDF、XCF、RAW 等多种图片格式。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://passer-by.com/relationship/" target="_blank" rel="noopener noreferrer">中国亲戚关系计算器</a></h3>
<p>逢年过节遇到三姑六婆，拒绝叫不出口的尴尬！轻松搞定亲戚关系。当前亲戚称呼大全已收录约 <strong>76602</strong> 条亲戚关系。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://www.youtube-dubbing.com/" target="_blank" rel="noopener noreferrer">YouTube Dubbing</a></h3>
<p>一个帮你把外语视频变成中文视频的神奇插件，具有如下特点：</p>
<ul>
<li><strong>中文优化</strong></li>
<li><strong>多语种支持</strong></li>
<li><strong>更自然的声音</strong></li>
<li><strong>多种语音风格</strong></li>
<li><strong>多平台支持</strong></li>
<li><strong>视频下载</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://microsoftedge.microsoft.com/addons/detail/pt-plugin-plus/ekhingnlcjebipkdcgkkheigmljefepn" target="_blank" rel="noopener noreferrer">PT Plugin Plus</a></h3>
<p>一款浏览器插件，主要用于辅助下载 <code>PT</code> 站的种子。适用于各 <code>PT</code> 站，可使下载种子等各项操作变化更简单、快捷。配合下载服务器（如 <code>Transmission</code>、<code>µTorrent</code> 等），可一键下载指定的种子。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://chrome.google.com/webstore/detail/%E7%BD%91%E8%AF%BE%E5%B0%8F%E5%B7%A5%E5%85%B7/kkicgcijebblepmephnfganiiochecfl?hl=zh-CN" target="_blank" rel="noopener noreferrer">网课小工具</a></h3>
<p>一个超星(学习通)/智慧树(知到)/中国大学 <code>mooc</code> 学习工具。支持火狐、谷歌油猴。全自动完成任务，视频倍速秒过，作业考试题库，验证码自动打码。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/hehonghui/awesome-english-ebooks" target="_blank" rel="noopener noreferrer">awesome-english-ebooks</a></h3>
<p>经济学人(含音频)、纽约客、卫报、连线、大西洋月刊等英语杂志免费下载,支持 epub、mobi、pdf 格式, 每周更新。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/chodocs/chodocs" target="_blank" rel="noopener noreferrer">ChoDocs</a></h3>
<p>一站式前端内容网站，包括学习路线、知识体系。用专栏形式更新，主要包含以下方面内容：</p>
<ul>
<li>面试专栏</li>
<li>编程学习</li>
<li>前端算法</li>
<li>备忘录</li>
<li>学习圈子</li>
<li>编程工具</li>
<li>技术视野</li>
<li>拥抱开源</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener noreferrer">Web</a></h3>
<p>千古前端图文教程，超详细的前端入门到进阶知识库。从零开始学前端，做一名精致优雅的前端工程师。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T07:41:05.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#22：代码阅读辅助工具</title>
    <id>https://cunyu1943.github.io/weekly/2023/0909-0915.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0909-0915.html"/>
    <updated>2023-09-19T02:38:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#22：代码阅读辅助工具</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/nxRy7y81YYbQwbvdWCVB_w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/nxRy7y81YYbQwbvdWCVB_w</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#22：代码阅读辅助工具</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/nxRy7y81YYbQwbvdWCVB_w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/nxRy7y81YYbQwbvdWCVB_w</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/rocboss/paopao-ce" target="_blank" rel="noopener noreferrer">PaoPao</a></h3>
<p>一个清新文艺的微社区。后端采用 <code>Go</code> + <code>Zinc</code> 框架搭建，前端则由 <code>Vue3</code> + <code>TS</code> 构建，整体布局类似 <code>Twitter</code> 的三栏设计。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/documenso/documenso" target="_blank" rel="noopener noreferrer">documenso</a></h3>
<p>一个电子签名、在线签约 <code>SaaS</code> 工具，可以当做 <code>DocuSign</code> 的开源替代方案。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/songquanpeng/one-api" target="_blank" rel="noopener noreferrer">One API</a></h3>
<p><code>OpenAI</code> 接口管理 &amp; 分发系统，支持 <code>Azure</code>、<code>Anthropic Claude</code>、<code>Google PaLM 2</code>、智谱 <code>ChatGLM</code>、百度文心一言、讯飞星火认知、阿里通义千问以及 360 智脑，可用于二次分发管理 <code>key</code>，仅单可执行文件，已打包好 <code>Docker</code> 镜像，一键部署，开箱即用</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="https://github.com/mylxsw/aidea-server" target="_blank" rel="noopener noreferrer">AIdea</a></h3>
<p>一款支持 GPT 以及国产大语言模型通义千问、文心一言等，支持 Stable Diffusion 文生图、图生图、 SDXL1.0、超分辨率、图片上色的全能型 APP。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.edrawsoft.cn/mindmaster/wb-zhihu.html" target="_blank" rel="noopener noreferrer">MindMaster</a></h3>
<p>专业思维导图软件，云同步跨平台、海量脑图模板、功能全易上手。</p>
<p>使用软件可以将纷繁复杂的想法、知识和信息，如学习笔记、会议纪要、项目需求等简化成一张张清晰的思维导图，以结构化有序化的方式呈现，提高归纳、学习和记忆的效率，方便展示和讲解。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://codemap.info/index.html" target="_blank" rel="noopener noreferrer">Codemap</a></h3>
<p>一款辅助阅读源代码的工具，通过连线展示代码调用关系、高亮、备注、代码量统计、等一系列功能、方法帮助用户理解代码，解析软件项目结构。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="http://ppchart.com/#/" target="_blank" rel="noopener noreferrer">PPChart</a></h3>
<p>让图表更简单。PPChart 提供 Echarts 收录、图表制作等服务。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://madeapie.com/#/" target="_blank" rel="noopener noreferrer">Made A Pie</a></h3>
<p>Echarts 图表制作、案例分享、教程分享。汇聚了超多 Echarts 绘制案例，主要有以下类别：</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.isqqw.com/" target="_blank" rel="noopener noreferrer">ISQQW</a></h3>
<p>一个 ECharts 图表集，ECharts demo 集，Echarts gallery 社区。同时，在这里还可以分享你的可视化作品。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://chrome.google.com/webstore/detail/content-farm-terminator/lcghoajegeldpfkfaejegfobkapnemjl" target="_blank" rel="noopener noreferrer">终结农场内容</a></h3>
<p>标示内容农场链接，防止误入内容农场，并封锁内容农场的广告与恶意程序，插件提供如下功能：</p>
<ul>
<li>自动侦测前往内容农场的连结并加以标示，让你在第一时间避开内容农场，同时免于将点击数回馈给搜寻引擎。</li>
<li>在即将进入内容农场时予以封锁，让你能及时离开。</li>
<li>若真的很想看一下被封锁的页面，可点击「检视」浏览去除广告与程式码的网页内容，如此既能满足好奇心又能封锁内容农场的收益。</li>
<li>可自订黑名单、白名单、灰名单，也能订阅网路黑名单。</li>
<li>可透过右键选单将网页、超连结、或选取文字对应的网域快速加入黑名单。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://chrome.google.com/webstore/detail/csdn%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A9%E6%89%8B/kfkdboecolemdjodhmhmcibjocfopejo?hl=zh-CN" target="_blank" rel="noopener noreferrer">CSDN 浏览器助手</a></h3>
<p>一款集成本地书签、历史记录与 <code>CSDN</code> 搜索的搜索工具。由 <code>CSDN</code> 官方打造，集成一键呼出搜索、万能快捷工具、个性化标签页和底层免广告四大核心功能。让您在工作学习场景中，告别繁琐复杂的切换，快速解决问题，打造专属你的效率神器！</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://chromewebstore.google.com/detail/%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="noopener noreferrer">稀土掘金</a></h3>
<p>为程序员、设计师、产品经理每日发现优质内容。</p>
<p>在新标签页展示聚合内容，包含前端、<code>Android</code>、<code>iOS</code>、后端、产品、设计六大频道，每个频道内都有一到多个内容源。此外，插件提供综合搜索及开发辅助小工具等能力为开发者的工作提效，浏览器激活状态下双击"j"键可快速唤起搜索框。用户可以根据自己的需求和喜好自定义页面布局、切换日间/深色模式。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/byoungd/English-level-up-tips" target="_blank" rel="noopener noreferrer">English-level-up-tips</a></h3>
<p>可能是让你受益匪浅的英语进阶指南，项目具有以下特点：</p>
<ul>
<li>结构化</li>
<li>阶段化</li>
<li>针对化</li>
<li>实用性高</li>
<li>操作性强</li>
<li>低成本</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/wangtunan/blog" target="_blank" rel="noopener noreferrer">汪图南的个人博客</a></h3>
<p>专注写作前端博客，记录日常所得。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/Jstarfish/JavaKeeper" target="_blank" rel="noopener noreferrer">JavaKeeper</a></h3>
<p><code>Java</code> 工程师必备架构体系知识总结：涵盖分布式、微服务、<code>RPC</code> 等互联网公司常用架构，以及数据存储、缓存、搜索等必备技能。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T07:41:05.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#23：Win 12 来了！</title>
    <id>https://cunyu1943.github.io/weekly/2023/0916-0922.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0916-0922.html"/>
    <updated>2023-09-22T00:21:32.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#23：Win 12 来了！</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/gbYeoZNICI0TogjrBEBdQA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/gbYeoZNICI0TogjrBEBdQA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#23：Win 12 来了！</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/gbYeoZNICI0TogjrBEBdQA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/gbYeoZNICI0TogjrBEBdQA</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1. <a href="https://github.com/pnpm/pnpm" target="_blank" rel="noopener noreferrer">pnpm</a></h3>
<p>快速的，节省磁盘空间的包管理工具，具有如下特点：</p>
<ul>
<li>快速：<code>pnpm</code> 比其他包管理器快 2 倍</li>
<li>高效：<code>node_modules</code> 中的文件为复制或链接自特定的内容寻址存储库</li>
<li>支持 <code>monorepos</code>：<code>pnpm</code> 内置支持单仓多包</li>
<li>严格：<code>pnpm</code> 默认创建了一个非平铺的 <code>node_modules</code>，因此代码无法访问任意包</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/chaitin/SafeLine" target="_blank" rel="noopener noreferrer">雷池</a></h3>
<p>一款足够简单、足够好用、足够强的免费 <code>WAF</code>。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。</p>
<p>核心检测能力由智能语义分析算法驱动，专为社区而生，不让黑客越雷池半步。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/tjy-gitnub/win12" target="_blank" rel="noopener noreferrer">win12</a></h3>
<p>开发者看到 <code>Windows 12</code> 概念版后深受启发，决定做一个 <code>Windows12</code> 网页版。最重要的是，几个开发者还是初中生！</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1. <a href="http://adkiller.360drm.com/index.html" target="_blank" rel="noopener noreferrer">弹窗广告拦截器</a></h3>
<p>弹窗广告拦截器是一款完全免费的弹窗广告拦截软件,智能屏蔽各种弹窗广告！</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://cmder.app/" target="_blank" rel="noopener noreferrer">Cmder</a></h3>
<p><code>Windows</code> 平台下美观又强劲的一款利器，为 <code>CMD</code> / <code>PowerShell</code> 提供绝佳用户体验。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.xshell.com/zh/xshell/" target="_blank" rel="noopener noreferrer">XShell</a></h3>
<p>非常优秀的终端软件，连接服务器必备，自称业界最强大的 <code>SHH</code> 客户机。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1. <a href="http://hepengwei.cn/#/html/visualDesign" target="_blank" rel="noopener noreferrer">视觉效果集合</a></h3>
<p>一个专注于前端视觉效果的集合应用，里面包含各种丰富的 <code>css</code> 动效、<code>canvas</code> 动画等上百个案例，而且是开源免费的。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://www.filehorse.com/" target="_blank" rel="noopener noreferrer">FileHorse</a></h3>
<p>提供了大量软件的下载和介绍，包括 <code>Windows</code> 和 <code>macOS</code> 平台。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://www.producthunt.com/" target="_blank" rel="noopener noreferrer">Product Hunt</a></h3>
<p>推荐每天新兴的移动应用程序、网站和技术产品等。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1. <a href="https://chromewebstore.google.com/detail/laookkfknpbbblfpciffpaejjkokdgca" target="_blank" rel="noopener noreferrer">Momentum</a></h3>
<p>将新标签页替换为个人仪表板，以帮助您集中注意力、保持井井有条并保持动力来实现您的目标。</p>
<p>页面包含待办事项列表、天气、每日照片和鼓舞人心的名言。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://chromewebstore.google.com/detail/adblock-plus-%E5%85%8D%E8%B4%B9%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener noreferrer">Adblock Plus</a></h3>
<p>阻止 <code>YouTube™</code> 广告、弹出窗口并抵御恶意软件！</p>
<p>享受没有恼人广告的网络世界，插件会屏蔽以下内容</p>
<ul>
<li>横幅</li>
<li><code>YouTube</code> 视频广告</li>
<li><code>Facebook</code> 广告</li>
<li>弹出窗口</li>
<li>所有其他显眼的广告</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://chromewebstore.google.com/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd" target="_blank" rel="noopener noreferrer">LastPass</a></h3>
<p>全球知名在线密码管理工具之一，采用军事级加密算法，支持自动填充网站用户名和密码，与朋友分享登录信息等实用功能，且在全平台同步免费，无需订阅即可在手机、网页、电脑多端同步信息。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1. <a href="https://github.com/Charles7c/charles7c.github.io" target="_blank" rel="noopener noreferrer">查尔斯的知识库</a></h3>
<p>基于 <code>VitePress</code> 构建的个人知识库/博客。查尔斯的个人技术知识库，记录 &amp; 分享个人碎片化、结构化、体系化的技术知识内容。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. <a href="https://github.com/jaywcjlove/linux-command" target="_blank" rel="noopener noreferrer">Linux Command</a></h3>
<p><code>Linux</code> 命令大全搜索工具，内容包含 <code>Linux</code> 命令手册、详解、学习。目前仓库搜集了 580 多个 <code>Linux</code> 命令，是一个非盈利性的仓库。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. <a href="https://github.com/SYaoJun/CPPInterview" target="_blank" rel="noopener noreferrer">CPPInterview</a></h3>
<p>C/C++ 高频面试题合集，包含面试篇、笔试篇、书单、课程、刷题网站、面试问题六大模块。既有面试时需要掌握的基础知识和行业知识，也有笔试时遇到的高频算法类型和笔试技巧。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">电子书</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">电子书（国内）</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T07:41:05.000Z</published>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://cunyu1943.github.io/frontmatter.html</id>
    <link href="https://cunyu1943.github.io/frontmatter.html"/>
    <updated>2023-09-27T11:03:03.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JavaPark(Java 自学指南)</title>
    <id>https://cunyu1943.github.io/home.html</id>
    <link href="https://cunyu1943.github.io/home.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JavaPark(Java 自学指南)</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> JavaPark(Java 自学指南)</h1>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">想学好 Java 基础，应该去哪儿刷题</title>
    <id>https://cunyu1943.github.io/QA/20230402-where-exercise-java-basics.html</id>
    <link href="https://cunyu1943.github.io/QA/20230402-where-exercise-java-basics.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 想学好 Java 基础，应该去哪儿刷题</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。</p>
<p>既然已经对 <code>Java</code> 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 Java 基础的同时锻炼自己的编程思想，提高自己的编程能力！</p>]]></summary>
    <content type="html"><![CDATA[<h1> 想学好 Java 基础，应该去哪儿刷题</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。</p>
<p>既然已经对 <code>Java</code> 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 Java 基础的同时锻炼自己的编程思想，提高自己的编程能力！</p>
<h2> 二、网站</h2>
<h3> 1、牛客网</h3>
<ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a></li>
</ul>
<p>说白了，我们学习 <code>Java</code>，最终目的不都是为了找一个好点的工作么。既然如此，那就一开始和招聘挂钩吧。在这里推荐几个题库，用于锻炼自己 <code>Java</code> 基础。</p>
<ul>
<li><a href="https://www.nowcoder.com/exam/intelligent?questionJobId=10&amp;tagId=21003" target="_blank" rel="noopener noreferrer">牛客网专项练习</a></li>
</ul>
<p>专项练习下的编程语言专栏中的 <code>Java</code> 选项，是巩固自己所学 <code>Java</code> 基础知识的绝佳练习。题目均以选择题的形式给出，可以对自己所学查漏补缺。遇到不会的题目，也可以查看官方给出的答案或者大家在评论区给出的解析。</p>
<p>除了 <code>Java</code> 基础之外，作为一个 <code>CRUD</code> 打工人，对于数据库的操作怎么能不熟练呢？同样的，牛客提供了针对不同的需求，给出了不同级别的练习题。</p>
<ol>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199" target="_blank" rel="noopener noreferrer"><strong>针对非技术小白入门</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=341" target="_blank" rel="noopener noreferrer"><strong>SQL 基础进阶</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=240" target="_blank" rel="noopener noreferrer"><strong>SQL 进阶挑战</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=298" target="_blank" rel="noopener noreferrer"><strong>MySQL 必知必会</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=268" target="_blank" rel="noopener noreferrer"><strong>大厂面试实战</strong></a></p>
</li>
</ol>
<p>除了以上针对 <code>Java</code> 基础以及 <code>SQL</code> 的相关练习之外，还是以过来人的身份建议楼主不要仅局限于语言本身，还是要学一些数据结构 + 算法方面的知识的，这样能帮你在工作中提高不少的效率。同时，设想一下，假设在面试时，一个同样的算法题，你实现的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，而其他人实现的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，那你觉得最终企业会招谁呢？</p>
<p>算法练习的网站也比较多了，这里就推荐几个最常用的。</p>
<h3> 2、LeetCode</h3>
<ul>
<li><a href="https://leetcode.cn/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreferrer">LeetCode 美国站</a></li>
</ul>
<p>首先推荐的是 <code>LeetCode</code> 美国站。当然，这需要你的英语基础比较好，如果你觉得你的英语还不错，那么优先推荐去这里。如果你英语不是那么好，那也没关系。<code>LeetCode</code> 也做了本土化，提供了中文站，你同样可以在这里刷题。</p>
<ul>
<li><a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">LeetCode 中国站</a></li>
</ul>
<h3> 3、牛客网</h3>
<p>没错，又是它。现在国内有很多企业都是在牛客笔试的，为了尽快适应招聘面试，推荐在这里刷算法题，这样在笔试时也不会因为环境而感到陌生，尽快上手。</p>
<p>这里推荐几个题库，如果题库里的题目刷起来得心应手，那笔试还有啥怕的~~</p>
<ol>
<li>
<p><a href="https://www.nowcoder.com/exam/oj/ta?tpId=13" target="_blank" rel="noopener noreferrer"><strong>剑指 Offer</strong></a>：剖析了 80 个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这 5 个面试要点。</p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=%E5%90%8D%E4%BC%81%E7%9C%9F%E9%A2%98&amp;topicId=182" target="_blank" rel="noopener noreferrer"><strong>名企真题</strong></a>：汇聚了字节跳动、美团、百度、腾讯、华为、京东、小米、网易、快手等一众大厂笔试真题，虽然笔试时刷到原题的概率较小，但摸索下大厂的出题的套路和设计的知识点也未尝不可！</p>
</li>
</ol>
<p>除了以上两个题库，也可以去 <code>LeetCode</code> 刷下《剑指 Offer》后续版本的题目。</p>
<ul>
<li><a href="https://leetcode.cn/problemset/all/?page=1&amp;listId=e8X3pBZi" target="_blank" rel="noopener noreferrer">《剑指 Offer（专线突击版）》</a></li>
<li><a href="https://leetcode.cn/problemset/all/?page=1&amp;listId=xb9nqhhg" target="_blank" rel="noopener noreferrer">《剑指 Offer（第 2 版）》</a></li>
</ul>
<h3> 4、赛码网</h3>
<ul>
<li><a href="https://www.acmcoder.com/#/home" target="_blank" rel="noopener noreferrer">赛码网</a></li>
</ul>
<p>智能在线考试专家，除开牛客之外，也有不少企业在这里进行招聘笔试，比如阿里、京东、头条、美团、滴滴、小米等公司校招考试都在用。</p>
<h2> 三、最后</h2>
<p>推荐仅限于推荐，最重要的还是要行动起来。就算一开始很吃力，那也要坚持！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="你问我答"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">你问我答</title>
    <id>https://cunyu1943.github.io/QA/</id>
    <link href="https://cunyu1943.github.io/QA/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">创刊寄语</title>
    <id>https://cunyu1943.github.io/weekly/</id>
    <link href="https://cunyu1943.github.io/weekly/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 创刊寄语</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下：</p>
<ul>
<li><a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">博客</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">博客(国内)</a></li>
<li><a href="https://github.com/cunyu1943/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></li>
<li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>：移动端推荐</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 创刊寄语</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下：</p>
<ul>
<li><a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">博客</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">博客(国内)</a></li>
<li><a href="https://github.com/cunyu1943/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></li>
<li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>：移动端推荐</li>
</ul>
<p>如果你想推荐或自荐项目/网站/软件/插件/资料等任何资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong><a href="/contact/wechat.png">个人微信：cunyu1943</a></strong> 和我交流。</p>

<h2> 二、介绍</h2>
<p>互联网时代，各种信息层出不穷。而从众多信息中过滤出需要的，并将这些信息聚合起来就是一项十分重要的技能。</p>
<p>作为一名程序员，每天在网上冲浪时经常会浏览到各种好玩的项目、资源、软件以及资源等。而久而久之，一些好的资源渐渐就淹没在信息流中了，后来想再去找也不知道该去哪儿查。</p>
<p>针对这个问题，给我个人感觉非常不好，不知道你是否也会有这样的感觉呢？于是 <strong>好物周刊</strong> 诞生了，周刊于我而言既是一种留存，也是一种分享，希望我能一直坚持下去，欢迎大家监督。</p>
<p>如果大家感兴趣，请持续关注我的的周刊专栏<a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a>，也请移步<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> 给我一个<code>Star</code>支持下吧。</p>
<p>好物周刊开始于 <strong>2023.04.15</strong>，如果看到这篇文章时我依旧在坚持更新，那就是最好的消息。</p>
<h2> 三、交流</h2>
<p>欢迎关注<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>|<a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">博客</a>一起交流（每周在公众号首发）：</p>

<h2> 四、赞助</h2>
<p>开源不易，如果你觉得本仓库对你有帮助，或许可以请我喝杯咖啡，不靠它生存但仍希望得到你的鼓励。</p>
<figure><img src="/award/donate.svg" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 五、贡献</h2>
<ol>
<li>
<p>如果您对本项目有任何建议或者发现文中内容有错误的，欢迎私信我或者提交 <a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer"><code>issues</code></a> 指正。</p>
</li>
<li>
<p>对于项目中未涉及到的知识点，欢迎提交 <code>PR</code>。</p>
</li>
</ol>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门简介</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220701-intro-to-java.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220701-intro-to-java.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
</div>
<h2> 一、前言</h2>
<p>既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。</p>
<h2> 二、历史背景</h2>
<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>
<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>
<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 <code>Java</code> 之父。</p>
<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>
<p>以下是截止到本文写作时间（2022 年 7 月 23 日）<code>Java</code> 的历史年表，累计经过了 18 次主要版本更新，目前来到了 <code>Java SE</code> 18。而 <code>Java SE</code> 19 早期预览版也已经流出，根据官方给出的发布时间表，大概会在 9 月份发布 <code>Java SE</code> 19 的 <code>GA</code> 版本。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 Java 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 <code>Java</code> 1.8 还占有如此高的市场比例。</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">发布日期</th>
<th style="text-align:center">主要事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JDK Beta</td>
<td style="text-align:center">1995</td>
<td style="text-align:center"><code>Java</code> 语言发布，用 <code>Java</code> 实现的浏览器和 <code>Java Applet</code> 被大量应用</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.0</td>
<td style="text-align:center">1996 年 1 月</td>
<td style="text-align:center">奠定了 <code>JDK</code>、<code>JRE</code>、<code>JVM</code> 的体系结构</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.1</td>
<td style="text-align:center">1997 年 2 月</td>
<td style="text-align:center">加入 <code>JIT</code>，提升 <code>JDK</code> 效率</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.2</td>
<td style="text-align:center">1998 年 12 月</td>
<td style="text-align:center">确立 <code>J2SE</code>、<code>J2EE</code>、<code>J2ME</code> 产品结构</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.3</td>
<td style="text-align:center">2000 年 5 月</td>
<td style="text-align:center">内置 HotSpot JVM</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.4</td>
<td style="text-align:center">2002 年 2 月</td>
<td style="text-align:center">XML 处理、断言、支持正则表达式</td>
</tr>
<tr>
<td style="text-align:center">J2SE 5.0</td>
<td style="text-align:center">2004 年 9 月</td>
<td style="text-align:center">静态导入、泛型、for-each 循环、自动拆，装箱、枚举、可变参数</td>
</tr>
<tr>
<td style="text-align:center">Java SE 6</td>
<td style="text-align:center">2006 年 12 月</td>
<td style="text-align:center">提供动态语言支持、同步垃圾回收</td>
</tr>
<tr>
<td style="text-align:center">Java SE 7</td>
<td style="text-align:center">2011 年 7 月</td>
<td style="text-align:center">字符串的 switch 语句、多异常捕抓</td>
</tr>
<tr>
<td style="text-align:center">Java SE 8 (LTS)</td>
<td style="text-align:center">2014 年 3 月</td>
<td style="text-align:center">Lambda 表达式</td>
</tr>
<tr>
<td style="text-align:center">Java SE 9</td>
<td style="text-align:center">2017 年 9 月</td>
<td style="text-align:center">轻量级 json API、垃圾收集机制更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 10</td>
<td style="text-align:center">2018 年 3 月</td>
<td style="text-align:center">局部变量类型推断，Java 后续版本快速迭代更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 11 (LTS)</td>
<td style="text-align:center">2018 年 9 月</td>
<td style="text-align:center">常用类增强，Java 11 是继 Java 8 之后的首个长期支持本版</td>
</tr>
<tr>
<td style="text-align:center">Java SE 12</td>
<td style="text-align:center">2019 年 3 月</td>
<td style="text-align:center">switch 表达式增强</td>
</tr>
<tr>
<td style="text-align:center">Java SE 13</td>
<td style="text-align:center">2019 年 9 月</td>
<td style="text-align:center">文本块支持</td>
</tr>
<tr>
<td style="text-align:center">Java SE 14</td>
<td style="text-align:center">2020 年 3 月</td>
<td style="text-align:center"><code>instanceof</code> 支持模式匹配</td>
</tr>
<tr>
<td style="text-align:center">Java SE 15</td>
<td style="text-align:center">2020 年 9 月</td>
<td style="text-align:center"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>
</tr>
<tr>
<td style="text-align:center">Java SE 16</td>
<td style="text-align:center">2021 年 3 月</td>
<td style="text-align:center">启用 C++ 14 语言特性、Vector API</td>
</tr>
<tr>
<td style="text-align:center"><strong>Java SE 17 (LTS)</strong></td>
<td style="text-align:center">2021 年 9 月</td>
<td style="text-align:center">恢复总是严格的浮点语义、增强型伪随机数生成器</td>
</tr>
<tr>
<td style="text-align:center">Java SE 18</td>
<td style="text-align:center">2022 年 3 月</td>
<td style="text-align:center">默认 UTF-8 编码、代码片段、简单的网络服务器</td>
</tr>
</tbody>
</table>
<h2> 三、为什么使用 Java</h2>
<p>既然编程语言有那么多，那我们为什么要使用 Java 语言呢？以下就来看看 Java 被广泛使用的几个原因。</p>
<ol>
<li><strong>世界范围内流行，国内使用最为广泛的编程语言之一。</strong></li>
</ol>
<p>以下是截止 2022 年 7 月 TIOBE 统计的编程语言排行榜，可以看到 Java 处于前三的位置。而从历年编程语言所占市场份额趋势图也可以看出，Java 虽然没有一直独占鳌头，但绝大数时间都是占据领先地位。</p>
<p><br>
</p>
<ol start="2">
<li><strong>移植性高</strong></li>
</ol>
<p>由于 Java 中 JVM 的特性，所以能够做到一次编译，随处运行，其移植性也就更高。</p>
<ol start="3">
<li><strong>开发社区完善</strong></li>
</ol>
<p>社区完善也是 Java 为什么使用多的原因，各种封装 API，比起 C、C++ 语言使用起来更加方便。虽然 <code>Python</code> 的封装程度更高，但是其效率比起 <code>Java</code> 却打了折扣。毕竟封装程度和效率是成反比的，<code>Java</code> 兼具了效率高和使用方便的特点，所以更受人们青睐。</p>
<h2> 四、Java 能做什么</h2>
<p>Java 应用广泛，在我们日常中就能经常见到由 Java 所开发的程序。常见的的应用应用领域如下：</p>
<ol>
<li><strong>桌面 GUI 应用开发</strong></li>
<li><strong>服务器系统</strong></li>
<li><strong>企业级应用开发</strong></li>
<li><strong>大数据开发</strong></li>
<li><strong>移动应用开发</strong></li>
<li><strong>游戏开发</strong></li>
<li>……</li>
</ol>
<h2> 五、Java 技术体系</h2>
<p>根据传统意义上 Sun 官方定义， Java 技术体系的组成主要就是我们常说的 JDK，即以下三部分：</p>
<ol>
<li><strong>Java 程序设计语言</strong></li>
<li><strong>Java 虚拟机</strong></li>
<li><strong>Java API 类库</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<p>同时，Java 技术体系又可以主要分为以下 3 个平台。</p>
<ol>
<li><strong>Java SE</strong></li>
</ol>
<p>Java Standard Edition，即 Java 标准版。主要是 Java 技术的核心和基础，要想学好 Java，那么首先你得掌握好这部分。主要运行在桌面级应用，如 Windows 应用程序。</p>
<ol start="2">
<li><strong>Java EE</strong></li>
</ol>
<p>Java Enterprise Editon，即 Java 企业版。从它的名字就不难看出，这是 Java 针对企业级应用开发所提供的一套解决方案，主要用于架设高性能企业网站。</p>
<ol start="3">
<li><strong>Java ME</strong></li>
</ol>
<p>Java Micro Edition，即 Java 小型版。主要是 Java 针对移动设备应用所提供的一套解决方案，主要运行在手机、pad 等移动端。</p>
<figure><figcaption></figcaption></figure>
<h2> 六、总结</h2>
<p>本文主要从 Java 历史背景、选择 Java 的理由、Java 能做什么、Java 技术体系等 4 方面对 Java 语言做了一个简单介绍。接下来的文章我们就来看看，如何搭建 Java 的开发环境以及实现一个简单的入门程序。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JDK 安装及入门实例</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220702-jdk-install-and-hello-world.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220702-jdk-install-and-hello-world.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> JDK 安装及入门实例</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> JDK 安装及入门实例</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
</div>
<h2> 一、前言</h2>
<p>作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。</p>
<h2> 二、下载并安装 JDK</h2>
<p>什么是 JDK 呢？JDK（Java Development Kit）即 Java 开发者工具包，使我们学习 Java 语言必须安装的一个工具。</p>
<p>这里主要以 Windows 和 macOS 系统中 JDK 的安装为例，一来因为考虑到大家用的最多的还是 Windows 和 macOS 系统，二来则是因为手边没有安装 Linux 图形化系统。如果恰好你使用的是 Linux 系统，那么推荐你参考一下其他的资料，同样你也可以参考我的另一篇文章：<a href="https://cunyu1943.blog.csdn.net/article/details/105648148" target="_blank" rel="noopener noreferrer">手把手带你玩转 Ubuntu</a>。</p>
<h3> 1. Windows</h3>
<h4> 1.1 安装</h4>
<ol>
<li>首先进入 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 1.2 配置 JDK</h4>
<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>
<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>
<ol>
<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\bin</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>
</ol>
<h4> 1.3 验证 JDK</h4>
<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 2. macOS</h3>
<h4> 2.1 安装</h4>
<ol>
<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>接受相关协议并登录下载；</p>
</li>
<li>
<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>安装过程中会让你输入密码，也就是你本机的密码。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>安装成功；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 2.2 验证</h4>
<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>
<ol>
<li>查看 JDK 版本；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>编译命令；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>运行命令；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> 3. 安装目录详解</h3>
<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bin</code></td>
<td>用于存放各种工具命令，比如我们最常用额 <code>javac</code>、<code>java</code> 等</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>存放工具的一些补充 <code>jar</code> 包</td>
</tr>
<tr>
<td><code>conf</code></td>
<td>存放相关配置文件</td>
</tr>
<tr>
<td><code>include</code></td>
<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>
</tr>
<tr>
<td><code>legal</code></td>
<td>存放各模块的授权文件</td>
</tr>
<tr>
<td><code>jmods</code></td>
<td>存放各种模块</td>
</tr>
</tbody>
</table>
<h2> 三、你的第一个 Java 程序：HelloWorld</h2>
<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了。</p>
<p>要开发一个 Java 程序，主要分成 3 个步骤：</p>
<ol>
<li><strong>编写代码</strong></li>
<li><strong>编译代码</strong></li>
<li><strong>运行代码</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<p>我们不需要任何的基础，只需要按照上面的步骤配置好 JDK 之后，然后以上三个步骤逐一来进行就可以了。下面就来进行具体实践：</p>
<ol>
<li>打开编辑器（推荐 <code>VS Code</code>），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>，这里文件名一定要是 <code>Main</code>，文件后缀名为 <code>.java</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 四、知识点说明</h2>
<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的程序代码如上：</p>
<ul>
<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>
<li><code>class</code>：Java 关键字，表示这是一个类；</li>
<li><code>Main</code>： 表示我们的类名，在保存时文件一定要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>
<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>
<li><code>System.out.println("Hello World!")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>""</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看。</li>
</ul>
<h2> 五、总结</h2>
<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，具体过程可以总结如下：</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>验证</li>
</ul>
<p>然后编写了我们的第一个 <code>Hello World</code> 程序，并利用安装好的的 JDK 对其进行编译和运行。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">利用 IDEA 进行 Java 开发</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220703-learn-java-with-idea.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220703-learn-java-with-idea.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 利用 IDEA 进行 Java 开发</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 利用 IDEA 进行 Java 开发</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
</div>
<h2> 一、前言</h2>
<p>上一篇中，我们讲了 <a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">如何搭建 Java 开发环境</a>。不过既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧里的神兵利器，能让我们功力大增，大大提高我们的效率。</p>
<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，要是你之前是个 Eclipse 的忠实粉丝，也推荐你用一下 IDEA 试试，你只需要把 IDEA 的快捷键方式设置为 Eclipse 方式即可，相信过了一开始的阵痛期之后，就会喜欢上 IDEA 这一神器。那接下来，我们就来进行 IDEA 的安装工作！</p>
<h2> 二、安装前的准备工作</h2>
<p>开始安装之前，我们需要进行一些准备，首先是<strong>社区版和旗舰版该选谁</strong>，接着是<strong>软硬件的支持</strong>。</p>
<h3> 1. 旗舰版 VS 社区版</h3>
<p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>
<figure><figcaption></figcaption></figure>
<h3> 2. 软件</h3>
<ul>
<li>IntelliJ IDEA 安装包，下载地址：<a href="https://www.jetbrains.com/idea/download/%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>
</ul>
<h3> 3. 硬件</h3>
<table>
<thead>
<tr>
<th>配置项目</th>
<th style="text-align:left">最低配置</th>
<th>推荐配置</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>内存</strong></td>
<td style="text-align:left">2G +</td>
<td>8 G +</td>
</tr>
<tr>
<td><strong>硬盘</strong></td>
<td style="text-align:left">2.5 GB + 1 GB 缓存</td>
<td>至少 5GB+ 空间的 SSD</td>
</tr>
<tr>
<td><strong>显示器</strong></td>
<td style="text-align:left">1024 x 768</td>
<td>1920×1080</td>
</tr>
<tr>
<td><strong>操作系统</strong></td>
<td style="text-align:left">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>
<td>最新的 64 位 Windows、macOS、Linux 系统</td>
</tr>
</tbody>
</table>
<h2> 三、安装工作</h2>
<h3> 1. Ubuntu</h3>
<h4> 1.1 安装</h4>
<ol>
<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption>解压</figcaption></figure>
<figure><figcaption>解压后的目录结构</figcaption></figure>
<ol start="3">
<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li>进入初始化启动后的设置即可。</li>
</ol>
<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可。</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装。</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<h4> 1.2 卸载</h4>
<p>Linux 下卸载只需要将对应目录（即刚才解压后的目录）删除即可。</p>
<h3> 2. Windows</h3>
<h4> 2.1 安装</h4>
<p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>
<h4> 2.2 卸载</h4>
<p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>
<figure><figcaption></figcaption></figure>
<h3> 3. macOS</h3>
<h4> 3.1 安装</h4>
<ol>
<li>首先去 <a href="https://www.jetbrains.com/idea/download/#section=mac" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>安装成功，打开的主页面如下图所示；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 3.2 卸载</h4>
<p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️ 废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>
<figure><figcaption></figcaption></figure>
<h2> 四、创建 Java 项目</h2>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">上一篇</a> 文章中，我们介绍了如何利用编辑器写我们的 <code>Hello World</code>，接下来就讲讲如何利用 IDEA 来创建并书写我们的 <code>Hello World</code> 程序。</p>
<ol>
<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>再接下来，就是设置项目名以及项目存储目录了；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件。注意，一般来讲，我们倾向于把类的命名方式定义为首字母大写的驼峰命名法。然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li>最后运行我们刚才写的代码，可以看到输出了 <code>Hello World</code>，和我们在上一篇文章中通过控制台打印出的一样！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 五、总结</h2>
<p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，以及 IDEA 在不同系统中的安装和卸载工作，最后则是给大家演示了如何利用 IDEA 创建一个项目，编写我们最简单的 <code>Hello World!</code> 程序。</p>
<p>这里如果您想了解 IDEA 的更多使用技巧，可以关注一下，后边我会抽空写一个完整的教程系列，敬请期待吧！您要是等不及了，那就加我微信来催我更文吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">变量与数据类型</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220704-variable-and-datatype.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220704-variable-and-datatype.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 变量与数据类型</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 变量与数据类型</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
</div>
<h2> 前情回顾</h2>
<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>
<p>本期内容预告如下：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>变量作用域</strong></li>
<li><strong>常量</strong></li>
</ol>
<p>本文将主要从以上四个方面出发，带领大家来看一下 Java 中的变量和数据类型。</p>
<h2> 变量</h2>
<h3> 什么是变量？</h3>
<p>所谓变量，就是用来命名一个数据的标识符，其定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中数据类型是用于限制存储数据的形式，后面会讲到 Java 中的常见数据类型；变量名称是用于代表变量的一个符号，就好比我们每个人的名字；初始值则代表该变量存储时的初始数据。</p>
<p>在 Java 中，变量主要分为两种：</p>
<ul>
<li><strong>基本类型的变量</strong></li>
<li><strong>引用类型的变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>
<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>
<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>
<h3> 变量的特点</h3>
<p>在使用变量时，需要注意以下的几个问题。</p>
<ol>
<li>变量一定要先声明然后再使用。</li>
<li>声明一个变量的类型后，不能用它来存储其他类型的数据。</li>
<li>变量定义时可以不赋初始值，但是在使用时必须赋值。</li>
<li>变量是有使用范围的，在同一使用范围内，不能重复定义同一个变量。</li>
<li>变量最重要的一个特点就是可以重新赋值。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 变量命名规则</h3>
<p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>
<ol>
<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>
<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>
<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>
<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></li>
</ol>
<h3> 常见关键字</h3>
<p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>
<ul>
<li><strong>访问控制类</strong></li>
<li><strong>类、方法及变量修饰符类</strong></li>
<li><strong>程序控制类</strong></li>
<li><strong>错误处理</strong></li>
<li><strong>包相关</strong></li>
<li><strong>基本类型</strong></li>
<li><strong>变量引用</strong></li>
<li><strong>保留字</strong></li>
</ul>
<!-- ![](https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png) -->
<figure><figcaption>Java 关键字</figcaption></figure>
<h2> 数据类型</h2>
<h3> 基本数据类型</h3>
<p>Java 中，共有 8 种基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 种基本数据类型分别是：</p>
<ul>
<li><strong>整型（4 种）</strong></li>
<li><strong>浮点型（2 种）</strong></li>
<li><strong>字符型（1 种）</strong></li>
<li><strong>布尔型（1 种）</strong></li>
</ul>
<p>下面的表就是 Java 中 8 大数据类型所占的内存空间，对应封装类，数据表示范围以及默认值的一下相关情况。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>bit</th>
<th>字节</th>
<th>封装类</th>
<th>数据范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td>8</td>
<td>1</td>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^7-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td>16</td>
<td>2</td>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td>16</td>
<td>2</td>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\uffff</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>65535</mn></mrow><annotation encoding="application/x-tex">65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">65535</span></span></span></span>）</td>
<td><code>u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>32</td>
<td>4</td>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td>64</td>
<td>8</td>
<td><code>Long</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>32</td>
<td>4</td>
<td><code>Float</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.4</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.4e^{-45}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3.4</mn><msup><mi>e</mi><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">3.4e^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">3.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td>64</td>
<td>8</td>
<td><code>Double</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4.9</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>324</mn></mrow></msup></mrow><annotation encoding="application/x-tex">4.9e^{-324}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4.9</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.8</mn><msup><mi>e</mi><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">1.8e^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.8</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>1</td>
<td>不确定</td>
<td><code>Boolean</code></td>
<td><code>true</code> 或 <code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ol>
<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现。</li>
<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L/l</code>，否则将其作为整型解析，可能会导致越界。</li>
<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理。</li>
<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>""</code></strong> 将内容括起来，代表的是一个地址值。</li>
<li><code>Java</code> 在内存中是采用 <code>Unicode</code> 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示。</li>
</ol>
<p>那么如何给一个基本类型变量赋值呢？</p>
<p>在 <code>Java</code> 中，基本数据类型属于 <code>Java</code> 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引用数据类型</h3>
<h4> 常见引用数据类型</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td><code>null</code></td>
</tr>
<tr>
<td>类</td>
<td><code>null</code></td>
</tr>
<tr>
<td>接口</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> String</h4>
<p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>
<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>""</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>
<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>"</code>，那么这个时候就需要借助于转义字符 <code>\</code>，最常见的转义字符主要有：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\"</code></td>
<td>字符 <code>"</code></td>
</tr>
<tr>
<td><code>\'</code></td>
<td>字符 <code>'</code></td>
</tr>
<tr>
<td><code>\\</code></td>
<td>字符 <code>\</code></td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符 <code>Tab</code></td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>
</blockquote>
<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>
<blockquote>
<p><code>String</code> 既然是不可变，那有什么优点呢？</p>
</blockquote>
<ol>
<li><strong>用于缓存 <code>hash</code> 值</strong></li>
</ol>
<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>
<ol start="2">
<li><strong>字符串常量池（String Pool）的需要</strong></li>
</ol>
<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>
<ol start="3">
<li><strong>安全性</strong></li>
</ol>
<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>
<ol start="4">
<li><strong>线程安全</strong></li>
</ol>
<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>
<blockquote>
<p><code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>可变性</th>
<th>线程安全</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>String</code></td>
<td>不可变</td>
<td>安全</td>
<td>操作少量的数据</td>
</tr>
<tr>
<td><code>StringBuffer</code></td>
<td>可变</td>
<td>安全，内部使用 <code>synchronized</code> 进行同步</td>
<td>多线程操作字符串缓冲区下操作大量数据</td>
</tr>
<tr>
<td><code>StringBuilder</code></td>
<td>可变</td>
<td>不安全</td>
<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>
</blockquote>
<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>
<ol>
<li><strong>String Pool 中不存在 “xxx”</strong></li>
</ol>
<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>String Pool 中存在 “xxx”</strong></li>
</ol>
<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象。</p>
<figure><figcaption></figcaption></figure>
<h3> 数据类型转换</h3>
<p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>
<blockquote>
<p><strong>从小到大自动转，从大到小强制转</strong>。</p>
</blockquote>
<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>
<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 隐式转换（自动类型转换）</h4>
<p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>
<blockquote>
<ol>
<li>两种数据类型彼此兼容；</li>
<li>目标数据类型的取值范围大于源数据类型；</li>
</ol>
</blockquote>
<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>
<blockquote>
<ul>
<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>
<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>
</ul>
</blockquote>
<h4> 显式转换（强制类型转换）</h4>
<p>那既然满足上述两个条件时会发生隐式转换，那不满足我们又想进行数据类型转换时，我们该怎么办呢？</p>
<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们举个例子来说下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>
<h4> 常见数据类型转换方法</h4>
<ol>
<li><strong>字符串与其他类型之间的转换</strong></li>
</ol>
<ul>
<li><strong>其他类型 -&gt; 字符串</strong></li>
</ul>
<blockquote>
<ol>
<li>调用类的串转换方法：<code>X.toString()</code>；</li>
<li>自动转换：<code>"" + X</code>；</li>
<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字符串 - &gt; 其他类型</strong></li>
</ul>
<ol>
<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>
<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>int、float、double</strong> 之间的转换</li>
</ol>
<ul>
<li><code>float -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; float</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; int</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>int -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变量作用域</h2>
<p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>
<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>
<ul>
<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>
<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>
</ul>
<h3> 成员变量</h3>
<p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>修饰符</th>
<th>访问方式</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td>无</td>
<td>对象名.变量名</td>
<td>一旦对象被引用，则实例变量就存在</td>
</tr>
<tr>
<td>静态变量</td>
<td><code>static</code></td>
<td>类名.变量名</td>
<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 局部变量</h3>
<p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>
<ul>
<li>形参</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法内定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码块定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常量</h2>
<h3> 简介</h3>
<p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>
<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>
<h3> 分类</h3>
<p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量可以分为如下 3 种类型：</p>
<ul>
<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>
<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>
<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>
<h2> 总结</h2>
<p>以上就是本期文章的所有内容了，集中介绍了 Java 中的变量、数据类型、变量作用域以及常量等主要知识点。内容虽然蛮多的，但如果大家能够静下心来慢慢学习，掌握起来还是不难的。</p>
<p>最后，码字不易，如果觉得本文对您有所帮助，可以点赞关注，帮忙分享一波哦！🙏</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">常用进制转换</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220705-binary-convert.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220705-binary-convert.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 常用进制转换</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 常用进制转换</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
</div>
<h2> 前言</h2>
<p>所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中<strong>基数</strong>是指进位计数制中所采用的数码的个数，逢 <code>n</code> 进 1 中的 <code>n</code> 就是基数。而<strong>位权</strong>则指的是进位制中每一个固定位置所对应的单位制，而每一种进制中的某一个数的每位上都有一个权值 <code>m</code>，而且权值是位数减一，比如个位上的数的权值为 <code>0</code>（位数 1 - 1 = 0），而十位的权值为 <code>1</code>（位数 2 - 1 = 1）。</p>
<p>在 Java 学习中，我们难免会和各种进制打交道。今天就来看看，在 Java 中最常用的几个进制的相关概念，以及如何利用 Java 来实现他们之间的相互转换！</p>
<h2> 二进制</h2>
<p>二进制是计算机中采用最广泛的一种数制，用 0 和 1 两个数码来表示，其进位规则是逢二进一，而借位规则则是借一当二。</p>
<p>如果要将二进制转换为十进制，则采用 <strong>按权展开求和</strong>方法，其步骤是先将二进制的数写成加权系数展开式，然后再更具十进制的加法规则进行求和。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>1011</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mn>11</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">
(1011)_2=1*2^3+0*2^2+1*2^1+1*2^0 = (11)_{10}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1011</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">11</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h2> 十进制</h2>
<p>而一个十进制数要转换为二进制数，则需要将整数和小数部分分别转换，最后再进行组合。其中，整数部分采用<strong>除二取余，逆序排序</strong>的方法。具体方法是用 2 来整除一个十进制数，从而得到一个商和余数；然后再用 2 去除以商，从而又得到一个商和余数，重复这个步骤，直到最后得到的商小于 1 时为止。最后把按照得到余数的先后顺序，逆序依次排列，得到的数即为这个十进制数的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>15</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1111</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">
(15)_{10}=(1111)_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1111</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<figure><figcaption>整数部分</figcaption></figure>
<p>小数部分则不同于整数部分，小数部分要使用<strong>乘 2 取整法</strong>，即用十进制的小数部分乘以 2，然后取结果的整数部分，然后再用剩下的小数重复刚才的步骤，直到最后剩余的小数为 0 时停止。最后将每次得到的整数部分按照先后顺序正序排列，从而得到对应的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>0.25</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0.01</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">
(0.25)_{10}=(0.01)_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.25</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.01</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<figure><figcaption></figcaption></figure>
<h2> 八进制</h2>
<p>所谓八进制，就是每 3 位二进制作为一个单元，其中最小的数是 0，最大的数是 7，一共 8 个数字。</p>
<p>要将二进制的数转换为八进制，需要将 3 个连续的数拼成一组，然后再独立转成八进制中的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>111101011110</mn></mrow><annotation encoding="application/x-tex">111101011110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">111101011110</span></span></span></span> 可以转换为八进制中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7536</mn></mrow><annotation encoding="application/x-tex">7536</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7536</span></span></span></span>。</p>
<figure><figcaption></figcaption></figure>
<h2> 十六进制</h2>
<p>所谓十六进制，就是每 4 位二进制作为一个单元，其中最小数是 0，最大数是 15，一共 16 个数字，分别用 0 ~ 9、A、B、C、D、E、F 表示。</p>
<p>要将二进制转换为十六进制，需要将 4 个连续的数拼成一组，然后再独立转换为十六进制中对应的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111100111010111</mn></mrow><annotation encoding="application/x-tex">1111100111010111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111100111010111</span></span></span></span> 可以转换为十六进制中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mn>9</mn><mi>D</mi><mn>7</mn></mrow><annotation encoding="application/x-tex">F9D7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">7</span></span></span></span>。</p>
<figure><figcaption></figcaption></figure>
<h2> 常用进制转换</h2>
<p>当然，Java 中也已经将常用的进制转换方法封装好了，我们只需要调用对应方法即可。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制 -&gt; 二进制</td>
<td><code>Integer.toBinary(int num)</code></td>
<td>二进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 八进制</td>
<td><code>Integer.toOctalString(int num)</code></td>
<td>八进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 十六进制</td>
<td><code>Integer.toHexString(int num)</code></td>
<td>十六进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; N 进制</td>
<td><code>Integer.toString(int num, int N)</code></td>
<td>N 进制字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>相反的，如果我们要将一个 <code>N</code> 进制的字符串 <code>str</code> 转换为十进制数，那么可以使用以下方法。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>N 进制 -&gt; 十进制</td>
<td><code>Integer.parseInt(String str, int N)</code></td>
<td>十进制数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是有关二进制、十进制、八进制、十六进制相关的知识点了。此外还介绍了 Java 中如何进行十进制向其他进制的转换方法，以及如何将其他进制转换为十进制。如果你刚好这些内容对你有所帮助，那就来个一键三连吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">操作符</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220706-operator.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220706-operator.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 操作符</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 操作符</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
</div>
<h2> 前言</h2>
<p><a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">之前的文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符的相关知识点了。所谓运算符，就是指 Java 中对变量或者字面量进行操作的符号。下面就来具体看看，常用的操作符。</p>
<p>本文主要内容预告如下：</p>
<ul>
<li><strong>算术运算符</strong></li>
<li><strong>关系运算符</strong></li>
<li><strong>位运算符</strong></li>
<li><strong>逻辑运算符</strong></li>
<li><strong>赋值运算符</strong></li>
<li><strong>条件运算符</strong></li>
</ul>
<p>好了，话不多说，开始正式内容吧！</p>
<h2> 算术运算符</h2>
<p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％</code></td>
<td style="text-align:left">取余 - 左操作数除以右操作数的余数</td>
</tr>
<tr>
<td style="text-align:left"><code>++</code></td>
<td style="text-align:left">自增: 操作数的值增加1</td>
</tr>
<tr>
<td style="text-align:left"><code>--</code></td>
<td style="text-align:left">自减: 操作数的值减少1</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是<strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>
<p>以下是部分算术运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>这里不难看出，无论是 <code>++</code> 还是 <code>--</code>，当它们单独写一行时，不管是放在变量前边还是后边，其最终结果都是一样的。但如果将它们参与运算，此时的效果就不一样了，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，先进行了 <code>b = a</code> 的赋值操作，所以此时 <code>b</code> 的值是 <code>10</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而此时，先要对 <code>a</code> 进行加一的操作之后，再将 <code>a</code> 的值赋予 <code>b</code>，所以此时 <code>b</code> 的值为 <code>11</code>。</p>
<h2> 关系运算符</h2>
<p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt; </code></td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt; </code></td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>
</tr>
</tbody>
</table>
<p>以下是部分关系运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 位运算符</h2>
<p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>＆</code></td>
<td>如果相对应位都是 1，则结果为 1，否则为 0</td>
</tr>
<tr>
<td><code>|</code></td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>^</code></td>
<td>如果相对应位值相同，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>〜</code></td>
<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;&gt;</code></td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>
</tr>
</tbody>
</table>
<p>以下是部分位运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 逻辑运算符</h2>
<p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>
</tr>
<tr>
<td style="text-align:left"><code>||</code></td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>
</tr>
</tbody>
</table>
<p>以下是逻辑运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 赋值运算符</h2>
<p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％=</code></td>
<td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt; =</code></td>
<td style="text-align:left">左移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;=</code></td>
<td style="text-align:left">右移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>＆=</code></td>
<td style="text-align:left">按位与赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>^=</code></td>
<td style="text-align:left">按位异或赋值操作符</td>
</tr>
<tr>
<td style="text-align:left"><code>|=</code></td>
<td style="text-align:left">按位或赋值操作符</td>
</tr>
</tbody>
</table>
<p>以下是部分赋值运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 条件运算符（? :）</h2>
<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是条件运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> instanceof</h2>
<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 运算符优先级</h2>
<p>运算符有很多，如果我们将多个运算符组合在一起，那它们又该先计算哪一个，然后再计算哪一个呢？其实就像我们日常排队一样，运算符也是有优先级的。<br>
常用运算符的优先级如下表所示，在我们使用时，如果涉及到一个表达式中含有多个运算符，一定要注意运算符的优先级。当然了，让我们背下来这些也是挺难的。不过不要紧，我们只需要学会灵活运用 <code>()</code> 就好了。我们可以利用 <code>()</code> 将需要先计算的表达式括起来，然后再去进行下一步的运算。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>.</code>、<code>()</code>、<code>{}</code></td>
</tr>
<tr>
<td>2</td>
<td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code></td>
</tr>
<tr>
<td>3</td>
<td><code>*</code>、<code>/</code>、<code>%</code></td>
</tr>
<tr>
<td>4</td>
<td><code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td>
</tr>
<tr>
<td>6</td>
<td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>instanceof</code></td>
</tr>
<tr>
<td>7</td>
<td><code>==</code>、<code>!=</code></td>
</tr>
<tr>
<td>8</td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>9</td>
<td><code>^</code></td>
</tr>
<tr>
<td>10</td>
<td><code>|</code></td>
</tr>
<tr>
<td>11</td>
<td><code>&amp;&amp;</code></td>
</tr>
<tr>
<td>12</td>
<td><code>||</code></td>
</tr>
<tr>
<td>13</td>
<td><code>?:</code></td>
</tr>
<tr>
<td>14</td>
<td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code></td>
</tr>
</tbody>
</table>
<h2> equals() 和 ==</h2>
<ul>
<li><code>==</code></li>
</ul>
<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>
<blockquote>
<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>
</blockquote>
<ul>
<li><code>equals()</code></li>
</ul>
<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>
<ol>
<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>
<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>
<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">流程控制</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220707-control-process.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220707-control-process.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 流程控制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 流程控制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
</div>
<h2> 前言</h2>
<p>我们在 <a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>
<ul>
<li><strong>输入输出</strong></li>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<h2> 输入输出</h2>
<p>之前的学习中，我们会发现都是通过定义变量并赋初值的方式来得到一个实现固定好值得变量。加入我们现在不想再以这种方式获取变量值，而想要直接控制变量值，又该怎么做呢？这就涉及到 Java 中的输入输出相关知识了，以下就先来看看，如何实现从控制台输入，并从控制台输出吧。</p>
<h3> 输入</h3>
<p>先来看一个实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>要实现从控制台输入并读取到我们的程序中时，需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>
<ol>
<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头。</li>
<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流。</li>
<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换。</li>
</ol>
<p>从控制台获取不同类型的输入，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>hasNext()</code></td>
<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>next()</code></td>
<td>返回输入的字符串，以空格为分隔符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>nextLine()</code></td>
<td>返回输入的字符串，以换行为分隔符</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>nextInt()</code></td>
<td>输入整型数</td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>nextLong()</code></td>
<td>输入长整型数</td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>nextFloat()</code></td>
<td>输入单精度数</td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>nextDouble</code></td>
<td>输入双精度数</td>
</tr>
</tbody>
</table>
<p>这里值得注意的是 <code>next()</code> 和 <code>nextLine</code> 两个方法，虽然他们的作用都是用于获取输入的 <code>String</code> 类型的内容，但是它们具体的处理机制又会有所区别。<br>
针对 <code>next()</code> 而言，它会自动消除有效字符前的空格，从而只返回输入的字符，得到的字符串都不会带有空格。也就是说，当使用 <code>next()</code> 时，如果遇到空格，此时就会停止录入，只录入空格前的内容，而空格后的内容则会保留到缓冲区。除了空格之外，<code>next()</code> 也会对制表符和换行符采用同样的处理方式。<br>
而对 <code>nextLine()</code> 来说，它会返回换行符之前的所有内容，甚至是带空格的字符串。</p>
<p>因此，在使用时一定要注意它们之间的区别，合理搭配使用，从而得到自己想要的结果。</p>
<h3> 输出</h3>
<p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>
<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>
<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>
<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%d</code></td>
<td>格式化输出整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化输出浮点数</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化输出字符串</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化输出十六进制整数</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>格式化输出科学计数法表示的浮点数</td>
</tr>
</tbody>
</table>
<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>表示一个反斜杠</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>表示一个单引号</td>
</tr>
<tr>
<td><code>\"</code></td>
<td>表示一个双引号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 顺序结构</h2>
<figure><figcaption>顺序结构</figcaption></figure>
<p>顺序结构如上图所示，它可以说是最简单的，只需要按照解决问题的顺序写出对应的语句即可，其执行顺序是自上而下，依次执行的。就类似于我们求解一道数学题，你得根据题意一步一步来，直至解出最后的答案。</p>
<h2> 分支结构</h2>
<p><br>
上图是分支结构，顺序结构虽然能够处理计算、输出等问题，当遇到需要判断选择时，顺序结构已经不能很好的解决了，此时就需要使用分支结构。<br>
Java 中，分支结构相关的语句主要涉及到 <code>if</code> 和 <code>switch</code> 相关，下面就分别来看一下。</p>
<h3> if</h3>
<ol>
<li><strong>单次判断</strong></li>
</ol>
<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>多次判断</strong></li>
</ol>
<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>
<figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> switch</h3>
<p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>
<p><code>switch</code> 分支的语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>
<p>一个 <code>switch</code> 的实例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的形式之外，也可以使用以下形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>
<ol>
<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>
<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，直到遇到 <code>break</code> 才结束执行；</li>
<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>
</ol>
<h2> 循环结构</h2>
<p><br>
上图为循环结构示意，让程序中遇到需要反复执行某一个功能时，我们发现顺序结构以及分支结构实现起来都太过于繁琐，于是又提出了循环结构的相关概念。<br>
通过循环结构，我们就可以通过判断循环语句，然后判断是否进入循环体。Java 中，循环结构主要涉及的语句有 <code>while</code>、<code>for</code>、<code>continue</code>、<code>break</code> 等。</p>
<h3> while</h3>
<p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>
<p>这么写么：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>
<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>&gt;</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">10 &gt; 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>
<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>
<h3> for</h3>
<ul>
<li><strong>普通 for 循环</strong></li>
</ul>
<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><code>for</code> 循环的语法形式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环的执行步骤如下：</p>
<ol>
<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空。</li>
<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句。</li>
<li>一次循环完成后，执行更新语句来更新循环控制变量。</li>
<li>最后再次判断终止条件，循环以上三个步骤。</li>
</ol>
<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>
<ul>
<li><strong>增强 for 循环</strong></li>
</ul>
<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>
<h3> for 和 while 的区别</h3>
<p>经过上面的学习，我们可以发现，基本能用 <code>for</code> 循环的，都能将其改写成 <code>while</code> 循环。而使用 <code>while</code> 循环的，也可以在一定程度上改写成 <code>for</code> 循环。两者的运行规则都是一样的，那针对什么场景该使用 <code>for</code>，什么场景又该使用 <code>while</code> 呢？</p>
<p>通常，如果我们知道循环的次数或者循环的范围，那么我们优先使用 <code>for</code> 循环。如果不知道循环的次数和范围，而只知道循环的结束条件，那么此时优先使用 <code>while</code> 循环。</p>
<h3> continue &amp; break</h3>
<h3> break</h3>
<p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>
<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>
<h3> continue</h3>
<p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>
<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>
<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区指出来！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">数组操作的奇技淫巧</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220708-how-to-operate-array.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220708-how-to-operate-array.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 数组操作的奇技淫巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 数组操作的奇技淫巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ</a></p>
</div>
<h2> 前言</h2>
<p>前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：</p>
<ul>
<li><strong>数组简介</strong></li>
<li><strong>遍历</strong></li>
<li><strong>排序</strong></li>
<li><strong>常用方法</strong></li>
</ul>
<h2> 数组简介</h2>
<p>所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而这个容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 <code>0</code> 开始计数，而不是我们日常所习惯的 <code>1</code>。</p>
<p>要定义一个数组类型的遍历，其语法为 <code>数据类型 []</code>，比如 <code>int[]</code>，而且在初始化时必须指定数组大小，如 <code>int[] arr = new int[10]</code>，表示 <code>arr</code> 数组可以容纳 <code>10</code> 个 <code>int</code> 类型的元素。</p>
<p>数组的特点：</p>
<ul>
<li>数组中的元素初始化时都是有默认值的，整型对应 <code>0</code>，浮点型对应 <code>0.0</code>，而布尔型对应 <code>false</code>。</li>
<li>数组一经创建，其大小（长度）就不可再变。</li>
<li>要访问数组中的某一元素，需要用到索引，索引从 <code>0</code> 开始。</li>
<li>如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可。</li>
</ul>
<p>和变量一样，既然定义了，那么就要对数组进行初始化。所谓数组的初始化，指的是在内存中，为数组容器开辟空间，然后将数据存入容器中的过程。而常用的初始化方式主要有两种：</p>
<ul>
<li><strong>静态初始化</strong></li>
<li><strong>动态初始化</strong></li>
</ul>
<h3> 一维数组</h3>
<h4> 初始化</h4>
<ol>
<li><strong>静态初始化</strong></li>
</ol>
<p>所谓静态初始化，就是在定义数组的同时将其初始化。</p>
<p>静态初始化的完整格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但在开发时，为了方便，也可以对上面的代码进行简写：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两种方式最终得到的结果是一样的，但第二种更加简洁方便。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>动态初始化</strong></li>
</ol>
<p>动态初始化，就是先声明数组长度定义之后，再由系统对其分配初始值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 <code>5</code>，所以我们数组的索引位置最大只能为 <code>4</code>，否则就会报数组越界错误。</p>
<h4> 求数组长度</h4>
<p>求数组的长度，利用数组的 <code>length</code> 属性即可；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 二维数组</h3>
<h4> 初始化</h4>
<ol>
<li><strong>静态初始化</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>动态初始化</strong></li>
</ol>
<p>二维数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 求数组长度</h4>
<p>不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态初始化和动态初始化的区别</h3>
<p>上面分别对一维数组和二维数组进行了静态初始化和动态初始化，通过比较总结出两者的区别如下：</p>
<p><strong>动态初始化</strong>：手动指定数组长度，然后由系统给出默认初始化值。</p>
<p><strong>静态初始化</strong>：手动指定数组元素，然后系统会根据元素个数计算出数组长度。</p>
<h2> 数组遍历</h2>
<p>既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。所谓遍历，就是将数组中的所有元素取出来，然后操作这些取出来的元素。</p>
<p>假设我们有一个数组如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 标准 for 循环</h3>
<p>首先，我们来使用标准的 <code>for</code> 循环来遍历该数组，只需要通过数组的索引位置来访问即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 增强 for 循环</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><strong>两者的区别</strong>：标准 <code>for</code> 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 <code>for each</code> 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。</p>
<h3> 标准库遍历</h3>
<p>通过调用标准库 <code>Arrays</code> 中的 <code>toString()</code> 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 <code>array[row][col]</code> 来进行访问，而对于二维及更多维的数组，可以使用 <code>Arrays.deepToString()</code>。</p>
<h2> 数组排序</h2>
<h3> 使用排序算法</h3>
<p>排序算法多样，最常用的则有 <strong>冒泡排序、插入排序、快速排序等</strong>，进行排序时会修改数组本身；</p>
<p>冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 标准库排序</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 常用方法</h2>
<p>对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>static String</code></td>
<td><code>toString(Object[] a)</code></td>
<td>输出数组的字符串形式</td>
</tr>
<tr>
<td><code>static &lt;T&gt; List&lt;T&gt;</code></td>
<td><code>asList(T…… a)</code></td>
<td>数组转 <code>List</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">面向对象的 3、5 知识点</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220709-oop-1.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220709-oop-1.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 面向对象的 3、5 知识点</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 面向对象的 3、5 知识点</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
</div>
<h2> 前言</h2>
<p>前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - <strong>面向对象编程</strong>。</p>
<h2> 什么是面向对象？</h2>
<p>所谓面向对象，是一种通过对象的方式，将现实中的事物映射到计算机模型的一种编程方法。</p>
<p>对象的含义指的是具体的某一个事物，即我们在现实生活中能够看得见摸得着的。在面向对象程序设计中，对象指的是计算机系统中的某一个成分，主要有两层含义。一个是指 <strong>数据</strong>，另一个则是 <strong>动作</strong>。即对象是两者的结合体，通过对象不仅能够进行操作，还能对操作的结果进行记录。</p>
<p>在这之前，另一种编程方式是 <strong>面向过程</strong>，用一个具体的例子来讲，可以描述成下面这样：</p>
<blockquote>
<p>假如有一天你很想吃酸菜鱼，那么你该怎么办呢？下面就以面向对象和面向过程给你两个选择，让你决定来选哪一个！</p>
<ol>
<li><strong>面向对象</strong>：打开手机，打开外卖软件，搜索酸菜鱼，然后下单，等着外卖送到家就行！</li>
<li><strong>面向过程</strong>：先去买菜，鱼、酸菜、调料……，然后回家杀鱼、切酸菜、切调料……，再接着开始炒，最后做好盛到盘子里！</li>
</ol>
</blockquote>
<p>对比可以发现两者的优缺点：</p>
<ul>
<li><strong>面向过程</strong>
<ul>
<li><strong>优点</strong>：性能好；以例子来说自己做比起点外卖，经济又实惠，还吃得放心。</li>
<li><strong>缺点</strong>：不易维护、不易复用、不易扩展；以例子来讲，要是我们自己做，临时又想吃其他的菜，又得跑去买材料啥的，麻烦！但外卖就不一样了，直接打开手机再点就是。</li>
</ul>
</li>
<li><strong>面向对象</strong>
<ul>
<li><strong>优点</strong>：易维护、易复用、易扩展，也就是面向过程的缺点。</li>
<li><strong>缺点</strong>：性能较差；比起自己做，点外卖成本啥的可能就比较高了。</li>
</ul>
</li>
</ul>
<h2> 面向对象的 5 大原则</h2>
<ol>
<li><strong>单一职责原则 SRP</strong></li>
</ol>
<p>又称为单一功能原则，它规定了一个类应该只有一个发生变化的原因。也就是说类的功能要单一，不能太复杂。</p>
<p>举个例子来说，学校里边有学生、老师、管理员，如果将这些人统一封装在一个类中，那么到时候难以对他们的身份作区分，那么此时按照 SRP 原则，我们就可以将他们各自分为一个类，从而方便管理。</p>
<ol start="2">
<li><strong>开放封闭原则 OCP</strong></li>
</ol>
<p>指一个模块对于扩展是开放的，但对于修改则是封闭的。也就是说可以增加功能，但是不能修改功能。</p>
<p>也就是说，一个类可以进行扩展（添加属性或者方法），但是对于类中已有的属性和方法，不要修改它们。</p>
<ol start="3">
<li><strong>里氏替换原则 LSP</strong></li>
</ol>
<p>指子类能够替换父类出现在父类能够出现的任何地方。</p>
<p>假设有两个类 <code>Father</code> 和 <code>Child</code>，其中 <code>Father</code> 是 <code>Child</code> 的父类，那么在进行调用时，<code>Father</code> 类可以引用 <code>Child</code> 类，反之却不行。</p>
<ol start="4">
<li><strong>依赖倒置原则 DIP</strong></li>
</ol>
<p>高层次的模块不应该依赖于低层次的模块，而应该都依赖于抽象。抽象不应该依赖于具体实现，但具体实现应该依赖于抽象。</p>
<p>也就是说，我们可以将同类事物的共性抽取出来，将其作为这一类事物的“高层次模块”，然后由“低层次模块”来继承或者实现“高层次模块”。</p>
<ol start="5">
<li><strong>接口分离原则 ISP</strong></li>
</ol>
<p>指设计时可以采用多个与特定客户类相关的接口，而不是采用一个通用的接口。</p>
<h2> 面向对象的 3 大特性</h2>
<h3> 封装</h3>
<p>利用抽象数据类型把数据和方法封装在一起，然后共同构成一个相互关联的对象。从而隐藏对象的属性和实现细节，只对外提供访问的接口，提高代码的复用性和安全性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上的 <code>Hero</code> 类，它封装了 <code>name</code> 、<code>skill</code> 等属性，如果我们想要获取 <code>Hero</code> 的 <code>name</code> 和 <code>skill</code> 属性值，那么就只能通过 <code>get()</code> 方法来获取，而如果我们想要改变这两个属性值，也只能通过 <code>set()</code> 方法来进行设置。</p>
<p>封装时，需要注意其原则，对象代码表什么，就封装对应的数据，并提供数据所对应的行为。</p>
<h3> 继承</h3>
<p>定义父类之后，子类可以从基础类进行继承，这样一来，子类就可以获得父类中非 <code>private</code> 的属性和方法，从而提高了代码的复用性。</p>
<p>继承实现了 <code>IS-A</code> 关系，假设我们现在有一个类 <code>Shooter</code> 继承自 <code>Hero</code>，那么此时我们就可以定义一个父类引用，然后将该引用指向它的子类对象。</p>
<p><code>Java</code> 中提供了一个关键字 <code>extends</code>，从而让一个类和另一个类建立起继承关系，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，被继承的类叫做父类（也叫超类或基类），如上述代码中的 <code>Hero</code>，另外一个类则叫做子类（也叫派生类），比如上面的 <code>Shooter</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是要注意一点：<strong>在 Java 中，类只能单继承</strong>。</p>
<h3> 多态</h3>
<p>所谓多态，就是同类型的对象，表现出的不同形态，表现形式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象，提高程序的扩展性。</p>
<p>多态又可以分为编译时多态和运行时多态，其中，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。</p>
<p>要确定一个多态是编译时还是运行时多态，可以通过以下三个条件来区分：</p>
<ul>
<li><strong>继承</strong></li>
<li><strong>覆盖（重写）</strong></li>
<li><strong>向上转型</strong></li>
</ul>
<p>如果同时满足以上三个条件，那么此时多态是运行时多态。</p>
<p>多态中，调用成员变量和成员方法时，遵循以下原则。</p>
<ol>
<li><strong>调用成员变量：编译看左边，运行也看左边</strong>：指 <code>javac</code>  编译时，会看左边的父类中是否有该变量，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code>  运行代码时，实际获取的成员变量是父类中的值。</li>
<li><strong>调用成员方法：编译看左边，运行看右边</strong>：指 <code>javac</code> 编译时，会看左边的父类中是否有该方法，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code> 运行代码时，实际调用的是子类中的方法。</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于面向对象编程思想的一些简单知识介绍了，主要讲了面向对象的概念，面向对象的 3 大特性以及面向对象的 5 大原则。如果觉得本文对你有所帮助，那就来个一键三连再走吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">类的相关知识</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220710-oop-2.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220710-oop-2.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 类的相关知识</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 类的相关知识</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
</div>
<h2> 前言</h2>
<p>学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。</p>
<h2> 类与对象</h2>
<p>以我们日常生活为例，我们现在很多人都养宠物，而宠物 <strong>都有一些共同状态</strong>，比如名字、毛色、年龄…… 这样一来我们就可以设计一个叫做<strong>类</strong>的东西，用来 <strong>代表宠物</strong> 这一类事物。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个类之后，它就相当于我们的一个模板，根据这个模板我们就能够创建一个个具体的宠物，而这些宠物，就叫做 <strong>对象</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结起来，类就是对对象所共有特征的描述，而对象则是真实存在的具体实例。在 Java 中，必须先设计类，然后才能创建并使用对象。</p>
<h2> 属性</h2>
<p>每个宠物都有自己的名字、毛色和年龄等一系列状态，而这些状态就叫做一个类的<strong>属性</strong>。而属性的类型既可以是基本类型（比如上述例子中的 <code>int</code>），也可以是引用类型（上述例子中的 <code>String</code>）。而在 Java 语言中，这些属性就叫做成员变量。成员变量的命名虽然没有强制规定，但是一般都是有一套大家通用的命名方法，即：</p>
<blockquote>
<p>若成员变量是一个单词组成，那么一般都是小写。</p>
<p>若成员变量是多个单词组成，那么则采用驼峰法。</p>
<p>关于更多的命名规定，推荐参考阿里巴巴出品的 《Java 开发手册》，下载地址：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></p>
</blockquote>
<p>成员变量的完整定义格式语如下，一般来说无需指定初始化值，它是存在默认值的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>数据类型</th>
<th>明细</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本类型</td>
<td><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code></td>
<td>0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>float</code>、<code>double</code></td>
<td>0.0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>引用类型</td>
<td>类、接口、数组、<code>String</code></td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>要访问属性，通常需要先创建一个对象，然后通过<strong>对象名.成员变量</strong>的方式来进行访问。</p>
<h2> 方法</h2>
<h3> 方法的定义</h3>
<p>而除开属性之后，每个对象还能够有许多其他的功能，就像宠物都能吃东西、会叫……，那么这些他们能够做的事情，在类里边就可以用 <strong>方法</strong> 来进行表示。所谓方法就是程序中最小的执行单元，一般用于封装重复且具有独立功能的代码，从而提高代码的复用性和可维护性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，修饰符主要有以下 4 种不同的访问权限：</p>
<ol>
<li><code>default</code>：默认什么都不写的情况，表示在同一个包内可见，主要用于修饰类、接口、变量、方法。</li>
<li><code>private</code>：表示在同一类中可见，常用于修饰变量和方法，但要注意，它不能用来修饰类（外部类）。</li>
<li><code>protected</code>：表示对同一个包内的类和所有子类可见，常用于修饰变量、方法，同样的，它也不能修饰类（外部类）。</li>
<li><code>public</code>：表示对所有类可见，常用于修饰类、接口、变量、方法。</li>
</ol>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同一包内</th>
<th>子类（同一包）</th>
<th>子类（不同包）</th>
<th>其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>private</code></td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>default</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
</tr>
<tr>
<td><code>public</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody>
</table>
<p>同样的，和属性一样，如果要调用一个方法，那么也需要先创建一个 Java 对象，然后通过**对象名.方法名(……)**的形式调用。</p>
<h3> 方法的分类</h3>
<p>而对于方法，也有需要注意的几点：</p>
<ol>
<li>方法是可以有返回值的，如果要返回对应值，则其返回值的类型要与返回值相对于，对于不需要返回值的方法，则将其返回类型设置为 <code>void</code>；</li>
<li>方法是可以有参数的，我们上述例子的方法中都是不带参数的，但如果我们有需要，就可以加上自己需要的参数，但此时注意要带上参数的类型；</li>
</ol>
<p>总结起来，可以分为如下四种方法：</p>
<ol>
<li><strong>无参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>无参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>有参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>有参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于方法命名的方式，也是有一定讲究的。因为一般而言方法都是一个类的动作行为，所以 <strong>一般都是以动词开头，而如果有多个单词组合，则除开第一个单词全部小写之外，后面每个单词的第一个字母都要使用大写</strong>。</p>
<p>注意到这里有个关键字 <code>return</code>，它主要用于设置方法的返回。</p>
<p>如果一个方法没有返回值，那么此时可以省略不写，一旦书写，那么就代表着该方法结束。比如，以下这个方法的两种书写方式最终效果都是一样的。</p>
<ul>
<li>带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>不带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果一个方法有返回值，那么此时 <code>return</code> 就必须写，它表示结束方法并返回结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重写与重载</h3>
<p>此外，既然提到了方法，那肯定少不了重写和重载了，下面就来看看重写和重载之间的区别。</p>
<ol>
<li><strong>重写</strong></li>
</ol>
<p>所谓重写，其实就是子类对父类中允许访问的方法的实现过程进行加工重新编写，是面向对象编程中多态性的体现，通常发生在父类和子类之间。</p>
<p>重写时，方法的参数和返回值都不能改变。通过重写，子类可以根据自己的需要，从而去重新定义区别于父类的行为。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载</strong></li>
</ol>
<p>而重载则是让类以统一的方式来处理不同类型数据的一种方式。一个类中存在多个同名方法，但他们具有不同的参数个数或者类型。</p>
<p>简单来说，就是在 Java 的一个类中，我们可以创建多个相同名字的方法，但是这些方法之间的参数和返回值有所不同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 参数传递机制</h3>
<p>了解参数传递前，先来了解下形参和实参的相关概念。</p>
<p><strong>实参</strong>，指在调用时所传递给方法的参数，可以是常量、变量、表达式、函数等。无论实参是何种类型的值，在进行方法调用时，都必须有确定的值，从而将这些值传递给形参。</p>
<p><strong>形参</strong>，在方法定义时，<code>()</code> 中所声明的参数，目的是用来接收调用方法时传入的参数。不是实际存在的变量，所以又叫做虚拟变量。</p>
<p>Java 中，方法的参数传递都是通过<strong>值传递</strong>的机制来实现的。所谓值传递，就是在传输实参给方法的形参时，并非传输的是实参变量本身，而是通过传输实参变量中所存储的值。</p>
<p>但是要注意区分的是，Java 中的<strong>基本数据类型的参数传输的是存储的数据值</strong>，而<strong>引用类型的参数传输的是存储的地址值</strong>。</p>
<h2> 构造方法</h2>
<p>上面我们说了实例（也就是对象）和属性，那么当我们创建一个实例的时候，通常我们想要把它的属性也给它设置好。为了实现这一功能，这时候我们可以添加方法，从而达到这一目的，以上述设置宠物的年龄为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现通过上述调用方法的方式是可以完成这一目的的，但假设我们需要设置的属性很多，此时要全部设置属性值时就需要调用许多次 <code>setter</code> 方法，一旦遗漏一个，则实例内部状态就紊乱了。那我们就想了，有没有一种简单点的方法，能够让我们在创建实例对象的同时就把内部属性初始化了呢？</p>
<p>答案是：Yes！🎉🎉🎉</p>
<p>这时候我们就可以用到一类特殊的方法 - <strong>构造方法</strong>，所谓构造方法，就是定义在类中可以用来初始化一个类的对象，并返回对象的地址，以下就来看看这个构造方法的特殊之处。构造方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在上面我们创建实例的时候就已经调用了构造方法了，只不过它是没有带任何参数的构造方法。以上述动物类 <code>Pet</code> 为实例，我们来看看如何编写它的构造方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上我们只是给出了无参的构造方法和带了所有属性的构造方法，除了上面的两个构造方法之外，我们还可以根据需要创建带有部分属性的构造方法。</p>
<p>其中，无参构造方法（默认存在）在初始化对象时，成员变量的数据均采用的默认值，而有参构造方法在初始化对象时，同时可以接收参数来给对象赋值。</p>
<p>经过对比可以发现，相比于普通的方法，构造方法有着明显的特点：</p>
<ol>
<li><strong>没有返回值</strong>：是的，无论是带参还是不带参的构造函数，它们都是没有返回值的，而它也是 <strong>每个类默认的构造方法</strong>。</li>
<li><strong>方法名同类名一样</strong>：必须确保构造方法的名字和类名一致，否则它就不是构造方法了。</li>
</ol>
<p>有了构造方法之后，我们创建实例时就可以直接给它初始化了，而不用再去麻烦地调用各个 <code>setter</code> 方法来初始化实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🎈 Tips：对于实例的属性值，在未经构造方法初始化时，各数据类型都有默认值，整型默认值为 <code>0</code>，浮点型默认值为 <code>0.0</code>，布尔类型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h2> 引用</h2>
<p>既然知道了什么是面向对象以及面向对象中的一些关键知识点如对象、属性、方法的概念，那我们就趁热来看看啥是引用。</p>
<p>所谓引用，其实在之前学习的时候就已经涉及到了。你是否还记得 <code>String</code> 这个特殊的数据类型，其实在我们创建一个 <code>String</code> 对象时，也就创建了一个引用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>str</code> 既是一个变量，也是一个引用，指向一个值为 <code>"村雨遥"</code> 的 <code>String</code> 对象，后续如果我们要访问这个 <code>String</code> 对象，就需要使用 <code>str</code> 这个引用来代表它。</p>
<figure><figcaption></figcaption></figure>
<p>以上我们说的是一个引用指向一个对象，但是我们也可以用多个引用指向同一个对象。就好比你家买了一辆车，不仅你可以开，你老婆也可以开，你爸妈也可以开。而这时候的车就好比一个“对象”，而使用它的人就是多个“引用”。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> JavaBean</h2>
<p><code>JavaBean</code> 也可以称为实体类，其对象可以用在程序中封装数据。对于一个标准的 <code>JavaBean</code>，定义时需要满足以下要求：</p>
<ul>
<li>成员变量均使用 <code>private</code> 修饰。</li>
<li>提供成员变量所对应的 <code>getXxx()/setXxx()</code> 方法。</li>
<li>必须提供一个标准的无参构造器，而有参构造器则是可写可不写。</li>
</ul>
<h2> 总结</h2>
<p>今天的内容就到此结束了，主要对面向对象中的类、对象、属性、方法、构造方法以及引用做了介绍，关于更多面向对象的知识，我们下一篇文章再见！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">包和 jar 文件的创建</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220711-oop-3.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220711-oop-3.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 包和 jar 文件的创建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 包和 jar 文件的创建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
</div>
<h2> 前言</h2>
<p>在之前的文章中，讲到了面向的 3 大特性（<strong>封装、继承、多态</strong>）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象。然后还介绍了类中的属性和方法，并对构造方法和引用也做了简单的讲解。</p>
<p>有了上面的基础之后，今天我们来继续学习面向对象的相关知识，主要内容预告如下：</p>
<ul>
<li><strong>包</strong></li>
<li><strong>注释</strong></li>
<li><strong>jar 文件的创建</strong></li>
</ul>
<h2> 包</h2>
<p>假设现在有这么一种情况，诸葛亮、周瑜、曹操共同开发一款程序。其中，周瑜和曹操均在自己代码模块中写了一个 <code>PublicUtil</code> 类，现在诸葛亮要调用周瑜和曹操模块中代码，需要同时用到他们中的 <code>PublicUtil</code> 类，这时候就犯难了，诸葛亮在他的代码中使用 <code>PublicUtil</code> 类时，该怎么区分是调用周瑜的，还是调用的曹操的呢？</p>
<p>针对这个问题，开发 Java 的前辈们当然也想到了。于是，他们在 Java 中定义了一种名字空间，也就是我们今天要讲的包：<code>package</code>。通过使用包机制，就十分容易区别类名的命名空间了。</p>
<p>一般包名的规则为：公司域名反写 + 包的作用，而且全部都要用英文小写。</p>
<p>假设曹操的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>周瑜的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果诸葛亮要同时使用他们俩代码中的 <code>PublicUtil</code> 类，此时就可以通过引入他们俩的包，然后通过使用 <code>包名.类名</code> 的引用方式来进行区分即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中的 <code>import</code> 你可能也在其他代码中见到过，但你不知道啥作用。其实它就是为了包的使用而生，如果我要使用另一个人的包，那该怎么做呢？其实很简单，只需要在程序中使用关键字 <code>import</code> 即可完成包的导入。</p>
<p>通过使用包，可以达到以下的作用：</p>
<ol>
<li>将功能类似或或相关的类以及接口组织放在同一个包中，方便类的查找与使用。</li>
<li>包也像文件夹一样，采用了树形目录的存储方式。同一个包中的类名不同，不同包中的类名可以相同。当同时调用两个不同包中的同一类名的类时，通过加上完整的包名就可以加以区分，从而避免类名冲突。</li>
<li>同时包也限定了访问权限，只有拥有包访问权限的类才能间接去访问包中的类。</li>
</ol>
<h2> 注释</h2>
<p>所谓注释，就是写在程序里边对代码进行结束说明的文字，既方便自己也方便他人查看，更快理解程序含义。而且注释是不影响程序的执行的，在我们对 Java 源代码进行编译后，字节码文件中不含源代码中的注释内容。</p>
<p>在 Java 中，通常支持三种注释方式，它们分别是：</p>
<ul>
<li><code>//</code>：单行注释</li>
<li><code>/* */</code>：多行注释</li>
<li><code>/** */</code>：文档注释</li>
</ul>
<h3> 单行注释</h3>
<p>单行注释是以双斜杠 <code>//</code> 来标识，表示只注释当前行内容，一般用在需要注释的内容较少的地方，以下就是一个单行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多行注释</h3>
<p>通常我们把要注释的内容放在 <code>/*</code> 和 <code>*/</code> 之间，表示在两者之间的内容都是我们的注释内容，以下是一个多行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 文档注释</h3>
<p>文档注释和多行注释很像，它是将我们所需要注释的内容包含在 <code>/**</code> 和 <code>*/</code> 之间。而文档注释和其他两种注释最大的区别就在于：我们可以利用 <code>javadoc</code> 工具来提取文档注释，然后生成一个 HTML 文档，类似于 Java 官网所提供的 API 文档，以下是一个文档注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过终端，使用 <code>javadoc</code> 命令就可以为上述文件生成一个 HTML 文档。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而文档注释相比于其他两种注释，也有更多值得注意的地方，下面就分别来看看需要留意的地方。</p>
<ol>
<li><strong>常用文档注释分类</strong></li>
</ol>
<ul>
<li><strong>类注释</strong></li>
</ul>
<p>顾名思义，所谓类注释，就是针对整个类的说明，它必须放在 <code>import</code> 之后，但又必须放在类定义之前。以下是一个类注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，在 <code>/**</code> 和 <code>*/</code> 之间的其他行注释，<code>*</code> 是可有可无的，之所以加上，更大情况出于美观的考虑，上面的实例写成如下样式也是合法的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法注释</strong></li>
</ul>
<p>同样的，方法注释也就是针对类中方法的注释，它必须放在所描述的方法之前。而一般情况下，除开说明该方法的功能之外，我们经常使用如下标记来对方法进行注释。</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@param variable description</code></td>
<td>用于介绍当前方法的参数，可以占据多行</td>
</tr>
<tr>
<td><code>@return description</code></td>
<td>用于描述当前方法的返回值，可以跨多行</td>
</tr>
<tr>
<td><code>@throws class description</code></td>
<td>用于表示该方法有可能抛出的异常</td>
</tr>
</tbody>
</table>
<p>以下就是一个方法注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字段注释</strong></li>
</ul>
<p>字段注释顾名思义，也就是对于类中字段的说明，用于描述字段的含义，以下是一个字段注释的例子。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你不喜欢把一个字段的注释分成多行的话，也可以写成以下格式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都是可以的，也没有优劣之分，可以根据自己的风格来选择。但是在 IntelliJ IDEA 等 IDE 中，如果对代码进行格式化，IDEA 会将第二种方式格式化成第一种方式，这一点需要注意。</p>
<ol start="2">
<li><strong>如何提取文档注释</strong></li>
</ol>
<p>假设有以下一段代码，我们需要生成关于代码的文档说明。那么就可以使用 JDK 中所提供的 <code>javadoc</code> 命令来提取代码的文档注释。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后利用以下命令就可以生成我们的文档注释。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令的意思就是，对名为 <code>HelloWorld.java</code> 的提取其中的文档注释，并将输出的文件放在 <code>helloworld</code> 文件夹下，并且在文档中包含程序作者和版本，编码方式为 <code>UTF-8</code>。</p>
<figure><figcaption></figcaption></figure>
<p>生成的文件列表详情见下图，打开其中的 <code>index.html</code> 就可以查看提取的文档注释。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> jar 文件的创建</h2>
<p>其实关于这个，我在之前的文章也写过。不过我是利用 IntelliJ IDEA 来对进行代码的打包，如果感兴趣，可以点击下方传送门去看看。</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/dev-tools/idea/java-quick-start-with-idea" title="如何利用 IntelliJ IDEA 创建 Java 入门应用" target="_blank" rel="noopener noreferrer">如何利用 IntelliJ IDEA 创建 Java 入门应用</a></p>
</blockquote>
<p>不过那是借助工具来生成的，今天我们来看看如何利用 JDK 所提供的命令行工具，来创建一个能打印出 <code>Hello World!</code> 的 <code>jar</code> 包。</p>
<p>同样的，我们仍然是需要先准备一个能输出 <code>Hello World!</code> 的 Java 源代码，命名为 <code>HelloWorld.java</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，利用 <code>javac</code> 命令对该文件进行编译，然后会生成 <code>HelloWorld.class</code> 字节码文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，利用 <code>jar</code> 命令来对生成的字节码文件进行打包。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>c</code> 表示创建一个新 <code>jar</code> 包，<code>v</code> 表示创建过程中打印创建过程中的信息，<code>f</code> 则表示对新生成的 <code>jar</code> 命名。</p>
<p>最后，利用以下命令来运行 <code>jar</code> 包。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过并不会顺利出现我们想要的结果，此时会报错 <code>hello.jar</code> 中没有主清单属性。这是因为我们还没有在 <code>MENIFEST.MF</code> 文件中添加 <code>Main-Class</code> 属性。<br>
</p>
<p>用压缩软件打开刚创建的 <code>hello.jar</code>，里边除了 <code>HelloWorld.class</code> 文件之外，还会多一个 <code>META-INF</code> 文件夹，里边还有一个 <code>MENIFEST.MF</code> 文件，此时我们只需要用编辑器打开该文件，然后在文件中加入以下代码。（<strong>记得添加之后要保证整个文件最后保留一行空行</strong>）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>添加完成之后，再次运行 <code>java -jar hello.jar</code> ，就可以成功在控制台打印 <code>Hello World!</code> 了。</p>
<h2> 总结</h2>
<p>以上就是今天博客的所有内容了，如果您觉得本文不错，那就来个一键三连吧，您的关注就是我坚持的不懈动力！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">成员变量、实例变量、静态变量、局部变量</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220712-all-kinds-of-variable.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220712-all-kinds-of-variable.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 成员变量、实例变量、静态变量、局部变量</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>demo</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token constant">ID</span><span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> school <span class="token operator">=</span> <span class="token string">"卡塞尔学院"</span><span class="token punctuation">;</span>  <span class="token comment">//成员变量、静态变量(类变量)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> level <span class="token operator">=</span> <span class="token string">"SSS"</span><span class="token punctuation">;</span>    <span class="token comment">//成员变量、静态变量(类变量)</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token constant">ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ID</span> <span class="token operator">=</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> subject1 <span class="token operator">=</span> <span class="token string">"屠龙"</span><span class="token punctuation">;</span>  <span class="token comment">//局部变量</span>
            <span class="token class-name">String</span> subject2 <span class="token operator">=</span> <span class="token string">"炼金术"</span><span class="token punctuation">;</span> <span class="token comment">//局部变量</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习科目： "</span> <span class="token operator">+</span> subject1 <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> subject2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">14000001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"楚子航"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Age: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主修科目： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院："</span> <span class="token operator">+</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级："</span> <span class="token operator">+</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 成员变量、实例变量、静态变量、局部变量</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 各变量联系与区别</h2>
<h3> 成员变量</h3>
<p>作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。</p>
<h3> 实例变量</h3>
<p>独立于与方法之外的变量，无 <code>static</code> 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h3> 静态变量(类变量)</h3>
<p>独立于方法之外的变量，用 <code>static</code> 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用。</p>
<h3> 局部变量</h3>
<p>类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化。</p>
<h3> 成员变量 VS 局部变量</h3>
<table>
<thead>
<tr>
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>类中位置不同</td>
<td>类中、方法外</td>
<td>方法中</td>
</tr>
<tr>
<td>初始化值不同</td>
<td>有初始值，无需初始化</td>
<td>无默认值，使用前需完成赋值</td>
</tr>
<tr>
<td>内存位置不同</td>
<td>堆内存</td>
<td>栈内存</td>
</tr>
<tr>
<td>生命周期不同</td>
<td>随对象创建而存在，随对象的消失而消失</td>
<td>随方法的调用而存在，随方法的运行结束而消失</td>
</tr>
<tr>
<td>作用域</td>
<td></td>
<td>所属大括号</td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>以上就是关于 Java 编程中，静态变量、类变量、实例变量、局部变量以及成员变量之间的相关区别了。读完本文，你是否对这几个变量之间能进行一定程度上的区分了呢？</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">String 详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220713-string.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220713-string.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> String 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>]]></summary>
    <content type="html"><![CDATA[<h1> String 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>
<p>但在实际使用过程中，给我们的实际观感可能会觉得 <code>String</code> 是可变的，但实际上 <code>String</code> 每次的修改都是产生并指向了新的字符串对象，原来的字符串对象实际上是没有改变的。</p>
<h2> 创建对象的两种方式</h2>
<ol>
<li>直接赋值</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>通过构造方法创建</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public String()</code></td>
<td>创建一个不含任何内容的空白字符串对象</td>
</tr>
<tr>
<td><code>public String(String original)</code></td>
<td>根据传入的字符串内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(char[] chs)</code></td>
<td>根据字符串数组的内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(bytes[] chs)</code></td>
<td>根据字节数组的内容来创建字符串对象</td>
</tr>
</tbody>
</table>
<p>两者的区别在于，利用 <code>""</code> 方式所给出的字符串对象，存储在字符串常量池中，而且相同内容只会在其中存储一份。但是通过构造方法 <code>new</code> 对象，每次 <code>new</code> 都会产生一个新对象，它们是存放在堆内存中的。</p>
<p>这里要注意，任何类型的数据与字符串相加时，得到的会是一个字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 字符串常用 API</h2>
<h3> public boolean equals(Object anotherObject)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象比较，只关心字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public boolean equalsIgnoreCase(String anotherString)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象进行比较，忽略大小写比较字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public int length()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>求字符串长度。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public char charAt(int index)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>获取某个索引位置处的字符。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public char[] toCharArray()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>字符串转换为字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String substring(int beginIndex, int endIndex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>根据开始和结束索引进行截取得到新的子串（左闭右开）。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String replace(CharSequence target, CharSequence replacement)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>使用新值将字符串中的旧值替换得到新字符串。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String[] split(String regex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>通过正则规则切割字符串，得到字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> StringBuilder</h2>
<p><code>StringBuilder</code> 可以看做一个容器，创建后其中的内容可变，主要是为了提高字符串 <code>String</code> 的操作效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringBuilder()</code></td>
<td>创建一个不含任何内容的空白可变字符串对象</td>
</tr>
<tr>
<td><code>public StringBuilder(String str)</code></td>
<td>根据字符串内容，创建可变字符串对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringBuilder</code> 转换为 <code>String</code></td>
</tr>
<tr>
<td><code>public StringBuilder append(Object obj)</code></td>
<td>添加数据并返回对象本身</td>
</tr>
<tr>
<td><code>public StringBuilder reverse()</code></td>
<td>反转容器中的内容</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> StringJoiner</h2>
<p>类似于 <code>StringBuilder</code>，都可以把它们看做是一个容器，而且它们里面的内容还是可变的，而它的出现也是为了提高操作字符串的效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner(间隔符)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符</td>
</tr>
<tr>
<td><code>public StringJoiner(间隔符, 开始符号, 结束符号)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符、开始符号、结束符号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner add(Object obj)</code></td>
<td>添加数据后返回对象本身</td>
</tr>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringJoiner</code> 转换为 <code>String</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是关于 <code>Java</code> 中字符串的相关知识点了，主要介绍了 <code>String</code> 类创建对象的两种方式以及常用 <code>API</code>。此外，为了提高字符串的操作效率，还了解 <code>StringBuilder</code> 和 <code>StringJoiner</code> 的构造方法以及常用方法，方便后续编程中使用。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">ArrayList 详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220714-arraylist.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220714-arraylist.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> ArrayList 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>]]></summary>
    <content type="html"><![CDATA[<h1> ArrayList 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>
<h2> 泛型支持</h2>
<p><code>ArrayList&lt;E&gt;</code> 实际上就是一个泛型类，能够在编译阶段约束集合对象只能操作某种数据类型。而且这里的数据类型只能是引用类型，而不能是基本数据类型。</p>
<table>
<thead>
<tr>
<th>正确</th>
<th>错误</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;;</code></td>
<td><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;;</code></td>
</tr>
</tbody>
</table>
<h2> 构造方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public ArrayList()</code></td>
<td>创建一个初始容量为 10 的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(int initialCapacity)</code></td>
<td>创建一个指定容量的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></td>
<td>创建一个包含指定集合中元素的列表</td>
</tr>
</tbody>
</table>
<h2> 常用方法</h2>
<h3> 元素个数</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int size()</code></td>
<td>返回集合中的元素个数</td>
</tr>
</tbody>
</table>
<h3> 元素获取</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E get(int index)</code></td>
<td>获取索引位置为 <code>index</code> 的元素</td>
</tr>
</tbody>
</table>
<h3> 元素新增</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void add(int index, E element)</code></td>
<td>在指定索引位置 <code>index</code> 新增元素 <code>element</code></td>
</tr>
<tr>
<td><code>boolean add(E element)</code></td>
<td>在列表末尾新增一个元素 <code>element</code></td>
</tr>
</tbody>
</table>
<h3> 元素删除</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E remove(int index)</code></td>
<td>删除指定索引处的元素并返回被删除的元素</td>
</tr>
<tr>
<td><code>public boolean remove(Object obj)</code></td>
<td>删除指定元素并返回是否删除成功</td>
</tr>
</tbody>
</table>
<h3> 元素修改</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E set(int index, E element)</code></td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
</tbody>
</table>
<h3> 元素遍历</h3>
<ol>
<li><strong>for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>增强 for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>迭代器</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>本文主要讲解了 <code>ArrayList</code> 的定义、泛型支持、构造方法以及常用方法等。主要针对的是日常中的使用，更多关于 <code>ArrayList</code>&nbsp; 底层原理的一些知识，抽个时间再聊吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">输入输出流</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220715-in-out-stream.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220715-in-out-stream.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 输入输出流</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 输入输出流</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>
<h2> 文件对象</h2>
<h3> 文件路径</h3>
<p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>File(String pathName)</code></td>
<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>
</tr>
<tr>
<td><code>File(String parent, String child)</code></td>
<td>从父路径名字符串和子路径名字符串创建新实例</td>
</tr>
<tr>
<td><code>File(File parent, String child)</code></td>
<td>从父抽象路径名和子路径名字符串创建新实例</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>
<ul>
<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>
<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\Softwares\\Typora\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 文件和目录操作</h3>
<h4> 创建与删除</h4>
<p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>createNewFile()</code></td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdir()</code></td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdirs()</code></td>
<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>delete()</code></td>
<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>
<p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>
</li>
<li>
<p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>
</li>
</ul>
<h4> 相关属性</h4>
<p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>long</code></td>
<td><code>length()</code></td>
<td>该抽象路径名表示的文件的所占字节大小</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canRead()</code></td>
<td>该抽象路径名表示的文件是否可读</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canWrite()</code></td>
<td>该抽象路径名表示的文件是否可写</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canExecute()</code></td>
<td>该抽象路径名表示的文件是否可执行</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 判断和获取</h4>
<p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>isFile()</code></td>
<td>测试此抽象路径名表示的文件是否为普通文件</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>isDirectory()</code></td>
<td>测试此抽象路径名表示的文件是否为目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>exists()</code></td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getPath()</code></td>
<td>将抽象路径转换为路径字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getAbsolutePath()</code></td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getName()</code></td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td><code>String[]</code></td>
<td><code>list()</code></td>
<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>
</tr>
<tr>
<td><code>File[]</code></td>
<td><code>listFiles()</code></td>
<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 练习</h3>
<p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 流</h2>
<h3> 什么是流</h3>
<p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>输入流</strong></td>
<td><code>InputStream</code></td>
<td><code>Reader</code></td>
</tr>
<tr>
<td><strong>输出流</strong></td>
<td><code>OutputStream</code></td>
<td><code>Writer</code></td>
</tr>
</tbody>
</table>
<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>
<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>
<figure><figcaption></figcaption></figure>
<h3> InputStream</h3>
<figure><figcaption></figcaption></figure>
<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>available()</code></td>
<td>返回该输入流中可以读取的字节数的估计值</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭输入流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read(bytep[] b)</code></td>
<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>
</tr>
</tbody>
</table>
<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>
<figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> OutputStream</h3>
<figure><figcaption></figcaption></figure>
<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>write(byte[] b)</code></td>
<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭文件输出流并释放相关资源</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>需要注意的点：</p>
<ul>
<li>字节流写入数据时如何实现换行？</li>
</ul>
<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\r\n</code>，macOS 下为 <code>\r</code>，而 Linux 下为 <code>\m</code>。</p>
<ul>
<li>字节流写入数据时如何实现追加？</li>
</ul>
<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>
<h3> 字符串中的编解码问题</h3>
<h4> 编码</h4>
<ul>
<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>
<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>
</ul>
<h4> 解码</h4>
<ul>
<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>
<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Writer</h3>
<figure><figcaption></figcaption></figure>
<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>先刷新再关闭流，不能再写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>flush()</code></td>
<td>刷新流，可以继续写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>newLine()</code></td>
<td>写入行分隔符</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>write()</code></td>
<td>写入字符或字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Reader</h3>
<figure><figcaption></figcaption></figure>
<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read()</code></td>
<td>读取一个字符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>readLine()</code></td>
<td>读一行文字</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>ready()</code></td>
<td>获取该流是否准备好被读取</td>
</tr>
</tbody>
</table>
<p>我们以从文件中读取内容为例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>
<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">反射机制详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220716-reflection.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220716-reflection.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 反射机制详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 反射机制详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
</div>
<h2> 反射概述</h2>
<h3> 什么是反射</h3>
<p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>
<h3> 使用反射的优缺点</h3>
<ul>
<li>
<p><strong>优点</strong></p>
<ol>
<li>在 <strong>程序运行过程中</strong> 可以操作类对象，增加了程序的灵活性；</li>
<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>
<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>
</ol>
</li>
<li>
<p><strong>缺点</strong></p>
<ol>
<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>
<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>
<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>
</ol>
</li>
</ul>
<h2> Class 对象的获取及使用</h2>
<h3> 获取 Class 对象的方式</h3>
<ol>
<li><code>Class.forName("全类名")</code></li>
</ol>
<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于 <strong>配置文件</strong> 中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>
<ol start="2">
<li><code>类名.class</code></li>
</ol>
<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于 <strong>参数的传递</strong>。</p>
<ol start="3">
<li><code>对象.getClass()</code></li>
</ol>
<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于 <strong>对象的获取字节码</strong> 的方式。</p>
<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>
<h3> Class 对象的使用</h3>
<h4> 获取成员变量</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Field[] getFields()</code></td>
<td>返回包含一个数组 <code>Field</code>对象反射由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td><code>Field getField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td><code>Field[] getDeclaredFields()</code></td>
<td>返回的数组 <code>Field</code>对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td><code>Field getDeclaredField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Field[] getFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Field getField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>Field[] getDeclaredFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Field getDeclaredField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>
<h4> 获取构造方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回包含一个数组 <code>Constructor</code>对象反射由此表示的类的所有公共构造类对象</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code>对象表示的类的指定的公共类函数</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回一个反映 <code>Constructor</code> 对象表示的类声明的所有 <code>Constructor</code> 对象的数组类</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code> 对象表示的类或接口的指定类函数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li>
<p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
</li>
<li>
<p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>
</li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>
</ul>
<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>
<h4> 获取成员方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Method[] getMethods()</code></td>
<td>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定公共成员方法 类对象</td>
</tr>
<tr>
<td><code>Method[] getDeclaredMethods()</code></td>
<td>返回包含一个数组方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定声明的方法类对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li><code>Method[] getMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method[] getDeclaredMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>
<h4> 获取类名</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li><code>String getName()</code></li>
</ul>
<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>
<h2> 反射实例</h2>
<p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>
<p>此时，我们可以通过 <strong>配置文件 + 反射</strong> 的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>
<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现我们的需求，通常需要如下步骤：</p>
<ol>
<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>
</ol>
<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code> 的方法。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>然后在主方法中加载读取配置文件；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>利用反射技术将类加载到内存中；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将整个流程汇总起来就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>
<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JDBC 入门指南</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220717-jdbc-introduction.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220717-jdbc-introduction.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> JDBC 入门指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> JDBC 入门指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
</div>
<h2> 前言</h2>
<p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>
<ul>
<li><strong>JDBC 简介</strong></li>
<li><strong>数据的增删改查</strong></li>
<li><strong>事务</strong></li>
<li><strong>连接池</strong></li>
</ul>
<h2> JDBC 简介</h2>
<p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>
<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>
<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener noreferrer">https://downloads.mysql.com/archives/c-j/</a></p>
<h3> 导入驱动包</h3>
<p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>
<ol>
<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>导入成功，点击 <code>OK</code> 即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 初始化并建立连接</h3>
<p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>
<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>
<ol>
<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>
<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>
<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>
<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 增删改查</h2>
<p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>
<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>
<table>
<thead>
<tr>
<th>SQL 中的数据类型</th>
<th>对应的 Java 数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BIT</code>、<code>BOOL</code></td>
<td><code>boolean</code></td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>long</code></td>
</tr>
<tr>
<td><code>REAL</code></td>
<td><code>float</code></td>
</tr>
<tr>
<td><code>FLOAT</code>、 <code>DOUBLE</code></td>
<td><code>double</code></td>
</tr>
<tr>
<td><code>CHAR</code>、 <code>VARCHAR</code></td>
<td><code>String</code></td>
</tr>
<tr>
<td><code>DECIMAL</code></td>
<td><code>BigDecimal</code></td>
</tr>
<tr>
<td><code>DATE</code></td>
<td><code>java.sql.Date</code>、<code>LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>
</tr>
</tbody>
</table>
<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>
<ol>
<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>
<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>
</ol>
<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>.</p>
<h3> 查询数据</h3>
<p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>
<ol>
<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>
<li>然后利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>
<li>接着执行 <code>PreparedStatement</code> 对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>
<li>最后则是利用 <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>
</ol>
<blockquote>
<p>需要注意的地方：</p>
<ol>
<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>
<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 增加数据</h3>
<p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>
<ol>
<li>创建 <code>Connection</code> 对象从而建立连接；</li>
<li>利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>
<li>然后依次设置占位符所代表的值；</li>
<li>执行 <code>PreparedStatement</code> 对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>
<figure><figcaption></figcaption></figure>
<h3> 删除数据</h3>
<p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>
<figure><figcaption></figcaption></figure>
<h3> 修改数据</h3>
<p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>
<figure><figcaption></figcaption></figure>
<h3> 注意</h3>
<p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>
<p>假设我们创建表时，设置了自增长的键：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> JDBC 工具类</h3>
<p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>
<ol>
<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建工具类</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 事务</h2>
<h3> 事务 4 大特性</h3>
<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>
<ol>
<li><strong>原子性（Atomicity）</strong></li>
</ol>
<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>
<ol start="2">
<li><strong>一致性（Consistency）</strong></li>
</ol>
<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>
<ol start="3">
<li><strong>隔离性（Isolation）</strong></li>
</ol>
<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>
<ol start="4">
<li><strong>持久性（Durability）</strong></li>
</ol>
<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>
<h3> 脏读、幻读 &amp; 不可重复读</h3>
<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong></li>
</ol>
<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>
<ol start="2">
<li><strong>幻读（Phantom Read）</strong></li>
</ol>
<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>
<ol start="3">
<li><strong>不可重复读（Non-repeatable Read）</strong></li>
</ol>
<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>
<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>
<blockquote>
<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>
</blockquote>
<h3> 隔离级别</h3>
<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>
<ol>
<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>
</ol>
<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>
<ol start="2">
<li><strong>READ-COMMITTED（读取已提交）</strong></li>
</ol>
<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>
<ol start="3">
<li><strong>REPEATABLE-READ（可重复读）</strong></li>
</ol>
<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>
<ol start="4">
<li><strong>SERIALIZABLE（可串行化）</strong></li>
</ol>
<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>
<p>以下是 SQL 隔离级别和各种读之间的关系：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>❌</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>❌</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3> 实例</h3>
<p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>setAutoCommit(boolean autoCommit)</code></td>
<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>commit()</code></td>
<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>rollback()</code></td>
<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
</tbody>
</table>
<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>
<ul>
<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>
<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>
</ul>
<h2> 连接池</h2>
<h3> 简介</h3>
<p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>
<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>
<h3> 常用数据库连接池</h3>
<h4> C3P0</h4>
<ol>
<li>导包</li>
</ol>
<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href="https://sourceforge.net/projects/c3p0/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E7%9A%84%E5%A6%82%E4%B8%8B%E4%B8%A4%E4%B8%AA%E5%8C%85%E5%AF%BC%E5%85%A5%EF%BC%9B" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>
<ul>
<li><code>c3p0.properties</code></li>
<li><code>c3p0-config.xml</code></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<p>创建连接池对象</p>
</li>
<li>
<p>获取连接对象</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> Druid</h4>
<ol>
<li>导包</li>
</ol>
<p>导入 Druid 的 jar 包，下载地址：<a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>加载配置文件</li>
<li>创建连接池对象</li>
<li>获取连接对象</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>
<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">是时候拥抱 Junit 单元测试了</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220718-test-with-junit.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220718-test-with-junit.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 是时候拥抱 Junit 单元测试了</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 是时候拥抱 Junit 单元测试了</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
</div>
<h2> 何为测试</h2>
<p>在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。</p>
<h3> 黑盒测试</h3>
<blockquote>
<p>黑盒测试（<code>black-box testing</code>），也称黑箱测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。</p>
</blockquote>
<p>黑盒测试方法可适合大部分的软件测试，例如集成测试（<code>integration testing</code>）以及系统测试（<code>system testing</code>）。</p>
<h3> 白盒测试</h3>
<blockquote>
<p>白盒测试（<code>white-box testing</code>），又称透明盒测试 <code>glass box testing</code>、结构测试 <code>structural testing</code> 等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑盒测试）。在白盒测试时，以编程语言的角度来设计测试案例。测试者输入资料验证资料流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p>
</blockquote>
<p>白盒测试可以应用于单元测试（<code>unit testing</code>）、集成测试（<code>integration testing</code>）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。</p>
<p>介绍一下黑白盒测试，主要是为了大家有一个概念，明白两者之间的区别，关于更多测试的内容，这里就不展开讲了，毕竟我们的重点是 JUnit。</p>
<h2> JUnit 简介</h2>
<h3> 什么是 JUnit</h3>
<blockquote>
<p>官网：<a href="https://junit.org/" target="_blank" rel="noopener noreferrer">https://junit.org/</a></p>
</blockquote>
<p>JUnit 是一个编写可重复测试的简单框架，是单元测试框架 xUnit 的一个实例，属于白盒测试。</p>
<p>针对 Java 语言而言，程序中最小的功能单元是方法，因此，对 Java 程序进行单元测试就是针对单个 Java 方法的测试。</p>
<p>在我们简单的小程序中，平常测试使用的方法是在主类中创建对象，然后调用对应方法。但是这样一来存在两个缺点：</p>
<ol>
<li>不能将测试代码和业务代码分离；</li>
<li>未打印出测试结果和期望结果；</li>
</ol>
<p>因此此时我们就需要一种新的测试框架来帮助我们编写测试，而 JUnit 则是专门针对 Java 而设计的一种标准单元测试框架。作为一个 Java 开发者，学习 JUnit 来进行测试是必备技能。</p>
<h3> 如何安装 JUnit</h3>
<ul>
<li><strong>本地安装</strong></li>
</ul>
<p>对于这种方法，我们只需要去下载 JUnit 最新的包，当前有 Junit4 和 Junit5 两个版本，可以根据自己的需要进行选择然后导入我们 IDE 的依赖文件即可，依赖文件下载地址如下：</p>
<blockquote>
<p>JUnit4：<a href="https://github.com/junit-team/junit4/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit4/releases/</a></p>
<p>JUnit5：<a href="https://github.com/junit-team/junit5/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit5/releases/</a></p>
</blockquote>
<p>以 IDEA 为例，依次打开 <code>File -&gt; Project Structure -&gt; Project Settings -&gt; Modules -&gt; Dependencies -&gt; 点击 + -&gt; Library... -&gt; Java</code>，最后找到下载的 JUnit 文件即可；</p>

<ul>
<li><strong>Maven 安装</strong></li>
</ul>
<p>当使用 Maven 之后，我们就能十分简单地安装 JUnit 了，只需要在项目的 <code>pom.xml</code> 配置文件中导入依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用 Junit 进行单元测试</h3>
<p>首先我们需要有一个主类，然后基于该类来进行测试，这里我们以简单的运算器为例；</p>
<p>创建一个简易计算机类 <code>Calc</code>，然后包括加法 <code>add</code> 和减法 <code>sub</code> 两个方法；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好上述主类之后，我们来进行测试，测试步骤如下；</p>
<ol>
<li><strong>定义测试类</strong></li>
</ol>
<p>定义测试类时，我们推荐定义类名时就是 <strong>主类 Test</strong> 的形式，比如我们上面的类为 <code>Calc</code>，我们要对其进行测试，则测试类的类名为 <code>CalcTest</code>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>定义测试方法</strong></li>
</ol>
<p>测试类定义好之后，我们就可以定义测试方法了，而定义测试方法时，我们也有几点建议；</p>
<ul>
<li>测试方法名是在主类方法名前加上 <code>test</code>，比如我们上边的方法为 <code>add</code>，则我们对应的测试方法名为 <code>testAdd</code>；</li>
<li>针对测试方法的返回值，因为我们只需要在方法内给出结果即可，不用再供其他人调用，所以建议返回值设置为 <code>void</code>；</li>
<li>针对测试方法的参数列表，由于我们主要还是针对传统建类调用方法测试的方法，所以此时最好是保持参数列表为空；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>@Test</code> 为注解，用来注释一个普通的方法为一条测试用例。<code>assertEquals</code> 方法用于断言两个值是否相等。</p>
<p>如果测试成功，则在 IDE 中会出现如下提示。</p>
<figure><figcaption></figcaption></figure>
<p>一般来讲，测试成功一般是绿色，而测试失败则是红色。</p>
<ul>
<li>测试成功的界面</li>
</ul>
<figure><figcaption></figcaption></figure>
<ul>
<li>测试失败的界面</li>
</ul>
<figure><figcaption></figcaption></figure>
<p>总结起来，我们针对一个方法的具体测试的步骤如下：</p>
<ol>
<li>首先是创建被测试类的对象；</li>
<li>然后调用被测试的方法；</li>
<li>最后加入断言，判断调用方法得到结果和实际的结果之间是否相同；</li>
</ol>
<h2> JUnit 常用注解</h2>
<p>由于现在主要用到的有 Junit4 和 Junit5 两个版本，而两者之间也是存在一些区别的，所以在这里给出两者中常用注解的一些差异。</p>
<p>下表中，给出了 Junit4 和 Junit5 中所共有功能的对应注解：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Junit4 注解</th>
<th>Junit5 注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Test</code></td>
<td><code>@Test</code></td>
<td style="text-align:left">标识一条测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Ignore</code></td>
<td><code>@Disable</code></td>
<td style="text-align:left">忽略的测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Before</code></td>
<td><code>@BeforeEach</code></td>
<td style="text-align:left">每一个测试方法之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@After</code></td>
<td><code>@AfterEach</code></td>
<td style="text-align:left">每一个测试方法之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@BefreClass</code></td>
<td><code>@BeforeAll</code></td>
<td style="text-align:left">所有测试开始之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@AfterClass</code></td>
<td><code>@AfterAll</code></td>
<td style="text-align:left">所有测试结果之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@Category</code></td>
<td><code>@Tag</code></td>
<td style="text-align:left">标记和过滤</td>
</tr>
</tbody>
</table>
<p>而相对于 Junit4，Junit5 也有做出升级，其特有的一些注解如下：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@TestFactory</code></td>
<td>测试工厂进行动态测试</td>
</tr>
<tr>
<td><code>@Nested</code></td>
<td>嵌套测试</td>
</tr>
<tr>
<td><code>@ExtendWith</code></td>
<td>注册自定义扩展</td>
</tr>
</tbody>
</table>
<h2> 常用断言方法</h2>
<p>而在测试中，我们经常用到断言方法。这些断言方法都来自于由继承了 <code>java.lang.Object</code> 的 <code>Assert</code> 类，用于提供编写测试。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>void assertArrayEquals([String message],expected array, result array)</code></td>
<td style="text-align:left">断言预期数组和结果数组相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertEquals([String message],expected value, actual value)</code></td>
<td style="text-align:left">断言两个值是否相等。类似于字符串比较使用的 <code>equals()</code> 方法</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotEquals(String message], first, second)</code></td>
<td style="text-align:left">查看两个对象是否不相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否不为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertSame(String message], expected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否相等。类似于使用 <code>==</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotSame(String message], unexpected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否不相等。类似于使用 <code>!=</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertTrue(String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>true</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertFalse([String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>false</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertThat([String message], actual, matcher)</code></td>
<td style="text-align:left">查看实际值是否满足指定的条件</td>
</tr>
<tr>
<td style="text-align:left"><code>fail()</code></td>
<td style="text-align:left">让测试失败</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，以上就是有关单元测试 Junit 的简单使用指南了。虽说大家现在还是有很多人在使用 Junit4，但如果你之前并未接触过 Junit，个人建议那就直接学习 Junit5 吧。当然了，Junit4 了解也是很有必要的，毕竟技多不压身，多一份技能少求人嘛。</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Lombok 安装及使用指南</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220719-lombok-install-and-usage.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220719-lombok-install-and-usage.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> Lombok 安装及使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Lombok 安装及使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
</div>
<h2> 简介</h2>
<p>为了减少写一些 <code>get/set/toString</code> 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构建工具，用于帮助开发人员消除 Java 中冗长样板代码。而我们开发人员所要做的，仅仅是添加几个 Lombok 中的注解，就可以替换掉原来的多行 <code>get/set/toString</code> 方法代码，既简洁也易于维护。下面我们就来看看，如何安装并使用这一工具。</p>
<h2> 安装 Lombok</h2>
<p>日常开发中，相信大多数人现在使用的都是 IDEA 这个 Java 神器了，如果你还在使用 Eclipse 或者 MyEclipse 等工具，那强烈推荐你去体验一把 IDEA，相信你一用上它就会爱上它的强大！下面我就以在 IDEA 中使用 Lombok 为例，看看如何安装并使用它。</p>
<p>在先前 IDEA 的版本中，Lombok 是需要通过插件来安装的，安装方法如下：依次进入<code>File -&gt; Settings -&gt; Plugins</code>，然后搜索 Lombok ，最后进行安装即可。而在新版本的 IDEA 中，Lombok 已经被集成到 IDEA 中，我们不用再去安装它就可以直接使用，可以说是十分方便了。</p>
<ul>
<li>老版本 IDEA 安装 Lombok</li>
</ul>

<ul>
<li>新版本中集成了 Lombok</li>
</ul>

<p>以上就是 Lombok 的安装过程了，是不是十分简单？那接下来我们就来看看，如何在我们的项目中使用 Lombok！</p>
<h2> Lombok 使用</h2>
<p>现在大家进行项目管理时用的工具大多应该都是 Maven，所以我们直接在需要使用 Lombok 的项目中加入 Lombok 编译支持，也就是在 <code>pom.xml</code> 文件中加入以下依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入相关依赖之后，接下来就是具体使用过程了。</p>
<h3> 具体使用</h3>
<p>在需要的实体类中引入相关注解即可，只不过注解不同它们所对应的功能也不同，而且同一个注解可能在不同位置的功能也不一样。如下图；</p>
<figure><figcaption></figcaption></figure>
<h3> 常用注解</h3>
<h4> @Data</h4>
<p>注解在 <strong>类</strong> 上：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Setter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Getter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @ToString</h4>
<p>注解在 <strong>类</strong> 上：生成所有参数的 <code>toString()</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Value</h4>
<p>注解在 <strong>类</strong> 上：生成 <code>get</code> 方法，以及 <code>equals、hashCode、toString</code> 方法，同时提供 <strong>含所有参数的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @AllArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NoArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>无参构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @RequiredArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：使用类中所有带 <code>@NonNull</code> 注解的或带有 <code>final</code> 修饰的成员变量生成对应构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NonNull</h4>
<p>注解在 <strong>属性</strong> 上，自动生成一个关于该参数的非空检查，若参数为 <code>null</code>，则抛出一个空指针异常，同时提供 <strong>默认构造方法</strong>，具体用法可以参照上面的例子；</p>
<h4> @EqualsAndHashCode</h4>
<p>注解在 <strong>类</strong> 上，生成 <code>equals、canEquals、hasnCode</code> 方法，同时会生成默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Cleanup</h4>
<p>注解在 <strong>局部变量</strong> 前，保证该变量代表的资源使用后自动关闭，默认调用资源的 <code>close()</code> 方法，若该资源有其它关闭方法，可用 <code>@Cleanup("方法名")</code> 来指定要调用的方法，同时提供 默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Synchronized</h4>
<p>注解在 <strong>类方法 或 实例方法</strong>：效果与 <code>synchronized</code> 关键字相同，区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是 <strong>类的</strong> <code>**class**</code> <strong>对象和</strong> <code>**this**</code> <strong>对象</strong>，而 <code>@Synchronized</code> 的锁对象分别是 <strong>私有静态</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code> <strong>和 私有</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code>，也可以自己指定锁对象，同时提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @SneakyThrows</h4>
<p>注解在 <strong>方法</strong> 上：将方法中的代码用 <code>try-catch</code> 语句包裹，捕获异常并在 <code>catch</code> 中用 <code>Lombok.sneakyThrow(e)</code> 将异常抛出，还可以用 <code>@SneakyThrows(Exception.class)</code> 的形式指定抛出异常类型，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Log</h4>
<p>注解在 <strong>类</strong> 上：主要用于我们记录日志信息，同时提供 <strong>默认构造方法</strong>。它封装了多个主流 <code>Log</code> 库，主要有如下几个；</p>
<ul>
<li>
<p><code>@Log</code></p>
</li>
<li>
<p><code>@Slf4j</code></p>
</li>
<li>
<p><code>Log4j</code></p>
</li>
<li>
<p><code>Log4j2</code></p>
</li>
</ul>
<h2> 总结</h2>
<p>以上就是关于 Lombok 的相关使用小技巧了，如果你还没有使用过它，那就赶紧去试试吧！</p>
<p>最后，创作不易，如果你觉得我的文章对你有所帮助，那就来个一键三连吧！</p>
<h2> 参考资料</h2>
<ol>
<li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener noreferrer">https://projectlombok.org/features/all</a></li>
</ol>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Fastjson V2 简单使用手册</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220720-fastjson2-quickstart.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220720-fastjson2-quickstart.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> Fastjson V2 简单使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Fastjson V2 简单使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>
<p><code>JSON</code> 基于纯文本，所以阅读起来也十分轻松，而且规范简单，容易处理，能够做到开箱即用，最最重要的是，<code>JSON</code> 和平台无关，所以能够作为不同系统间的传输格式协议。</p>
<p><code>JSON</code> 有 7 大基本数值，分别是：<code>false</code>、<code>null</code>、<code>true</code>、<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>。其结构也非常简单，只有两种结构：一个是 <strong>数组</strong>，一个是<strong>对象中的键值对集合</strong>。其中，对象用 <code>{}</code> 来表示，其内部是 <code>key:value</code> 形式，而数组则是用 <code>[]</code> 来表示，不同值之间用逗号 <code>,</code> 分隔。</p>
<p>以下就是一个 <code>JSON</code> 的简单示例：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Java 中，主流的 <code>JSON</code> 库只要有以下三个：</p>
<ol>
<li><code>Fastjson</code>：国内阿里巴巴公司所开发的 <code>JSON</code> 库，性能出众且快速。</li>
<li><code>Jackson</code>：<code>Spring</code> 默认的 <code>JSON</code> 库，社区十分活跃，更新迭代快。</li>
<li><code>Gson</code>：谷歌出品的 <code>JSON</code> 库，算是目前来说功能最全的 <code>JSON</code> 库了。</li>
</ol>
<p>得益于 <code>Fastjson</code> 的超高性能，国内的大部分公司都选择了阿里出品的 <code>Fastjson</code> 作为处理 <code>JSON</code> 的工具库。本文就来看看，<code>Fastjson</code> 的一些常用的使用技巧。</p>
<h2> 使用技巧</h2>
<p>首先，我们创建一个 <code>Maven</code> 项目，用来演示 <code>Fastjson</code> 的使用，也方便我们管理依赖。同时，这里选择 <code>Fastjson v2</code> 来作为今天的演示主角。</p>
<p>当然，首要的工作就是创建一个 <code>Maven</code> 项目，如果你还有点摸不着头脑，那可以移步先去看看前备知识：</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">Maven 教程：使用 IDEA 创建 Maven 项目</a></p>
</blockquote>
<p>当我们创建完成一个 <code>Maven</code> 项目之后，首要的工作就是在项目的 <code>pom.xml</code> 中添加 <code>Fastjson V2</code> 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建一个 <code>Hero</code> 类，方便后续过程中的使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Java 对象序列化为 JSON</h3>
<p>在我们的主类中创建一个 <code>Hero</code> 对象，然后利用 <code>toJSONString()</code> 方法将其转换为 <code>JSON</code> 字符串，可以看到结果正确转换了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 Java 对象</h3>
<p>假设有一个 <code>JSON</code> 字符串，我们想将其转换为 Java 对象，则可以使用 <code>parseObject()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 JSONObject</h3>
<p>将 <code>JSON</code> 解析为 <code>JSONObject</code> 的方法和将 <code>JSON</code> 转换为 Java 对象的方法类似，但是少了一个参数，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 JSONArray</h3>
<p>要将 <code>JSON</code> 解析为 <code>JSONArray</code>，此时可以使用 <code>parseArray()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是日常开发中常见的 4 种其他格式和 <code>JSON</code> 格式之间的转换过程了，其中，最常用的应该莫过于 <code>JSON</code> 和 Java 对象之间的相互转换了，一定要熟练掌握！关于 <code>Fastjson V2</code> 的简单使用就介绍到这里了，关于更多 <code>Fastjson V2</code> 的高级使用技巧，等待我们后续文章再见吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">深入浅出 Java 注解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220721-annotations.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220721-annotations.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 深入浅出 Java 注解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 深入浅出 Java 注解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>
<h2> 常用的预定义注解</h2>
<h3> <code>@Override</code></h3>
<p>一般是用在方法上，表示重写该父类的方法，比如我们使用最多的 <code>toString()</code> 方法，它是 <code>Object</code> 类的一个方法，而我们的写的类都是继承自 <code>Object</code> 类，所以我们自定义的所有类都是有 <code>toString()</code> 方法的。但是如果我们自定义类中的方法在父类中没有，则不能使用该注解，否则会导致无法编译通过。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> <code>@Deprecated</code></h3>
<p>一般用在方法之前，表示该方法已经过期，不建议再继续使用（但是仍然有效，只不过可能有更新的版本，推荐使用更新的版本）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> <code>@SuppressWarnings</code></h3>
<p>表示忽略警告信息，常用的值以及含义如下表：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>deprecation</code></td>
<td>使用了不赞成使用的类或方法时的警告</td>
</tr>
<tr>
<td><code>unchecked</code></td>
<td>使用了未经检查的转换时的警告</td>
</tr>
<tr>
<td><code>fallthrough</code></td>
<td>当 <code>switch</code> 程序块直接通往下一种情况而没有 <code>break</code> 时的警告</td>
</tr>
<tr>
<td><code>path</code></td>
<td>在类路径、源文件路径等中有不存在的路径时的警告</td>
</tr>
<tr>
<td><code>serial</code></td>
<td>当在可序列化的类上缺少 <code>serialVersionUID</code> 定义时的警告</td>
</tr>
<tr>
<td><code>finally</code></td>
<td>任何 <code>finally</code> 子句不能正常完成时的警告</td>
</tr>
<tr>
<td><code>rawtypes</code></td>
<td>泛型类型未指明</td>
</tr>
<tr>
<td><code>unused</code></td>
<td>引用定义了，但是没有被使用</td>
</tr>
<tr>
<td><code>all</code></td>
<td>关闭以上所有情况的警告</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 自定义注解</h2>
<h3> 格式</h3>
<p>我们可以使用 <code>@interface</code> 来自定义注解，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的示例如下，其中 <code>AnnoDemo</code> 代表着我们自定义注解的名称，而 <code>name()</code>、<code>age()</code>、<code>score()</code> 则分别表示自定义注解的三个属性，而且我们利用关键字 <code>default</code> 对每个属性都赋予了默认值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原理</h3>
<p>注解本质上相当于一个接口，它默认继承自 <code>java.lang.annotation.Annotation</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 参数</h3>
<p>注解的参数类似于无参的方法，通常我们推荐用 <code>default</code> 来设定一个默认值，对于方法的基本要求通常有如下几点：</p>
<ol>
<li>方法的返回值类型不可以是 <code>void</code>；</li>
<li>如果定义了方法，那么在使用时需要给方法进行赋值，赋值的规则如下：
<ol>
<li>若定义方法时，使用了关键字 <code>default</code> 对方法赋予了默认初始值，那么在使用注解时，可以不用对方法进行再次赋值；</li>
<li>若只有一个方法需要赋值，且方法名为 <code>value</code>，那么此时 <code>value</code> 可以省略，直接定义值即可；</li>
<li>数组赋值时，值需要用大括号 <code>{}</code> 包裹，若数组中只有一个值，那么此时 <code>{}</code> 可以省略；</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述例子中，<code>name()</code>、<code>age()</code>、<code>score()</code> 就是我们自定义注解的参数。而当我们要是用该注解时，则通过如下方式来对参数进行赋值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元注解</h2>
<h3> 定义</h3>
<p>所谓元注解(<code>meta annotation</code>)，就是可以用来修饰其他注解的注解。</p>
<h3> 常用的元注解</h3>
<ol>
<li><code>@Target</code></li>
</ol>
<p>描述注解所修饰的对象范围，其取值主要有如下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ElementType.TYPE</code></td>
<td>表示可以作用于类或接口</td>
</tr>
<tr>
<td><code>ElementType.FIELD</code></td>
<td>表示可以作用于成员变量</td>
</tr>
<tr>
<td><code>ElementType.METHOD</code></td>
<td>表示可以作用于方法</td>
</tr>
<tr>
<td><code>ElementType.CONSTRUCTOR</code></td>
<td>表示可以作用于构造方法</td>
</tr>
<tr>
<td><code>ElementType.PARAMETER</code></td>
<td>表示可以作用于方法的参数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>@Retention</code></li>
</ol>
<p>用于约束注解的生命周期，其取值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>RetentionPolicy.SOURCE</code></td>
<td style="text-align:left">表示在源代码文件中有效，注解将被编译器丢弃（注解信息仅保留在源码中，源码经编译后注解信息丢失，不再保留到字节码文件中）</td>
</tr>
<tr>
<td><code>RetentionPolicy.CLASS</code></td>
<td style="text-align:left">表示在字节码文件中有效，注解在字节码文件中可用，但会被 JVM 丢弃</td>
</tr>
<tr>
<td><code>RetentionPolicy.RUNTIME</code></td>
<td style="text-align:left">表示在运行时有效，此时可以通过反射机制来读取注解的信息</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><code>@Documented</code></li>
</ol>
<p>描述其他类型的注解是否被抽取到 API 文档中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><code>@Inherited</code></li>
</ol>
<p>这是一个标记注解，描述某个注解能够被子类继承，但是该元注解只适合已经配置了 <code>@Target(ElementType.TYPE)</code> 类型的自定义注解，而且仅针对于类的继承，而对于接口的继承则无效。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><code>@Repeatable</code></li>
</ol>
<p>该注解是从 JDK1.8 新引入的元注解，表示在同一位置能够重复相同的注解。在没有该注解之前，我们一般是无法在同一类型上使用相同注解的，但引入该注解后，我们就可以在同一类型上使用相同注解。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>@Repeatable</code> 配置自定义注解之后，我们就可以在某个类型声明处添加多个我们自定义的注解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>总结上述的知识点，我们将自定义注解的过程归纳为如下 3 步。</p>
<ol>
<li><strong>定义一个注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>添加参数并设置默认值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>利用元注解来配置我们的自定义注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用过程中，利用元注解配置自定义注解时，必须设置 <code>@Target</code> 和 <code>@Retention</code> 两个元注解，而且 <code>@Retention</code> 的值通常是设置为 <code>RetentionPolicy.RUNTIME</code>。</p>
<p>好了，以上就是我们注解的相关概念以及自定义注解所需要的掌握的一些知识点了，如果你觉得对你有所帮助，那就来一波点赞关注吧！<br>
<strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">流程控制知识大闯关</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221127-loop-in-action.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221127-loop-in-action.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 流程控制知识大闯关</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 流程控制知识大闯关</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
</div>
<hr>
<h2> 前言</h2>
<p>既然已经学习了 <code>Java</code> 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。</p>
<p>光学是没有用的，只有不断实践才能了解其中的真正含义。</p>
<h2> 闯关</h2>
<h3> 第一关：打印折纸的次数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>已知世界上最高的山峰是珠穆朗玛峰，它的高度是 <code>8844.43</code> 米，假设有一张足够大的纸，其厚度为 <code>0.1</code> 毫米，那么请问我要折叠多少次，才能将这张纸折成珠穆朗玛峰的高度？</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">折叠次数</th>
<th style="text-align:center">厚度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>0.1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>0.2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>0.4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>0.8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>……</code></td>
<td style="text-align:center"><code>……</code></td>
</tr>
</tbody>
</table>
<p>可以发现，纸张初始厚度为 <code>0.1</code> 毫米，而每次折叠之后，折叠后的纸张厚度都是未折叠前的 <code>2</code> 倍。而同时，我们事先是不清楚具体要叠多少次的，所以我们选择 <code>while</code> 来进行循环。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第二关：回文数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>假设给你一个整数 <code>x</code>，如果这个数是回文数，打印 <code>true</code>，否则打印 <code>false</code>。</p>
<p>回文数：指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>既然回文数的定义是正序和倒序读都是一样，那么我们就把这个数逆转，然后比较逆转的数和原来的数是否相等，如果相等，那么说明这个数是一个回文数，否则它就不是一个回文数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第三关：求商和余数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>给定两个整数，分别是被除数和除数，然后在不使用乘法、除法和 <code>%</code> 运算符的情况下，求出商和余数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>平时如果要求两数的商，那么可以使用 <code>/</code>，而要求两数的余数则可以使用 <code>%</code>。但现在已经规定不能使用这两个运算符，那么就只想另想办法。</p>
<p>我们知道，其实乘除法归根结底还是加减法的简化，所以我们可以利用减法来实现求两数的商和余数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第四关：逢七必过</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>游戏规则：从任意一个数字开始报数，当要报的数字是包含 <code>7</code> 或 <code>7</code> 的倍数时，都要说：过。</p>
<p>打印出 <code>1 - 100</code> 之间的满足逢七必过规则的数据。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>当一个数是 <code>7</code> 的倍数，那么这个数除以 <code>7</code> 的余数为 <code>0</code>。而如果这个数包含 <code>7</code>，那么这个数的个位或者十位是 <code>7</code>。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第五关：平方根</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>输入一个大于等于 <code>2</code> 的整数，计算并返回这个数的平方根，结果只保留整数部分。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>求一个数的平方根，通过遍历的方式，如果在不大于所给数的范围之内存在一个数的平方等于所给数，那么范围内的这个数就是所给数的平方根。而如果范围内存在一个数的平方刚好大于所给数，那么比这个数小 <code>1</code> 的数一定是所给数的平方根的整数部分，也就是我们所求的结果。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第六关：判断一个数是否为质数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>从键盘输入一个正整数，判断该数是否为质数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>所谓质数，就是指这个数只能被 <code>1</code> 和它本身整除，要注意 <code>1</code> 既不是质数也不是合数。</p>
<p>此时通过遍历，如果 <code>1</code> 到它之间存在一个数能被所给数整除，那么说明说给数不是一个质数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第七关：猜数小游戏</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>系统随机给出一个 <code>1 - 100</code> 之间的整数，然后用程序实现才出这个数字是多少。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>随机数需要用 <code>Random</code> 包，然后就是通过比较输入的数和生成的随机数大小，直到最后猜中。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于流程控制中关于 <code>for</code>、<code>while</code> 的知识测验了，你闯过了几关呢？</p>
<p>最后，文中所有代码已上传到 <code>Gitee</code>，有需要的朋友可以自取。</p>
<blockquote>
<p>传送门：<a href="https://gitee.com/cunyu1943/java-in-practice" target="_blank" rel="noopener noreferrer">https://gitee.com/cunyu1943/java-in-practice</a></p>
</blockquote>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">static 和 final 小课堂</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221203-oop-advance.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221203-oop-advance.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> static 和 final 小课堂</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>]]></summary>
    <content type="html"><![CDATA[<h1> static 和 final 小课堂</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>
<h2> static</h2>
<p>静态的意思，是 <code>Java</code> 中常用的修饰符，既可以用它来修饰成员变量，也可以用它来修饰成员方法。</p>
<h3> 静态变量</h3>
<p>静态变量就是用 <code>static</code> 来修饰的成员变量，最重要的特点就是一个类中的静态变量被类中的所有对象所共享。它不属于任何一个对象，而是属于类。其生命周期同类一样，共生共存，是优先于对象的。</p>
<p>和成员变量不同的是，成员变量只能通过新建对象，然后用对象名来进行调用。而静态变量不仅仅可以用这种方式，还可以直接通过类名来进行调用，而这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>成员变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>静态方法就是类中用 <code>static</code> 来修饰的成员方法，一般用来修饰公共的工具类或者测试类。</p>
<p>同样的，静态方法既可以用通过新建对象，然后用对象名来调用的方式，也可以直接通过类名来调用的方式，这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<p>使用 <code>static</code> 修饰方法或变量后，需要注意以下的小细节。</p>
<ul>
<li>一个静态方法中<strong>只能</strong>访问静态变量和其他的静态方法。而不能访问非静态的变量和方法。</li>
<li>但一个非静态方法一方面既可以访问静态变量，也可以访问非静态变量；另一方面，也既可以访问静态方法，也可以访问非静态方法。</li>
<li>不同于成员方法，静态方式中是不存在 <code>this</code> 关键字的。</li>
</ul>
<h3> 静态代码块</h3>
<p>在代码中用 <code>static{}</code> 包裹起来的代码叫做静态代码块，它会随着类的加载而加载，而且会自动触发，只执行一次，一般用来对一些数据初始化。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> final</h2>
<h3> 修饰变量</h3>
<p>用 <code>final</code> 修饰的变量叫做常量，说明它只能被赋值一次。</p>
<p>实际开发中，一般用常量来作为系统的配置信息，一方面既方便维护，另一方面又可以提高代码可读性。</p>
<p>对常量进行命名时，一般遵循以下的规范：</p>
<ul>
<li>如果是单个单词，那么将它全部大写即可。</li>
<li>如果是多个单词，那么将每个单词都大写，并且单词之间用下划线 <code>_</code> 隔开。</li>
</ul>
<p>此外，对于修饰的变量的类型不同，含义也是不一样的。</p>
<p>如果修饰的变量是一个基本类型，那么表示的是该变量存储的<strong>数据值</strong>不可改变。而如果修饰的变量是一个引用类型，则表示该变量存储的<strong>地址值</strong>不能改变，但是对象内部是可以发生变化的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰方法</h3>
<p>说明该方法是最终方法，不能再被重写。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰类</h3>
<p>说明这个类时最终类，不能够再被继承。也就是说，如果一个类被 <code>final</code> 所修饰，那么这个类不能作为其他任意类的福来。如果试图对一个用 <code>final</code> 修饰的类进行继承，则在编译期间可能会发生错误。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容到此就结束了，首先介绍了 <code>static</code> 用来修饰符变量和方法的应用场景，还额外补充了静态代码块相关的知识点。另外，我们也对 <code>final</code> 用来修饰变量、方法和类时的场景进行了回顾。</p>
<p>码字不易，如果本文对你所有帮助，那就来个一键三连吧！</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">抽象、接口和内部类</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221211-abstract.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221211-abstract.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 抽象、接口和内部类</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>]]></summary>
    <content type="html"><![CDATA[<h1> 抽象、接口和内部类</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是一个抽象方法定义的具体实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 抽象类</h2>
<h3> 定义</h3>
<p>知道了什么是抽象方法，那么抽象类就很简单了，如果我们发现一个类中存在着抽象方法，那么这个类一定要声明为抽象类。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>抽象类不能实例化。</li>
<li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类。</li>
<li>抽象类中可以有构造方法。</li>
<li>如果一个类的父类是抽象类，那么这个类要么是抽象类，要么重写父类中所有的抽象方法。</li>
</ol>
<h3> 作用</h3>
<p>在抽取共性时，如果无法确定方法体，此时就可以将该方法定义为抽象方法。然后强制让子类按照某种格式重写。</p>
<h2> 接口</h2>
<h3> 定义</h3>
<p>接口是一种规则，是对行为的抽象。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>接口和抽象类一样，不能被实例化。</li>
<li>接口和类之间是实现关系，通过关键字 <code>implements</code> 表示，实现格式为:</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>如果一个类实现了某个接口，那么这个类要么是抽象类，要么就得重写接口中所有的抽象方法。</li>
<li>不同于类单继承的特点，一个类是可以实现多个接口的。</li>
</ol>
<h3> 成员的特点</h3>
<ol>
<li><strong>成员变量</strong></li>
</ol>
<p>接口中，成员变量只能是常量，默认修饰符为 <code>public static final</code>。</p>
<ol start="2">
<li><strong>构造方法</strong></li>
</ol>
<p>接口中不存在构造方法。</p>
<ol start="3">
<li><strong>成员方法</strong></li>
</ol>
<p><code>JDK 7</code> 之前，只能是抽象方法，其默认修饰符为 <code>public abstract</code>。<code>JDK 8</code> 时，能够定义有方法体的方法，<code>JDK 9</code> 中，有带来了可以定义私有方法的特性。</p>
<h3> 默认方法</h3>
<p>自 <code>JDK 8</code> 之后，就允许在接口中定义默认方法，但是需要使用关键字 <code>default</code> 来修饰，从而解决接口升级的问题。</p>
<p>接口中的<strong>默认方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用默认方法时，需要注意：</p>
<ul>
<li>接口中的默认方法不是抽象方法，所以没有要求强制被重写。但如果要重写默认方法，重写时就需要去掉默认方法的关键字 <code>default</code>。</li>
<li>默认方法中的权限空置房 <code>public</code> 可以省略不写，但关键字 <code>default</code> 不能省略。</li>
<li>如果一个类实现了多个接口，而且着多个接口中还存在着重名的默认方法，那么该类就必须对重名的默认方法进行重写。</li>
</ul>
<p>以下是一个存在重名默认方法必须重写的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>除了默认方法，<code>JDK 8</code> 以后还可以在接口中定义静态方法，此时需要用关键字 <code>static</code> 修饰。</p>
<p>接口中 <strong>静态方法</strong> 的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在接口中使用静态方法时，需要注意：</p>
<ul>
<li>静态方法只能通过接口名调用，不能通过实现接口的类名或者对象名来调用。</li>
<li>权限控制符 <code>public</code> 可以省略，但关键字 <code>static</code> 不能省略。</li>
</ul>
<p>以下是一个在接口中定义静态方法和调用接口中静态方法的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 私有方法</h3>
<p>除了上述的静态方法和默认方法之外，<code>JDK 9</code> 中又引入接口中定义私有方法的特性。</p>
<p>其中，接口中定义私有方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两者的区别在于：静态的私有方法（带关键字 <code>static</code>）是为接口中的静态方法服务，而非静态的私有方法（不带关键字 <code>static</code>） 则是为接口中的默认方法服务。</p>
<p>以下是在接口中定义私有方法的实例：</p>
<ol>
<li><strong>私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 接口和类之间的关系</h3>
<ol>
<li><strong>类和类的关系</strong></li>
</ol>
<p>类与类之间只能存在继承关系，且只限于单继承，不能多继承，但是可以多层继承。</p>
<ol start="2">
<li><strong>类和接口的关系</strong></li>
</ol>
<p>类和接口之间是实现关系，既可以单实现，也可以多实现，还能在继承一个类的同时实现多个接口。</p>
<ol start="3">
<li><strong>接口和接口的关系</strong></li>
</ol>
<p>接口之间是继承关系，但不同于类和类之间的关系，接口之间既可以单继承，也可以多继承。</p>
<h2> 内部类</h2>
<h3> 定义</h3>
<p>顾名思义，所谓内部类就是定义在类中的类。比如说在 <code>A</code> 类的内部定义了一个 <code>B</code> 类，那么我们就说 <code>B</code> 是内部类。其中 <code>B</code> 类表示的是 <code>A</code> 类的一部分，而且 <code>B</code> 类单独存在时没有任何意义。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 特点</h3>
<p>如果一个类中定义了一个内部类，那么这个内部类就能够直接访问外部类的所有成员，包括私有成员。</p>
<p>但是，如果一个外部类要访问内部类的成员，那么此时就必须创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分类</h3>
<p><code>Java</code> 中，内部类主要分为以下四种：</p>
<ol>
<li><strong>成员内部类</strong></li>
<li><strong>静态内部类</strong></li>
<li><strong>局部内部类</strong></li>
<li><strong>匿名内部类</strong></li>
</ol>
<h4> 成员内部类</h4>
<p>写在成员位置，属于外部类的成员，其中成员内部类也能够被常用的修饰符 <code>public、private、protected、static</code> 等所修饰。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想获取成员内部类对象，可以通过以下两种方式：</p>
<ol>
<li>在外部类中编写方法，然后对外提供内部类的对象。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>直接创建，创建格式为：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 静态内部类</h4>
<p>静态内部类就是用关键字 <code>static</code> 修饰的内部类。静态内只能访问外部类中的静态变量和静态方法，如果要访问非静态的变量和方法就需要创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建静态内部类对象的格式为：<code>外部类名.内部类对象名 = new 外部类名.内部类名();</code></p>
<p>调用非静态方法的格式：先创建对象，然后用对象调用。</p>
<p>调用静态方法的格式：<code>外部类名.内部类名.方法名();</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 局部内部类</h4>
<p>如果一个类被定义在方法中，那么这个类就叫做局部内部类。外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。同时，这个内部类既可以访问外部类的成员，也可以访问方法中的局部变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 匿名内部类</h4>
<p>匿名内部类就是没有名字的内部类，也正因为名字，所以匿名内部类只能使用一次。而且使用匿名内部类还有个前提条件：必须继承一个父类或者实现一个接口。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 基础</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">《SQL 必知必会》全解析</title>
    <id>https://cunyu1943.github.io/java-tutorial/mysql-series/20220726-sql-in-10min.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/mysql-series/20220726-sql-in-10min.html"/>
    <updated>2023-09-15T00:12:02.000Z</updated>
    <summary type="html"><![CDATA[<h1> 《SQL 必知必会》全解析</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 《SQL 必知必会》全解析</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw</a></p>
</div>
<h2> 前言</h2>
<p>你是否还在烦恼 SQL 该从何学起，或者学了 SQL 想找个地方练练手？好巧不巧，最近在工作之余登上牛客，发现了牛客不知道啥时候上线了<a href="https://www.nowcoder.com/exam/oj/ta?tpId=298" target="_blank" rel="noopener noreferrer">SQL 必知必会</a>的练习题。</p>
<p>《SQL 必知必会》作为麻省理工学院、伊利诺伊大学等众多大学的参考教材，由浅入深地讲解了SQL的基本概念和语法。涉及数据的排序、过滤和分组，以及表、视图、联结、子查询、游标、存储过程和触发器等内容。实例丰富，方便查阅，可以说作为一个 CRUD BOY/GIRL 必读书目。</p>
<p>想着正好给它刷一遍，然后将自己刷题的一些想法总结下，于是有了今天这篇文章，希望能给需要的小伙伴一点点帮助。</p>
<h2> SQL1 从 Customers 表中检索所有的 ID</h2>
<h3> 描述</h3>
<p>现有表Customers如下：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
</tr>
<tr>
<td>B</td>
</tr>
<tr>
<td>C</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Customers 表中检索所有的 cust_id。</p>
<h3> 示例答案</h3>
<p>返回 cust_id 列的内容</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
</tr>
<tr>
<td>B</td>
</tr>
<tr>
<td>C</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察最简单的查询语句，因为 <code>Customers</code> 表中仅有 <code>cust_id</code> 一列，所以我们可以使用以下两种解答方式。</p>
<ul>
<li>第一种方式，选择特定列进行输出，这也是我们在工作中更加推荐使用的一种方式，将需要输出的列名全部描述出来。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>第二种方式，使用 <code>*</code> 对表中所有列进行输出，因为 <code>Customers</code> 表中仅有一列，所以可以使用该方式。但在日常工作中，就算查询结果列中包含了数据库表的所有字段，也不要直接使用 <code>*</code>.</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL2 检索并列出已订购产品的清单</h2>
<h3> 描述</h3>
<p>表OrderItems含有非空的列prod_id代表商品id，包含了所有已订购的商品（有些已被订购多次）。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a3</td>
</tr>
<tr>
<td>a4</td>
</tr>
<tr>
<td>a5</td>
</tr>
<tr>
<td>a6</td>
</tr>
<tr>
<td>a7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写SQL 语句，检索并列出所有已订购商品（prod_id）的去重后的清单。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对结果去重，可以使用 <code>DISTINCT</code> 关键字。使用时，在后边跟上需要去重的字段即可保证这些去重字段的查询结果不重复。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外还可以使用 <code>GROUP BY</code> 关键字，改关键字支持在去重的同时，同步返回其他字段的信息。</p>
<div class="language-SQL line-numbers-mode" data-ext="SQL"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL3 检索所有列</h2>
<h3> 描述</h3>
<p>现在有 Customers 表（表中含有列 cust_id 代表客户 id，cust_name 代表客户姓名） 。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>需要编写 SQL语句，检索所有列。</p>
<h3> 示例结果</h3>
<p>返回所有列 cust_id 和 cust_name。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>类似于第一题，最简单的查询语句，只不过相比第一题多了一列，所以同样可以使用两种方式。</p>
<ul>
<li>使用 <code>*</code> 表示所有列。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>将需要打印出的列详细列出。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL4 检索顾客名称并且排序</h2>
<h3> 描述</h3>
<p>有表 Customers，cust_id 代表客户 id，cust_name 代表客户姓名。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果。</p>
<h3> 示例结果</h3>
<p>返回客户姓名 cust_name</p>
<table>
<thead>
<tr>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>tony</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>hex</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>andy</td>
</tr>
<tr>
<td>an</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对数据库中的数据进行排序，需要使用关键字 <code>ORDER BY</code>。此外，默认情况下，SQL 中列的结果默认是正序排列的，即实际情况下以下语句执行结果是一样的。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而要对查询结果逆序输出，则需要用到 <code>DESC</code> 关键字，表示逆序输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL5 对顾客ID和日期排序</h2>
<h3> 描述</h3>
<p>有 Orders 表</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>aaaa</td>
<td>2021-01-01 00:00:00</td>
</tr>
<tr>
<td>andy</td>
<td>bbbb</td>
<td>2021-01-01 12:00:00</td>
</tr>
<tr>
<td>bob</td>
<td>cccc</td>
<td>2021-01-10 12:00:00</td>
</tr>
<tr>
<td>dick</td>
<td>dddd</td>
<td>2021-01-11 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</p>
<h3> 示例答案</h3>
<p>返回 2 列，cust_id 和 order_num</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>bbbb</td>
</tr>
<tr>
<td>andy</td>
<td>aaaa</td>
</tr>
<tr>
<td>bob</td>
<td>cccc</td>
</tr>
<tr>
<td>dick</td>
<td>dddd</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>首先根据 cust_id 进行排列，andy 在 bob 和 dick 前，再根据 order_date 进行排列，订单号 bbbb 的订单时间是 "2021-01-01 12:00:00" 大于订单号 aaaa 的时间 "2021-01-01 00:00:00"</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对列进行排序，则需要使用 <code>ORDER BY</code> 关键字，此外就是正序和倒序输出。</p>
<ul>
<li><code>ASC</code>：正序输出，也是默认输出的情况。</li>
<li><code>DESC</code>：倒序输出。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL6 按照数量和价格排序</h2>
<h3> 描述</h3>
<p>假设有一个 OrderItems 表</p>
<table>
<thead>
<tr>
<th>quantity</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>100</td>
</tr>
<tr>
<td>10</td>
<td>1003</td>
</tr>
<tr>
<td>2</td>
<td>500</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，显示 OrderItems 表中的数量（quantity）和价格（item_price），并按数量由多到少、价格由高到低排序。</p>
<h3> 示例答案</h3>
<p>返回 quantity 和 item_price</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>同样是查询语句，要对查询结果进行排序，则需要使用  <code>ORDER BY</code> 关键字，最后则是需要注意是正序还是倒序，题目中由多到少和由高到低都是属于倒序，所以需要使用关键字 <code>DESC</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL7 检查SQL语句</h2>
<h3> 描述</h3>
<p>有 Vendors 表</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>海底捞</td>
</tr>
<tr>
<td>小龙坎</td>
</tr>
<tr>
<td>大龙燚</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>下面的 SQL 语句有问题吗？尝试将它改正确，使之能够正确运行，并且返回结果根据 vend_name 逆序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例展示</h3>
<p>返回 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>海底捞</td>
</tr>
<tr>
<td>小龙坎</td>
</tr>
<tr>
<td>大龙燚</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要存在两处错误，首先是选取需要展示的列 <code>vend_name</code> 后，后面并没有跟上需要展示的其他列，所以此处多了一个 <code>,</code>。另外，对选取列进行排序使用的关键字是 <code>ORDER BY</code>，而题目中只是给出了 <code>ORDER</code>，忘记了 <code>BY</code>，所以会导致查询结果错误。针对这两处错误改正后，得到的正确的语句如下所示。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL8 返回固定价格的产品</h2>
<h3> 描述</h3>
<p>有表 Products</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
<td>9.49</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
<td>600</td>
</tr>
<tr>
<td>b0018</td>
<td>gucci t-shirts</td>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。</p>
<h3> 示例结果</h3>
<p>返回 prod_id 和 prod_name</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>查询符合指定条件的数据，可以使用关键字 <code>WHERE</code> 对条件进行限制，然后就是对条件的实现，这里可以使用两种方式。</p>
<p>第一种，直接利用 <code>=</code>，既然条件是需要价格为 <code>9.49</code> 美元的产品，则我们将价格列设置为 <code>prod_price = 9.49</code> 即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种，除开 <code>=</code> 之外，我们也可以使用 <code>in</code>，表示价格只要在指定的数据之中，我们将价格列设置为 <code>in (9.49)</code> 即可，但是此时要注意不要忽略 <code>()</code>，否则语句会报错。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL9 返回更高价格的产品</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
<td>9.49</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
<td>600</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。</p>
<h3> 示例答案</h3>
<p>返回 prod_id 商品 id 和 prod_name 商品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询语句，查询格式：</p>
<blockquote>
<p>SELECT [列名] FROM [表名] WHERE 判断条件 …</p>
</blockquote>
<p>既然判断条件是要产品价格不低于 9 美元，则产品需要大于等于 9 美元，可以将产品价格设置为 <code>prod_price &gt;= 9</code> 即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们还可以将 <code>&gt;=</code> 拆分为两个条件，一个是 <code>prod_price &gt; 9</code>，而另一个则是 <code>prod_price = 9</code>，然后满足任一条件即可，则利用关键字 <code>OR</code> 将两个条件进行连接。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL10 返回产品并且按照价格排序</h2>
<h3> 描述</h3>
<p>有 Products 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>a0019</td>
<td>sockets</td>
<td>4</td>
</tr>
<tr>
<td>b0019</td>
<td>coffee</td>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序</p>
<h3> 示例结果</h3>
<p>返回商品名称 prod_name 和商品价格 prod_price</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>sockets</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>注：不需要考虑商品价格相同的情况</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询，通过将条件拆分为 <code>prod_price &gt;= 3</code> 和 <code>prod_price &lt;= 6</code> 两个条件，然后利用关键字  <code>AND</code> 将两个条件串联起来，同时满足两个条件的数据则进行输出。然后要对价格进行排序，则可以使用关键字 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除开上述将两个条件拆分开然后利用关键字 <code>AND</code> 串联起来之外，其实 SQL 还提供了关键字 <code>BETWEEN … AND …</code>，可以将满足介于两者之间的数进行筛选输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL11 返回更多的产品</h2>
<h3> 描述</h3>
<p>OrderItems 表含有：订单号 order_num，quantity 产品数量</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 OrderItems 表中检索出所有不同且不重复的订单号（order_num），其中每个订单都要包含 100 个或更多的产品。</p>
<h3> 示例结果</h3>
<p>返回订单号列 order_num</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a4</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要筛选指定列中不重复的数据，则需要使用关键字 <code>DISTINCT</code>。此外，要筛选出满足指定条件的数据，则需要关键字 <code>WHERE</code>，然后根据题意，可以将条件写到一起，也可以将条件进行拆分后用关键字 <code>OR</code> 并联。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL12 检索供应商名称</h2>
<h3> 描述</h3>
<p>Vendors 表有字段供应商名称（vend_name）、供应商国家（vend_country）、供应商州（vend_state）</p>
<table>
<thead>
<tr>
<th>vend_name</th>
<th>vend_country</th>
<th>vend_state</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
<td>USA</td>
<td>CA</td>
</tr>
<tr>
<td>vivo</td>
<td>CNA</td>
<td>shenzhen</td>
</tr>
<tr>
<td>huawei</td>
<td>CNA</td>
<td>xian</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个 CA）</p>
<h3> 示例答案</h3>
<p>返回供应商名称 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>既然要筛选出加利福利亚州的提供商，则首要条件是满足 <code>vend_state = 'CA'</code>。另外，除开美国有加利福利亚州之外，有可能其他国家也有加利福利亚州，所以需要对国家也进行限定，设置条件为 <code>vend_country = 'USA'</code>。然后用关键字  <code>AND</code> 将条件串联，满足这两个条件的数据则进行输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL13 检索并列出已订购产品的清单</h2>
<h3> 描述</h3>
<p>OrderItems 表包含了所有已订购的产品（有些已被订购多次）。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>BR03</td>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>BR017</td>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>BR017</td>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，查找所有订购了数量至少 100 个的 BR01、BR02 或 BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量（quantity），并按产品 ID 和数量进行过滤。</p>
<h3> 示例答案</h3>
<p>返回商品 id prod_id、订单 order_num、数量 quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>BR01</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>BR02</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>BR02</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>BR03</td>
<td>1121</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回的结果中，数量满足大于等于 100，且满足 prod_id 是 "BR01"，“BR02”，“BR03" 中的任意一个。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多条件查询，将两个条件进行拆分，然后将两个查询条件进行串联即可。</p>
<p>数量满足大于等于 100，则设置为 <code>quantyty &gt;= 100</code>。</p>
<p>产品 id 满足 "BR01"，“BR02”，“BR03” 中的任意一个，则使用关键字 <code>in</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL14 返回所有价格在 3 美元到 6 美元之间的产品的名称和价格</h2>
<h3> 描述</h3>
<p>有表 Products</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>a0019</td>
<td>sockets</td>
<td>4</td>
</tr>
<tr>
<td>b0019</td>
<td>coffee</td>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），使用 AND 操作符，然后按价格对结果进行升序排序</p>
<h3> 示例结果</h3>
<p>返回商品名称 prod_name 和商品价格 prod_price</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>sockets</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>注：不需要考虑价格相同时的排序问题</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>两个条件，首先是价格介于 3 到 6 美元，则可以使用关键字 <code>BETWEEN … AND …</code>。另外，按价格升序排序，则使用关键字 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>题目中指定需要使用关键字 <code>AND</code>，则需要将价格条件替换成 <code>prod_price &gt;= 3</code> 和 <code>prod_price &lt;= 6</code> 两个条件，然后将其串联。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL15 纠错2</h2>
<h2> 描述</h2>
<p>供应商表 Vendors 有字段供应商名称 vend_name、供应商国家 vend_country、供应商省份 vend_state</p>
<table>
<thead>
<tr>
<th>vend_name</th>
<th>vend_country</th>
<th>vend_state</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
<td>USA</td>
<td>CA</td>
</tr>
<tr>
<td>vivo</td>
<td>CNA</td>
<td>shenzhen</td>
</tr>
<tr>
<td>huawei</td>
<td>CNA</td>
<td>xian</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修改正确下面 sql，使之正确返回</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>结果返回 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要是一处错误，搞错了关键字 <code>WHERE</code> 和 <code>ORDER BY</code> 的先后顺序，正确的 SQL 语句格式为：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL16 检索产品名称和描述（一）</h2>
<h3> 描述</h3>
<p>Products表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中包含 toy 一词的产品名称</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>模糊查询，主要产品描述中含有 <code>toy</code> 一词，就需要返回这时候需要用到模糊查询关键字 <code>LIKE</code> 然后是通配符，题目中并没有明确说明 <code>toy</code> 前后包含多少个字符，所以用 <code>%</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL17 检索产品名称和描述（二）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中未出现 toy 一词的产品，最后按”产品名称“对结果进行排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>这题就是 16 题的反面，那我们只要对 16 的查询语句进行取反即可，此时添加一个关键字 <code>NOT</code> 即可。此外，还需要按“产品名称”对结果排序，使用关键字 <code>ORDER BY</code> 即可。但是需要注意 <code>WHERE</code> 和 <code>ORDER BY</code> 关键字的先后顺序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL18 检索产品名称和描述（三）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego carrots toy</td>
</tr>
</tbody>
</table>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>d0019</td>
<td>lego carrots toy</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目中明确要求使用 <code>LIKE</code> 和 <code>AND</code> 关键字，那么可以将条件拆分为两个模糊查询，一个是描述中含有 <code>toy</code> 的产品，一个是描述中含有 <code>carrots</code> 的产品，然后利用关键字 <code>AND</code> 将两个条件串联就可以了。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL19 检索产品名称和描述（四）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy carrots</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>d0019</td>
<td>lego toy carrots</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目中已经进行了提示，要查询产品描述中以先后顺序同时出现 <code>toy</code> 和 <code>carrots</code> 的产品，但没有说他们两者之间存在的字符以及 <code>toy</code> 前面和 <code>carrots</code> 后边所包含的字符，那么需要使用通配符 <code>%</code> ，得到最终的结果  <code>%toy%carrots%</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL20 别名</h2>
<h3> 描述</h3>
<p>别名的常见用法是在检索出的结果中重命名表的列字段（为了符合特定的报表要求或客户需求）。有表 Vendors 代表供应商信息，vend_id 供应商 id、vend_name 供应商名称、vend_address 供应商地址、vend_city 供应商城市。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>vend_name</th>
<th>vend_address</th>
<th>vend_city</th>
</tr>
</thead>
<tbody>
<tr>
<td>a001</td>
<td>tencent cloud</td>
<td>address1</td>
<td>shenzhen</td>
</tr>
<tr>
<td>a002</td>
<td>huawei cloud</td>
<td>address2</td>
<td>dongguan</td>
</tr>
<tr>
<td>a003</td>
<td>aliyun cloud</td>
<td>address3</td>
<td>hangzhou</td>
</tr>
<tr>
<td>a003</td>
<td>netease cloud</td>
<td>address4</td>
<td>guangzhou</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Vendors 表中检索 vend_id、vend_name、vend_address 和 vend_city，将 vend_name 重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address 重命名为 vaddress，按供应商名称对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回 vend_id 供应商 id、vname 供应商名称、vaddress 供应商地址、vcity 供应商城市。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>vname</th>
<th>vaddress</th>
<th>vcity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a003</td>
<td>aliyun cloud</td>
<td>address3</td>
<td>hangzhou</td>
</tr>
<tr>
<td>a002</td>
<td>huawei cloud</td>
<td>address2</td>
<td>dongguan</td>
</tr>
<tr>
<td>a003</td>
<td>netease cloud</td>
<td>address4</td>
<td>guangzhou</td>
</tr>
<tr>
<td>a001</td>
<td>tencent cloud</td>
<td>address1</td>
<td>shenzhen</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>SQL 中，要对列取别名，需要用到关键字 <code>AS</code>，使用格式如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过对题目中的三个字段取别名，然后使用 <code>ORDER BY</code> 关键字，按照供应商名称列对结果进行升序排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，<code>AS</code> 其实可要可不要，你也可以写成以下的方式，在列名之后跟上别名即可，实现的效果和上面语句一致。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL21 打折</h2>
<h3> 描述</h3>
<p>我们的示例商店正在进行打折促销，所有产品均降价 10%。Products 表包含 prod_id产品 id、prod_price 产品价格</p>
<h3> 问题</h3>
<p>编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%（即 10%的折扣）</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id、产品价格 prod_price、销售价格 sale_price</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>sale_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>9.49</td>
<td>8.541</td>
</tr>
<tr>
<td>a0019</td>
<td>600</td>
<td>540</td>
</tr>
<tr>
<td>b0019</td>
<td>1000</td>
<td>900</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>sale_price 的价格是 prod_price 的 90%</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>此题考察了取别名以及如何在 SQL 中直接使用算数运算，<code>sale_price</code> 不是表中的数据，而是通过 <code>prod_price</code> 而来，所以需要通过关键字 <code>AS</code> 来进行取别名，最终的实现语句如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL22 顾客登录名</h2>
<h3> 描述</h3>
<p>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。</p>
<p>给出 Customers 表 如下：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_city</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>Andy Li</td>
<td>Andy Li</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a2</td>
<td>Ben Liu</td>
<td>Ben Liu</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a3</td>
<td>Tony Dai</td>
<td>Tony Dai</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a4</td>
<td>Tom Chen</td>
<td>Tom Chen</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a5</td>
<td>An Li</td>
<td>An Li</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a6</td>
<td>Lee Chen</td>
<td>Lee Chen</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a7</td>
<td>Hex Liu</td>
<td>Hex Liu</td>
<td>Oak Park</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回顾客 ID（cust_id）、顾客名称（cust_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。提示：需要使用函数、拼接和别名。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id，顾客名称 cust_name，顾客登录名 user_login</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>user_login</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>Andy Li</td>
<td>ANOAK</td>
</tr>
<tr>
<td>a2</td>
<td>Ben Liu</td>
<td>BEOAK</td>
</tr>
<tr>
<td>a3</td>
<td>Tony Dai</td>
<td>TOOAK</td>
</tr>
<tr>
<td>a4</td>
<td>Tom Chen</td>
<td>TOOAK</td>
</tr>
<tr>
<td>a5</td>
<td>An Li</td>
<td>ANOAK</td>
</tr>
<tr>
<td>a6</td>
<td>Lee Chen</td>
<td>LEOAK</td>
</tr>
<tr>
<td>a7</td>
<td>Hex Liu</td>
<td>HEOAK</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如，登录名是 ANOAK（Andy Li，居住在 Oak Park）</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意以及示例结果，可以看到登录名全是大写，所以需要用到函数 <code>upper()</code>，然后需要将顾客联系人前两个字符和所在城市的前三个字符相拼接，则需要用到函数 <code>concat()</code>，再接着就是需要从 <code>cust_name</code> 和 <code>cust_city</code> 中截取字符串，则需要用到 <code>substring()</code>，最后则是通过将字符串拼接转换之后取别名为 <code>user_login</code>，需要用到关键字 <code>AS</code>。以上提到的三个函数用法如下：</p>
<ul>
<li><code>upper(字符串)</code>：将字符串中所有字符转换为大写。</li>
<li><code>substring(字符串, 起始位置, 截取的字符数)</code>，需要注意的是起始位置是从 1 开始的。</li>
<li><code>concat(字符串 1, 字符串 2, 字符串 3, …)</code></li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL23 返回 2020 年 1 月的所有订单的订单号和订单日期</h2>
<h3> 描述</h3>
<p>Orders 订单表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>2020-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>2020-01-02 00:00:00</td>
</tr>
<tr>
<td>a0003</td>
<td>2020-01-01 12:00:00</td>
</tr>
<tr>
<td>a0004</td>
<td>2020-02-01 00:00:00</td>
</tr>
<tr>
<td>a0005</td>
<td>2020-03-01 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号（order_num）和订单日期（order_date），并按订单日期升序排序</p>
<p>【示例结果】</p>
<p>返回订单号 order_num，和 order_date 订单时间</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>2020-01-01 00:00:00</td>
</tr>
<tr>
<td>a0003</td>
<td>2020-01-01 12:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>2020-01-02 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>a0001、a0002、a0003 时间属于 2020 年 1 月</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>其实我们依然可以将本题看做模糊查询，只要订单日期满足对应条件即可，可以使用关键字 <code>WHERE … LIKE …</code> 来实现。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，SQL 中也提供了对于日期的操作函数 <code>date_format()</code>，用于返回日期的一部分。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，我们还可以单独提取出日期中的年份和月份，然后将两个条件串联，筛选出同时满足两个条件的数据。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL24 确定已售出产品的总数</h2>
<h3> 描述</h3>
<p>OrderItems 表代表售出的产品，quantity 代表售出商品数量。</p>
<table>
<thead>
<tr>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
</tr>
<tr>
<td>100</td>
</tr>
<tr>
<td>1000</td>
</tr>
<tr>
<td>10001</td>
</tr>
<tr>
<td>2</td>
</tr>
<tr>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，确定已售出产品的总数。</p>
<h3> 示例结果</h3>
<p>返回 items_ordered 列名，表示已售出商品的总数。</p>
<table>
<thead>
<tr>
<th>items_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>11128</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察求和函数以及取别名两个知识点，取别名需要关键字 <code>AS</code>，而且可要可不要。</p>
<p>而求和函数则是 <code>SUM(列名)</code> ，它会统计列中所有记录的综合。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL25 确定已售出产品项 BR01 的总数</h2>
<h3> 描述</h3>
<p>OrderItems 表代表售出的产品，quantity 代表售出商品数量，产品项为 prod_id。</p>
<table>
<thead>
<tr>
<th>quantity</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>AR01</td>
</tr>
<tr>
<td>100</td>
<td>AR10</td>
</tr>
<tr>
<td>1000</td>
<td>BR01</td>
</tr>
<tr>
<td>10001</td>
<td>BR010</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修改创建的语句，确定已售出产品项（prod_id）为 "BR01" 的总数。</p>
<h3> 示例结果</h3>
<p>返回商品项已订购订单数</p>
<table>
<thead>
<tr>
<th>items_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>已订购商品 BR01 的数量 quantity 为 1000。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察的知识点：</p>
<ul>
<li>求和函数：<code>SUM()</code></li>
<li>取别名：<code>AS</code></li>
<li>条件查询：<code>WHERE</code></li>
</ul>
<p>需要注意的是 SQL 语句中关键字的先后顺序，否则可能会导致语句出错。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL26 确定 Products 表中价格不超过 10 美元的最贵产品的价格</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9.49</td>
</tr>
<tr>
<td>600</td>
</tr>
<tr>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为 max_price。</p>
<h3> 示例结果</h3>
<p>返回 max_price</p>
<table>
<thead>
<tr>
<th>max_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9.49</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回十元以下最高价格 max_price。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察知识点：</p>
<ul>
<li><strong>条件查询</strong>：使用关键字 <code>WHERE</code>，将产品价格不超过 10 美元的产品筛选出来。</li>
<li><strong>MAX(列名)</strong>：找出列中的最大值。</li>
<li><strong>取别名</strong>：通过关键字 <code>AS</code> 将不超过 10 美元的产品中价格最高的记录筛选出来后重命名。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL27 返回每个订单号各有多少行数</h2>
<h3> 描述</h3>
<p>OrderItems 表包含每个订单的每个产品</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a004</td>
</tr>
<tr>
<td>a007</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回每个订单号（order_num）各有多少行数（order_lines），并按 order_lines 对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回订单号 order_num 和对应订单号的行数 order_lines</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_lines</th>
</tr>
</thead>
<tbody>
<tr>
<td>a004</td>
<td>1</td>
</tr>
<tr>
<td>a007</td>
<td>1</td>
</tr>
<tr>
<td>a002</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>订单号 a002 有 3 行订单记录也是最多的订单号故排在最后一位返回，相同订单行数的订单无需过多处理。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察知识点：</p>
<ul>
<li><code>COUNT(列名)</code>：返回指定列的值的数目。</li>
<li><code>AS</code>：取别名。</li>
<li><code>GROUP BY</code>：根据指定列或者表达式的值将行进行分组。</li>
<li><code>ORDER BY</code>：根据尾随的列名进行排序，<code>ASC</code> 表示正序，也是默认排序，<code>DESC</code> 表示倒序。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL28 每个供应商成本最低的产品</h2>
<h3> 描述</h3>
<p>有Products表，含有字段prod_price代表产品价格，vend_id代表供应商id</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>100</td>
</tr>
<tr>
<td>a0019</td>
<td>0.1</td>
</tr>
<tr>
<td>b0019</td>
<td>1000</td>
</tr>
<tr>
<td>b0019</td>
<td>6980</td>
</tr>
<tr>
<td>b0019</td>
<td>20</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品（使用 Products 表中的 prod_price），然后从最低成本到最高成本对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回供应商 id vend_id 和对应供应商成本最低的产品 cheapest_item。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>cheapest_item</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0019</td>
<td>0.1</td>
</tr>
<tr>
<td>b0019</td>
<td>20</td>
</tr>
<tr>
<td>a0011</td>
<td>100</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如 b0019 成本最低的价格是 20，且最后根据成本价格排序返回依次是 a0019、b0019、a0011。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要找出各个供应商中成本最低的产品，则需要通过关键字 <code>GROUP BY</code> 来进行分组，然后借助函数 <code>MIN()</code> 找出 <code>prod_price</code> 中最小的值，接着取别名为 <code>cheapest_item</code>，最后则是按照找出的各供应商中的成本最低产品 <code>cheapest_item</code> 利用关键字 <code>ORDER BY</code> 进行升序排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL29 返回订单数量总和不小于100的所有订单的订单号</h2>
<h3> 描述</h3>
<p>OrderItems 代表订单商品表，包括：订单号order_num 和订单数量 quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>请编写 SQL 语句，返回订单数量总和不小于 100 的所有订单号，最后结果按照订单号升序排序。</p>
<h3> 示例结果</h3>
<p>返回 order_num 订单号。</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a4</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>订单号 a1、a2、a4 的 quantity 总和都大于等于 100，按顺序为 a1、a2、a4。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询，只是此时不再是过滤指定的行，而是需要过滤分组，所以这个时候不能再使用关键字 <code>WHERE</code>，而是需要使用到关键字 <code>HAVING</code>，它通常是和关键字 <code>GROUP BY</code> 连用。另外需要注意的是各个关键字之间的先后顺序，先是 <code>GROUP BY</code>，紧接着是 <code>HAVING</code>，最后才是 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL30 计算总和</h2>
<h3> 描述</h3>
<p>OrderItems表代表订单信息，包括字段：订单号 order_num 和 item_price 商品售出价格、quantity 商品数量。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，根据订单号聚合，返回订单总价不小于 1000 的所有订单号，最后的结果按订单号进行升序排序。</p>
<p>提示：总价 = item_price 乘以 quantity</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>order_num</th>
<th>total_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>1050</td>
</tr>
<tr>
<td>a2</td>
<td>1319</td>
</tr>
<tr>
<td>a4</td>
<td>2242</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>以上几题都已经将知识点讲过了，这题只是综合运用，主要涉及如下：</p>
<ul>
<li><code>SUM()</code>：对同一产品的总价求和。</li>
<li><code>AS</code>：取别名。</li>
<li><code>GROUP BY</code>：按照列进行分组。</li>
<li><code>HAVING</code>：与 <code>GROUP BY</code> 联合使用从而实现条件过滤。</li>
<li><code>ORDER BY</code>：按列进行排序。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL31 纠错3</h2>
<h3> 描述</h3>
<p>OrderItems 表含有 order_num 订单号</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a004</td>
</tr>
<tr>
<td>a007</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将下面代码修改正确后执行</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>返回订单号 order_num 和出现的次数 items</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>items</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>由于订单号 a002 出现了三次，所以返回3</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>最主要的错误在于 <code>GROUP BY</code> 后边跟着的是统计结果，其次在于 <code>HAVING</code> 后边的 <code>COUNT()</code> 其实是可以不用再次计算的，可以直接利用已经统计出的结果。第二处不算错误，但是改了之后能提高 SQL 语句所执行的效率。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL32 返回购买价格为 10 美元或以上产品的顾客列表</h2>
<h3> 描述</h3>
<p>OrderItems 表示订单商品表，含有字段订单号：order_num、订单价格：item_price；Orders 表代表订单信息表，含有顾客 id：cust_id 和订单号：order_num</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
</tr>
</tbody>
</table>
<p>Orders表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a4</td>
<td>cust2</td>
</tr>
<tr>
<td>a5</td>
<td>cust5</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a7</td>
<td>cust7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用子查询，返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。<br>
注意：你需要使用 OrderItems 表查找匹配的订单号（order_num），然后使用Order 表检索这些匹配订单的顾客 ID（cust_id）。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>cust10 顾客下单的订单为 a1，a1 的售出价格大于等于 10</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目已经提示使用子查询，则先用最简单的条件查询从 <code>OrderItems</code> 表中找出订单价格不低于 10 美元的订单，接着从筛选出的结果中再次筛选出对应订单的顾客 id，需要注意的一点是对顾客 id 去重，需要使用到关键字 <code>DISTINCT</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL33 确定哪些订单购买了 prod_id 为 BR01 的产品（一）</h2>
<h3> 描述</h3>
<p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 "BR01" 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和定单日期 order_date。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 "BR01" 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的下单时间分别为 2022-01-01 00:00:00 和 2022-01-01 00:01:00</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>使用子查询，先从 <code>OrderItems</code> 表中查询出 <code>prod_id</code> 为 <code>BR01</code> 的记录 ，然后再从 <code>Orders</code> 表中筛选出 <code>order_num</code> 为子查询结果集中的记录，最后按照 <code>order_date</code> 进行排序即可。主要是通过对条件查询语句的嵌套使用，从而实现多重筛选。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL34 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</h2>
<h3> 描述</h3>
<p>你想知道订购 BR01 产品的日期，有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期order_date；Customers表含有 cust_email 顾客邮件和 cust_id 顾客 id</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p>
<p>提示：这涉及 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id。</p>
<h3> 示例结果</h3>
<p>返回顾客 email cust_email</p>
<table>
<thead>
<tr>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的顾客email cust_email 分别是：cust10@cust.com 、cust1@cust.com</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多重条件查询的过滤，只要细心一点，就能做出来。拆分为 3 个条件查询后，从内向外依次查询，然后基于上一层查询结果再做条件过滤。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL35 返回每个顾客不同订单的总金额</h2>
<h3> 描述</h3>
<p>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。</p>
<p>OrderItems 表代表订单信息，OrderItems 表有订单号：order_num 和商品售出价格：item_price、商品数量：quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a0002</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<p>Orders 表订单号：order_num、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL语句，返回顾客 ID（Orders 表中的 cust_id），并使用子查询返回total_ordered 以便返回每个顾客的订单总数，将结果按金额从大到小排序。</p>
<p>提示：你之前已经使用 SUM() 计算订单总数。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和 total_order 下单总额</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>total_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust2</td>
<td>2242</td>
</tr>
<tr>
<td>cust1</td>
<td>1300</td>
</tr>
<tr>
<td>cust10</td>
<td>1050</td>
</tr>
<tr>
<td>cust2</td>
<td>104</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>cust2 在 Orders 里面的订单 a0013，a0013 的售出价格是 2 售出数量是 1121，总额是 2242，最后返回 cust2 的支付总额是 2242。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目要求利用子查询，则实现如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外我们可以使用内连接方式：利用 <code>SUM()</code> 函数进行求和，求出每个顾客的订单总数，然后通过条件查询找出两个表中 <code>order_num</code> 相同记录的并通过 <code>cust_id</code> 分组，最后则是将求和的订单总数倒序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1> </h1>
<h2> SQL36 从 Products 表中检索所有的产品名称以及对应的销售总数</h2>
<h3> 描述</h3>
<p>Products 表中检索所有的产品名称：prod_name、产品 id：prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
</tbody>
</table>
<p>OrderItems 代表订单商品表，订单产品：prod_id、售出数量：quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>1100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索所有的产品名称（prod_name），以及名为 quant_sold 的计算列，其中包含所售产品的总数（在 OrderItems 表上使用子查询和 SUM(quantity) 检索）。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和产品售出数量总和</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>quant_sold</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>105</td>
</tr>
<tr>
<td>sockets</td>
<td>1300</td>
</tr>
<tr>
<td>coffee</td>
<td>1121</td>
</tr>
<tr>
<td>cola</td>
<td>34</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>prod_name 是 cola 的 prod_id 为 a0003，quantity 总量为 34，返回结果无需排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>解法类似于 35 题，同样主要有两种方式，第一种是通过内连接的方式。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种则是通过子查询的方式。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL37 返回顾客名称和相关订单号</h2>
<h3> 描述</h3>
<p>Customers 表有字段顾客名称 cust_name、顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders订单信息表，含有字段order_num订单号、cust_id顾客id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 Customers 表中的顾客名称（cust_name）和Orders 表中的相关订单号（order_num），并按顾客名称再按订单号对结果进行升序排序。你可以尝试用两个不同的写法，一个使用简单的等联结语法，另外一个使用 INNER JOIN。</p>
<h3> 示例结果</h3>
<p>cust_name 代表用户名称 cust_name 和订单号 order_num。</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>顾客名称为 an 的 cust_id 为 cust221，他的订单号为 a5。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察 SQL 中的 <code>INNER JOIN</code>，其实也就是 <code>JOIN</code>。主要用于筛选出两个表中的交集部分。</p>
<figure><figcaption>图片标题</figcaption></figure>
<p>使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，此题使用 <code>INNER JOIN</code> 实现的方法如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，也可以使用最常用的 <code>WHERE</code> 来进行联接。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL38 返回顾客名称和相关订单号以及每个订单的总价</h2>
<h3> 描述</h3>
<p>Customers 表有字段，顾客名称：cust_name、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders 订单信息表，含有字段，订单号：order_num、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>OrderItems 表有字段，商品订单号：order_num、商品数量：quantity、商品价格：item_price</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>1000</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
<td>10</td>
</tr>
<tr>
<td>a3</td>
<td>10</td>
<td>15</td>
</tr>
<tr>
<td>a4</td>
<td>25</td>
<td>50</td>
</tr>
<tr>
<td>a5</td>
<td>15</td>
<td>25</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>除了返回顾客名称和订单号，返回 Customers 表中的顾客名称（cust_name）和Orders 表中的相关订单号（order_num），添加第三列 OrderTotal，其中包含每个订单的总价，并按顾客名称再按订单号对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name、订单号 order_num、订单总额 OrderTotal</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
<th>OrderTotal</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
<td>375</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
<td>10000</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
<td>2000</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
<td>49</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
<td>1250</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
<td>150</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如顾客名称 cust_name 为 an 的顾客的订单 a5 的订单总额为 quantity*item_price = 15 * 25 = 375，最后以 cust_name 和 order_num 来进行升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>SQL 语句先后顺序：</p>
<div class="language-SQl line-numbers-mode" data-ext="SQl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>书写 SQL 语句时，一定要遵守以上关键字的先后顺序。然后根据题意将各个条件组合即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL39 确定哪些订单购买了 prod_id 为 BR01 的产品（二）</h2>
<h3> 描述</h3>
<p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客id和订单日期 order_date</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 "BR01" 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p>
<p>提示：这一次使用联结和简单的等联结语法。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和定单日期 order_date</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的下单时间分别为 2022-01-01 00:00:00 和 2022-01-01 00:01:00</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多个条件的组合查询，先查询出产品 id 为 <code>BR01</code> 的 <code>order_num</code>，然后从查询出的结果列中再去筛选出 <code>Orders</code> 表中 <code>order_num</code>，最后则是正序排序即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL40 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（二）</h2>
<h3> 描述</h3>
<p>有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date；Customers 表含有 cust_email 顾客邮件和 cust_id 顾客 id</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>返回购买 prod_id 为BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p>
<p>提示：涉及到 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id，但是必须使用 INNER JOIN 语法。</p>
<h3> 示例结果</h3>
<p>返回顾客 email cust_email</p>
<table>
<thead>
<tr>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的顾客 email cust_email 分别是：cust10@cust.com 、cust1@cust.com</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多个内联接的组合，先是筛选出 <code>OrderItems</code> 和 <code>Orders</code> 表中 <code>order_num</code> 相同的列，然后根据筛选出的结果列中的 <code>cust_id</code> 从 <code>Customers</code> 表中找对应的顾客信息即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL41 确定最佳顾客的另一种方式（二）</h2>
<h3> 描述</h3>
<p>OrderItems 表代表订单信息，确定最佳顾客的另一种方式是看他们花了多少钱，OrderItems 表有订单号 order_num 和 item_price 商品售出价格、quantity 商品数量</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<p>Orders 表含有字段 order_num 订单号、cust_id 顾客 id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>顾客表 Customers 有字段 cust_id 客户 id、cust_name 客户姓名</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回订单总价不小于 1000 的客户名称和总额（OrderItems 表中的 order_num）。</p>
<p>提示：需要计算总和（item_price 乘以 quantity）。按总额对结果进行排序，请使用INNER JOIN 语法。</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>total_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>1050</td>
</tr>
<tr>
<td>ben</td>
<td>1319</td>
</tr>
<tr>
<td>tom</td>
<td>2242</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>总额（item_price 乘以 quantity）大于等于 1000 的订单号，例如 a2 对应的顾客id 为 cust1，cust1 的顾客名称 cust_name 是 ben，最后返回 ben 作为 order_num a2 的quantity * item_price 总和的结果 1319。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察的知识点：</p>
<ul>
<li>取别名：<code>AS</code> 关键字</li>
<li>求和：<code>SUM()</code></li>
<li><code>GROUP BY</code> 和 <code>HAVING</code> 同时使用用于过滤结果</li>
<li>排序：<code>ORDER BY</code> 关键字</li>
</ul>
<p>主要考察对多个 SQL 关键字的运用，同时还需要注意 SQL 中关键字的前后顺序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL42 检索每个顾客的名称和所有的订单号（一）</h2>
<h3> 描述</h3>
<p>Customers 表代表顾客信息含有顾客 id cust_id 和顾客名称 cust_name</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders 表代表订单信息含有订单号 order_num 和顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 INNER JOIN 编写 SQL 语句，检索每个顾客的名称（Customers 表中的  cust_name）和所有的订单号（Orders 表中的 order_num），最后根据顾客姓名 cust_name 升序返回。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察 <code>INNER JOIN</code> 的用法，其使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现本题，利用上述语法填入对应字段名和表名即可，最后则是关键字 <code>ORDER BY</code> 的使用。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL43 检索每个顾客的名称和所有的订单号（二）</h2>
<h3> 描述</h3>
<p>Orders 表代表订单信息含有订单号 order_num和顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息含有顾客 id cust_id 和 顾客名称 cust_name</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
<tr>
<td>cust40</td>
<td>ace</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>检索每个顾客的名称（Customers 表中的 cust_name）和所有的订单号（Orders 表中的 order_num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名 cust_name 升序返回。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>ace</td>
<td>NULL</td>
</tr>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>基于两张表，返回订单号 a1 的顾客名称 andy 等人，没有下单的顾客 ace 也统计了进来。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意，主要以 <code>Customers</code> 表中的列为主，然后取 <code>Customers</code> 和 <code>Orders</code> 中的交集。对于 <code>Orders</code> 表中不存在的列则取值 <code>null</code>。所以可以使用外联结中的 <code>LEFT JION</code>，其使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>套用上述语法，填入对应表和列名即可实现，最后则是再加入简单的排序即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL44 返回产品名称和与之相关的订单号</h2>
<h3> 描述</h3>
<p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
<tr>
<td>a0023</td>
<td>soda</td>
</tr>
</tbody>
</table>
<p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>a105</td>
</tr>
<tr>
<td>a0002</td>
<td>a1100</td>
</tr>
<tr>
<td>a0002</td>
<td>a200</td>
</tr>
<tr>
<td>a0013</td>
<td>a1121</td>
</tr>
<tr>
<td>a0003</td>
<td>a10</td>
</tr>
<tr>
<td>a0003</td>
<td>a19</td>
</tr>
<tr>
<td>a0003</td>
<td>a5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和与之相关的订单号（order_num）的列表，并按照产品名称升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>coffee</td>
<td>a1121</td>
</tr>
<tr>
<td>cola</td>
<td>a5</td>
</tr>
<tr>
<td>cola</td>
<td>a19</td>
</tr>
<tr>
<td>cola</td>
<td>a10</td>
</tr>
<tr>
<td>egg</td>
<td>a105</td>
</tr>
<tr>
<td>sockets</td>
<td>a200</td>
</tr>
<tr>
<td>sockets</td>
<td>a1100</td>
</tr>
<tr>
<td>soda</td>
<td>NULL</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回产品和对应实际支付订单的订单号，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>此题解法类似于 43 题，主要使用 <code>OUTER JOIN</code> 中的左联结 <code>LEFT JOIN</code>，主要清除相关语法，然后套用填入表名和列名即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL45 返回产品名称和每一项产品的总订单数</h2>
<h3> 描述</h3>
<p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
<tr>
<td>a0023</td>
<td>soda</td>
</tr>
</tbody>
</table>
<p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>a105</td>
</tr>
<tr>
<td>a0002</td>
<td>a1100</td>
</tr>
<tr>
<td>a0002</td>
<td>a200</td>
</tr>
<tr>
<td>a0013</td>
<td>a1121</td>
</tr>
<tr>
<td>a0003</td>
<td>a10</td>
</tr>
<tr>
<td>a0003</td>
<td>a19</td>
</tr>
<tr>
<td>a0003</td>
<td>a5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和每一项产品的总订单数（不是订单号），并按产品名称升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和订单号订单数 orders</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>orders</th>
</tr>
</thead>
<tbody>
<tr>
<td>coffee</td>
<td>1</td>
</tr>
<tr>
<td>cola</td>
<td>3</td>
</tr>
<tr>
<td>egg</td>
<td>1</td>
</tr>
<tr>
<td>sockets</td>
<td>2</td>
</tr>
<tr>
<td>soda</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回产品和产品对应的实际支付的订单数，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察的知识点仍然是外连接，只不过加入了 <code>COUNT()</code> 函数用于分组统计，最后同样是简单的排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL46 列出供应商及其可供产品的数量</h2>
<h3> 描述</h3>
<p>有 Vendors 表含有 vend_id 供应商id.</p>
<table>
<thead>
<tr>
<th>vend_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
</tr>
<tr>
<td>a0013</td>
</tr>
<tr>
<td>a0003</td>
</tr>
<tr>
<td>a0010</td>
</tr>
</tbody>
</table>
<p>有 Products 表含有供应商 id 和供应产品 id</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>prod_id_iphone</td>
</tr>
<tr>
<td>a00113</td>
<td>prod_id_tea</td>
</tr>
<tr>
<td>a0003</td>
<td>prod_id_vivo phone</td>
</tr>
<tr>
<td>a0010</td>
<td>prod_id_huawei phone</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>列出供应商（Vendors 表中的 vend_id）及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT() 聚合函数来计算 Products 表中每种产品的数量，最后根据 vend_id 升序排序。</p>
<p>注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它。</p>
<h3> 示例结果</h3>
<p>返回供应商 id 和对应供应商供应的产品的个数</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>1</td>
</tr>
<tr>
<td>a0013</td>
<td>0</td>
</tr>
<tr>
<td>a0003</td>
<td>1</td>
</tr>
<tr>
<td>a0010</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>供应商 a00013 供应的商品不在 Products 表中所以为 0，其他供应商供应的产品为 1 个。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>利用 <code>COUNT()</code> 函数对 <code>Vendors</code> 中的 <code>vend_id</code> 分组并统计。</p>
<p>另外则是考察 <code>LEFT JOIN</code>，即题目中所说的 <code>OUTER JOIN</code>，其具体使用语法如下。</p>
<figure><figcaption>图片标题</figcaption></figure>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL47 将两个 SELECT 语句结合起来（一）</h2>
<h3> 描述</h3>
<p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id和产品数量 quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id a0002 因为数量等于 100 被选取返回；BNBG 因为是以 BNBG 开头的产品所以返回；最后以产品 id 进行排序返回。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>依照题意，其实我们利用一个 <code>SELECT</code> 然后搭配 <code>WHERE</code> 条件查询就能将满足题意的纪律筛选出来。但是为了练习关键字 <code>UNION</code> 的使用，可以将两个条件查询语句分开，然后用 <code>UNION</code> 联接起来，最后则是按照 <code>prod_id</code> 正序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL48 将两个 SELECT 语句结合起来（二）</h2>
<h3> 描述</h3>
<p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。<br>
注意：这次仅使用单个 SELECT 语句。</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id 和产品数量 quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id a0002 因为数量等于 100 被选取返回；BNBG 因为是以 BNBG 开头的产品所以返回；最后以产品 id 进行排序返回。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意仅使用单个 <code>SELECT</code> 语句，那就直接利用 <code>WHERE</code> 条件查询，然后将两个条件利用连接符 <code>OR</code> 并联即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL49 组合 Products 表中的产品名称和 Customers 表中的顾客名称</h2>
<h3> 描述</h3>
<p>Products 表含有字段 prod_name 代表产品名称</p>
<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>flower</td>
</tr>
<tr>
<td>rice</td>
</tr>
<tr>
<td>ring</td>
</tr>
<tr>
<td>umbrella</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_name 代表顾客名称</p>
<table>
<thead>
<tr>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>tony</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>an</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，组合 Products 表中的产品名称（prod_name）和 Customers 表中的顾客名称（cust_name）并返回，然后按产品名称对结果进行升序排序。</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
</tr>
<tr>
<td>andy</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>flower</td>
</tr>
<tr>
<td>hex</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>rice</td>
</tr>
<tr>
<td>ring</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>tony</td>
</tr>
<tr>
<td>umbrella</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>拼接 cust_name 和 prod_name 并根据结果升序排序</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>同样考察 <code>UNION</code> 操作符，通过将两个 <code>SELECT</code> 语句的结果合并起来即可。</p>
<p>这里需要注意的是得出的结果是 <code>prod_name</code>，所以需要注意两个 <code>SELECT</code> 语句的先后顺序，再然后就是需要对查询出的记录按照 <code>prod_name</code> 正序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL50 纠错4</h2>
<h3> 描述</h3>
<p>表 Customers 含有字段 cust_name 顾客名、cust_contact 顾客联系方式、cust_state 顾客州、cust_email 顾客 email</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_state</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>8695192</td>
<td>MI</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td>8695193</td>
<td>MI</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td>8695194</td>
<td>IL</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修正下面错误的 SQL</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>返回顾客名称：cust_name、顾客联系方式：cust_contact、顾客 email：cust_email</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust1</td>
<td>8695193</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust10</td>
<td>8695192</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td>8695194</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回住在 "IL" 和 "MI" 的顾客信息，最后根据顾客名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要有两处错误，第一是 <code>UNION</code> 前多加了 <code>;</code>，<code>;</code> 表示一条 SQL 的结束，加在此处不适合。</p>
<p>第二则是只主要对 <code>cust_name</code> 排序一次即可，放在 <code>UNION</code> 前的 <code>ORDER BY</code> 关键字显然位置不对。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 致谢</h2>
<p>感谢<a href="http://nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a>提供的题目列表。</p>
<h2> ⏳ 联系</h2>
<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>
<p>扫一扫，探索另一个全新的世界。</p>
<figure><img src="/contact/wechatpublic.png" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <category term="MySQL 教程"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">MySQL 教程</title>
    <id>https://cunyu1943.github.io/java-tutorial/mysql-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/mysql-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Hexo+Github Pages博客搭建教程</title>
    <id>https://cunyu1943.github.io/tutorial/blog-series/20220401-hexo.html</id>
    <link href="https://cunyu1943.github.io/tutorial/blog-series/20220401-hexo.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Hexo+Github Pages博客搭建教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>现在市面上已经有许多博客了，比如 CSDN、掘金、博客园、简书等等。我们可以直接在上面发表内容，而且交互比较人性化，而且也能被搜索引擎检索到。但是总归是别人的平台，经常会受限，因此我们就希望能有自己的博客。之前也尝试过搭建过不同的博客类型，折腾了不少工作，最终决定定型，采用 Hexo + Github Pages 的方式。今天就带大家一起来搭建自己的博客。由于是采用 Hexo + Github Pages 的方式，所以都是免费的，只是需要有一定的动手能力！</p>]]></summary>
    <content type="html"><![CDATA[<h1> Hexo+Github Pages博客搭建教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>现在市面上已经有许多博客了，比如 CSDN、掘金、博客园、简书等等。我们可以直接在上面发表内容，而且交互比较人性化，而且也能被搜索引擎检索到。但是总归是别人的平台，经常会受限，因此我们就希望能有自己的博客。之前也尝试过搭建过不同的博客类型，折腾了不少工作，最终决定定型，采用 Hexo + Github Pages 的方式。今天就带大家一起来搭建自己的博客。由于是采用 Hexo + Github Pages 的方式，所以都是免费的，只是需要有一定的动手能力！</p>
<h2> Hexo 简介</h2>
<p><a href="https://hexo.io/zh-cn/docs/" title="Hexo" target="_blank" rel="noopener noreferrer">Hexo</a> 是一个快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们只需要通过 Markdown 语法写好自己的博客内容，然后通过简单的命令就能够将生成的网页上传到 Github，然后大家都可以来访问你的网页了。既方便了自己，也给了自己一个展示自己成果的平台，是不是一举两得。</p>
<h2> 搭建步骤</h2>
<p>搭建之前，需要做一些准备工作，首先需要确保你的电脑上已经上安装好了 Git 和 Node.Js，然后才能开始安装 Hexo，那么首先我们先来看看如何准备这这些环境。</p>
<h3> Git</h3>
<h4> 安装</h4>
<ol>
<li><strong>Window</strong>：<a href="https://git-scm.com/download/win" title="下载并安装" target="_blank" rel="noopener noreferrer">下载并安装</a></li>
<li><strong>macOS</strong>：<a href="https://sourceforge.net/projects/git-osx-installer/" title="下载并安装" target="_blank" rel="noopener noreferrer">下载并安装</a></li>
<li><strong>Linux（Debian，Ubuntu）</strong>：<code>sudo apt-get install git-core</code></li>
<li><strong>Linux（Fedora、RedHat、CentOS）</strong>：<code>sudo yum install git-core</code></li>
</ol>
<h4> 设置</h4>
<p>安装成功后，将 git 与 GitHub 账号绑定，右键打开 Git Bash，然后设置配置信息：</p>
<figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我的配置就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可，一般不需要设置密码；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我生成秘钥的命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>一般执行上述命令之后，会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，前者是我们私有的，而后者则是对外开放的。接着找到生成的 <code>.ssh</code> 的文件夹中的 id_rsa.pub 密钥，将内容复制；</p>
<figure><figcaption></figcaption></figure>
<p>然后打开 <a href="https://github.com/settings/keys" title="GitHub-Settings-Keys" target="_blank" rel="noopener noreferrer">GitHub-Settings-Keys</a> 页面，创建一个新的 SSH key，填写 <code>Title</code> 和 <code>Key</code>，<code>Title</code> 可以随意，而 <code>Key</code> 的内容则是我们刚才复制的 <code>id_rsa.pub</code> 中的内容，最后点击 <code>Add SSH key</code> 即可；</p>
<figure><figcaption></figcaption></figure>
<h3> Node.Js 安装</h3>
<h4> 安装</h4>
<p>去官网下载最新的稳定版 <a href="https://nodejs.org/en/" title="Node.JS" target="_blank" rel="noopener noreferrer">Node.JS</a> ，一般推荐 64 位（大家应该现在用的电脑基本都是 64 位的吧），安装的话很简单，基本就是下一步下一步点击就好了。如果还是不知道如何安装，可以参考我的另一篇博客：<a href="https://blog.csdn.net/github_39655029/article/details/105397485" title="Windows 下 Node.js 的安装（多图版）" target="_blank" rel="noopener noreferrer">Windows 下 Node.js 的安装（多图版）</a></p>
<h4> 验证</h4>
<p>安装完成后，要查看我们是否安装成功，可以打开命令提示符（<code>Win + R</code>），输入 <code>cmd</code> 打开控制台，输入如下命令，如果出现对应版本号，说明安装成功了；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 设置</h4>
<p>由于下载包是从国外服务器，所以速度较慢，因此我们推荐用阿里的国内镜像进行设置；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Hexo 安装</h3>
<p>在你的硬盘上找个地儿，用来存放你的博客文件，比如我的就在 <code>D:personalFiles/github/blog</code>，这个文件夹你可以根据自己的喜好来设置。然后从命令台进入当前文件夹，接下来就是安装过程了；</p>
<ol>
<li>首先安装 Hexo</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>新建一个文件夹用于存放你的博客，比如我的是 <code>blog</code>，然后进入该文件夹，并用如下命令进行初始化并安装必备组件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li>初始化后，目录结构如下；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>然后输入如下命令，然后在浏览器中打开 <code>http://localhost:4000</code>；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以看到如下的界面，不过我的是经过修改过的，所以和你的会不一样。</p>
<figure><figcaption></figcaption></figure>
<h3> Github 个人仓库</h3>
<p>完成上面的步骤之后，我们就能在本地进行预览了，不过我们如果想要发布到网上供别人看的话，那就得利用 Github Pages 的功能了，下边就来介绍如何结合 Hexo + Github Pages ，将我们的博客推送到网上去，方便大家在任何地方访问！</p>
<blockquote>
<p>首先你得有个 GitHub 账号，如果没有的，请出门 <a href="https://github.com/" title="右转" target="_blank" rel="noopener noreferrer">右转</a> 先去注册个账号；</p>
</blockquote>
<p>有了账号之后，新建一个仓库，而且得确保你的仓库是 <code>public</code>，你要搞个 <code>private</code>，谁能访问的了？？？同时，仓库名一定要是：</p>
<blockquote>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
</blockquote>
<p>这个用户名建议不要太复杂，但是又要能体现你个人特点，因为后续让别人访问你的博客时，就要通过 <code>https://用户名.github.io</code> 这个域名来访问。比如我的用户名是 <strong>cunyu1943</strong>，所以我的仓库就是 <a href="https://github.com/cunyu1943/cunyu1943.github.io" title="cunyu1943.github.io" target="_blank" rel="noopener noreferrer">cunyu1943.github.io</a>：</p>
<figure><figcaption></figcaption></figure>
<h3> 部署到 Github</h3>
<p>完成上面的步骤后，你应该能在本地进行预览了，接下来就是推送网站到 Github Pages 了，然后我们就能被其他人访问了。</p>
<p>只需要在我们刚才的博客根目录中的站点配置文件 <code>_config.yml</code> ，设置为你的个人仓库名即可：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 GitHub 仓库了，然后在浏览器中访问：</p>
<blockquote>
<p><a href="https://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">https://用户名.github.io</a></p>
</blockquote>
<p>比如我的博客 <a href="https://cunyu1943.github.io/" title="村雨遥的博客" target="_blank" rel="noopener noreferrer">村雨遥的博客</a>；</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Gitee 个人仓库</h3>
<p>上面说完部署到 Github，接下来就说说怎么部署到 Gitee，老规矩，首先你得需要一个 Gitee 账号，如果没有的，出门 <a href="https://gitee.com/" title="右转" target="_blank" rel="noopener noreferrer">右转</a> 先去注册个账号。</p>
<p>然后新建一个仓库，同样有几点需要注意的：</p>
<ol>
<li>保证你的仓库是 <code>public</code>；</li>
<li>仓库名是 <strong>你的用户名</strong>，这一点和 Github 略有不同，不需要是 <strong><a href="http://xn--eqr924avxo.gitee.io" target="_blank" rel="noopener noreferrer">用户名.gitee.io</a></strong>；</li>
</ol>
<p>比如我的用户名是 <code>cunyu1943</code>，所以我的仓库名就是 <a href="https://gitee.com/cunyu1943/cunyu1943" title="cunyu1943" target="_blank" rel="noopener noreferrer">cunyu1943</a>。</p>
<figure><figcaption></figcaption></figure>
<h3> 部署到 Gitee</h3>
<p>完成上面的步骤后，你应该能在本地进行预览了，接下来就是推送网站到 Gitee Pages 了，然后我们就能被其他人访问了。这里需要注意的是，Gitee Pages 不像 Github Pages 会自动更新，它需要你每次推送后，去更新一下，如果想要自动更新，就需要开通 Gitee 的会员。</p>
<p>然后需要在我们刚才的博客根目录中的站点配置文件 <code>_config.yml</code> ，设置为你的个人仓库名即可：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 Gitee 仓库了，去手动更新 Gitee Pages 后，然后在浏览器中访问：</p>
<blockquote>
<p><a href="https://xn--eqr924avxo.gitee.io" target="_blank" rel="noopener noreferrer">https://用户名.gitee.io</a></p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h2> 如何写新博客并推送到远程</h2>
<p>通过上面的步骤后，你的博客应该就已经搭建成功，而且能通过 <code>https://用户名.github.io</code> 的方式进行访问了。接下来如果我们要发一篇新的博客内容，又应该怎么办呢？接下来就详细讲一下如何操作。</p>
<ol>
<li>首先进入博客所在文件夹，然后右键进入控制台，用如下命令进行创建新的文章；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>接着在 <code>blog/source/_posts</code> 目录下应该就会有创建好的以文章标题名命名的 Markdown 文件；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>接着打开该文件，编写你自己想要的内容即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>接着在控制台使用如下命令，将其推送到远程 GitHub 仓库，等过一会儿之后，访问即可看到刚才推送的新文章了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 如何绑定自定义域名</h2>
<p>通过 <code>用户名.github.io</code> 的方式来访问总归是有些不方便，如果我们需要自己的个性域名，又应该如何设置呢？那么在此之前，你需要有一个已经备案好的域名，如果没有的话，请到阿里云、腾讯云等场商购买自己的域名，然后通过该平台备案，然后添加两条解析记录，以我的腾讯云为例：</p>
<figure><figcaption></figcaption></figure>
<p>备好案并设置解析之后，在 Github 的博客项目中，依次点击 <code>Settings-&gt;Pages</code>，然后在 <code>Custom domain</code> 添加你的域名即可，最后 <code>Save</code> 即可，此时你的博客根目录下应该会多一个 <code>CNAME</code> 的文件，然后你就可以通过自己的域名来访问你的博客了。</p>
<p>当然，有时候可能经过上面的设置后，博客根目录下不会出现名为 <code>CNAME</code> 的文件，如果没有，我们可以通过在本地博客 <code>/source</code> 目录下手动建立一个 <code>CNAME</code> 文件（无后缀），然后把你的域名填进去并保存，最后依次执行如下命令将设置上传到 Github 即可 ~</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>比如我的域名为 <code>cunyu1943.site</code>，通过设置之后，我们就可以通过 <a href="https://cunyu1943.site" target="_blank" rel="noopener noreferrer">https://cunyu1943.site</a> 来访问我的博客了。</p>
<figure><figcaption></figcaption></figure>
<h2> 美化</h2>
<p>经过上面的设置之后，我们只是得到了一个简单地博客，如果你也想让你的博客像我的一样酷（zhuang）炫（bi），就要用到主题了，我采用的主题是 <a href="https://github.com/blinkfox/hexo-theme-matery" title="hexo-theme-matery" target="_blank" rel="noopener noreferrer">hexo-theme-matery</a>，一个基于材料设计和响应式设计而成的主题，而且关于如何设置它也有十分详细的文档，如果存在不懂得问题，还可以及时提交 issue，作者回复也十分及时。</p>
<p>如果你不想过于折腾，那么你完成上面的步骤之后，也可以直接采用我的博客源代码，然后把里边的个人配置改一下就 ok 了，我的博客源码地址：<a href="https://github.com/cunyu1943/hexo-theme-matery-personal" title="cunyu1943/hexo-theme-matery-personal" target="_blank" rel="noopener noreferrer">hexo-theme-matery-personal</a></p>
<p>大家直接下载下来，然后把 <code>node_modules.zip</code> 进行解压，然后修改其中的部分配置（也就是你的 Github、网名啥的呀个人信息），主要是修改根目录下的 <code>_config.yml</code> 和 <code>_config.hexo-theme-matery.yml</code>，然后就可以直接写博客了。当然，前提是你把环境啥的都搭建好了。</p>
<p>PS：我对于配置文件中的某些关键信息进行了隐藏，比如 <code>gitalk</code>、<code>gitment</code>、<code>Valine</code>、<code>baiduAnalytics</code> 等，这些需要你自己去注册并获取自己的信息，请记得修改，否则可能导致失败。</p>
<h2> 总结</h2>
<p>至此，我们的博客就搭建完成了，是不是很简单，赶紧去试试吧！</p>
<p>对于文中不清楚的地方，欢迎留言，我会在看到的第一时间回复你！</p>
]]></content>
    <category term="博客搭建"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">博客搭建</title>
    <id>https://cunyu1943.github.io/tutorial/blog-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/blog-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">网站访问太慢，不妨试试这些 CDN</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20220729-cdn.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20220729-cdn.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 网站访问太慢，不妨试试这些 CDN</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 网站访问太慢，不妨试试这些 CDN</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ</a></p>
</div>
<h2> 前言</h2>
<p>前端开发时，为了让网站的资源快速响应，提高网站的响应速度，我们通常会使用到 CDN。CDN 又叫做内容分发网络，原理是将服务内容分发到全网加速节点，让用户优先从最近的服务器节点上获取内容，从而加速网站访问速度。大多服务商，比如阿里云、腾讯云、又拍云、七牛云等的 CDN 都是按量收费的，但也有一些服务商体用了免费的 CDN 服务。今天就来看看，我从网上给大家找到的一些免费可用的 CDN！</p>
<h2> <a href="http://cdnjs.com" target="_blank" rel="noopener noreferrer">cdnjs.com</a></h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://cdnjs.com/" target="_blank" rel="noopener noreferrer">https://cdnjs.com/</a></li>
</ul>
<p>作为全球最为著名的开源 CDN 库，想必每个从事前端的工作的小伙伴都对他有所了解吧。该网站使用 <code>CloudFlare</code> 分发，如果你是在国外使用，那速度没的说，嗖嗖的。不过要是在国内，那还是优先考虑下其他的吧，因为它在国内访问时实在是太慢了！</p>
<h2> 字节跳动</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="http://cdn.bytedance.com/" target="_blank" rel="noopener noreferrer">http://cdn.bytedance.com/</a></li>
</ul>
<p>由国内字节跳动公司所出品的公共库，同步 <code>cdnjs.com</code>，但有时候可能针对部分库未及时更新到最新版本，需要注意这一点，否则在使用时可能会导致一些莫名的错误。</p>
<h2> jsDelivr</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener noreferrer">https://www.jsdelivr.com/</a></li>
</ul>
<p>jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。想必这个 CDN 大家都不会陌生吧，没准儿在看博客的各位就一直在用着它。</p>
<p>当然，除了以上作用之外，它还可以作为我们图床的加速器，这里不用说，想必许多作者可能都搭配着 Github + jsDelivr 搭建了自己的图床吧。</p>
<h2> UNPKG</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://unpkg.com/" target="_blank" rel="noopener noreferrer">https://unpkg.com/</a></li>
</ul>
<p>unpkg 是一个快速的全球内容交付网络，适用于 npm 中的所有内容。通过使用它，能够使用以下类似的 URL 就能快速轻松地从任何包加载任何文件！</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> BootCDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://www.bootcdn.cn/" target="_blank" rel="noopener noreferrer">https://www.bootcdn.cn/</a></li>
</ul>
<p>BootCDN 是极兔云联合 Bootstrap 中文网共同支持并维护的前端开源项目免费 CDN 服务，致力于为 Bootstrap、jQuery、React、Vue.js 等优秀的前端开源项目提供稳定、快速的免费 CDN 加速服务。BootCDN 所收录的开源项目主要同步于 cdnjs 开源项目仓库，截止文章写作时共收录了 <strong>4256</strong> 个前端开源项目。而且自 2013 年以来已经累计为仅百万网站提供稳定可靠的免费 CDN 加速服务，可以说是相当靠谱了！</p>
<h2> 75 CDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://cdn.baomitu.com" target="_blank" rel="noopener noreferrer">https://cdn.baomitu.com</a></li>
</ul>
<p>谐音于奇舞，是由 360 前端奇舞团支持并维护的开源项目免费 CDN 服务，支持 HTTPS 和 HTTP/2，囊括了上千个前端资源库和 Google 字体库。而且是首个支持 HTTP/2 的 CDN 服务，共收录了 4275 个开源项目，均同步于 cdnjs！</p>
<h2> Staticfile CDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://staticfile.org/" target="_blank" rel="noopener noreferrer">https://staticfile.org/</a></li>
</ul>
<p>这是一个免费、快速、开放的 CDN 服务。你可能没听过这个 CDN，不过没关系，它背后的双引擎：七牛云和掘金想必你不会陌生吧。该网站由七牛云提供 CDN 加速，由技术社区掘金支持。</p>
<p>网站的目标是提供这样一个仓库，让它尽可能全面收录优秀的开源库，并免费为之提供 CDN 加速服务，使之有更好的访问速度和稳定的环境。同时，也提供开源库源接入的入口，让所有人都能够提交开源库，包括 JavaScript、CSS、图片和 swf 等静态文件。</p>
<h2> 总结</h2>
<p>以上就是今天分享的所有内容了，如果你正好在开发你的个人网站，但是又苦于响应速度太慢，不妨去试试使用这些 CDN，看看会不会加速网站响应速度呢？</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机专业涨薪必备的几个网站</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20220731-exercise-websites.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20220731-exercise-websites.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 计算机专业涨薪必备的几个网站</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 计算机专业涨薪必备的几个网站</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA</a></p>
</div>
<h2> 前言</h2>
<p>刚学习编程时，你是不是很烦恼该去哪儿找找题目来练习下，看看自己学的怎么样。有或者在找工作时，需要准备面试，但是又不知道该去哪儿刷题？针对这个情况，今天我就来给大家分享几个可以在线练习算法和面试题的网站，为大家找工作助力！</p>
<h2> PTA</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://pintia.cn/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>程序设计类实验辅助教学平台，由 7594 位来自 889 高校老师共同创建，囊括了 215679 道高质量题目，而且截止本文写作时已有 3137414 位注册用户。不过里边主要是针对 C、C++ 语言来进行答题，关于更多语言答题，还在进一步扩展中。<br>
如果你在学习 C/C++ 语言，那么不妨进入他们，和各个高校的学子一起在线拼题吧。</p>
<h2> LeetCode 美国站</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>全球极客挚爱的技术成长平台，与其说国内在用，还不如说是因为国外一线科技公司如谷歌、评估、Meta 等公司都在这里选拔人才，所以才引入的国内。如果的英语能力还 OK，那么强烈推荐你来这里练习算法，和来自世界各地的程序员们 Battle 一下，谁才是王者！</p>
<h2> LeetCode 中国站</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>当然了，除了美国站，LeetCode 还有中国站，相当于将美国站的内容翻译后搬运过来，但是又在此基础上进一步扩展了业务，加入了许多付费课程。如果你对自己的英语实在不自信，那么这里也不失为一个好去处。</p>
<h2> 牛客网</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>牛客网是一个集笔面试系统、题库、课程教育、社群交流、招聘内推于一体的招聘类网站。牛客向企业提供校园招聘&amp;技术人才招聘一站式解决方案服务，主要包括招聘渠道服务招聘SaaS工具服务（笔、面试，招聘传播服务（技术竞赛广告、线上招聘专场、牛客职播）等。<br>
除此之外，牛客网题库中还包含了几万道题目，内容覆盖笔试题解析、面试技巧和机器学习等。<br>
如果你正在准备校招或者准备换工作，那么强烈推荐你多去逛逛这个网站，不管是刷题也好，还是看看经验贴，没准儿面试的时候你就会在牛客进行。</p>
<h2> 炼码</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.lintcode.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>通过在线实操的方式，提升你的编程能力，从而轻松斩获名企 Offer。<br>
这里不仅有实操题目，还有各种精选题目集，更有针对热门编程语言如 Python、Java、SQL 等的学习教程，更有码力评测栏目，快来试试你的码力处于什么段位吧！</p>
<h2> 赛码</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.acmcoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>一个免费在线考试系统、在线面试系统，稳定专业且易用。里边汇聚了腾讯、阿里、字节跳动、百度、京东、小米、华为等一线互联网的真题，如果你参加过校招，那么你肯定不会陌生这个网站，因为会有好多公司都会选择在这里进行笔试。</p>
<h2> 百面网</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="http://www.100mian.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>IT 公司面试神器，这里不仅提供了 300 本计算机编程经典书籍免费下载，还有针对互联网各个岗位的面试题，如果你也刚好需要找工作，不妨来这里看看经验和面试题。</p>
<h2> hihoCoder</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="http://hihocoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>通过高水平的程序设计比赛提升编程水平，得到名企offer。致力于成为编程者与企业之间交流沟通的桥梁，同时也努力为编程爱好者提供提高自身编程水平的场所。</p>
<h2> 7 月在线</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.julyedu.com/question/index" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>一站式刷遍目前国内各大互联网公司人工智能笔试面试题，涵盖了所有考点，解析精准详尽。<br>
站中主要分为笔试练习、面试大题、在线编程三大模块，而各个模块下又分别设置了：人工智能、数据结构与算法、数理逻辑、编程开发、计算机基础等子模块，可以说是非常详细了。</p>
<h2> N 诺</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://noobdream.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>如果你有计算机学习考研方面的打算，那么推荐你一定要上去看看，这可以说是计算机学习考研的人所必备的神器。里面提供了许多免费的的学习资源。<br>
网站设有有数学、英语、政治、C 语言、数据结构、操作系统、网络、组成原理、数据库等课程的专区，还有上岸的名校大佬来这里分享自己的考研经验。如果你苦于找考研方面的经验、试题等资料，那么不妨来这里看看吧！</p>
<h2> 总结</h2>
<p>以上就是我在日常冲浪中发现的几个刷题网站了，基本上是涵盖了学习和工作过程中的需求吧。而且针对不同需要可以选择不同的网站进去学习，如果你要考研学习，那么可以去看看 N 诺；如果你只是为了提升算法，那么 LeetCode 可能更适合你；而如果你要求职找工作，那么牛客网、赛码网等常见面试网站就可以多逛逛；而如果你是想找人工智能方面的面试题，那么不妨去七月在线瞅一眼。</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">黑客大神也常用的一些 CMD 命令</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20221127-cmd.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20221127-cmd.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 黑客大神也常用的一些 CMD 命令</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 黑客大神也常用的一些 CMD 命令</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw</a></p>
</div>
<h2> 前言</h2>
<p>作为一个程序员，可能更多的是在 <code>Linux</code> 中使用命令来操作。但在日常使用 <code>Windows</code> 的过程中，或多或少会使用到命令提示符窗口，也就是 <code>Windows</code> 中的 <code>CMD</code>。这个时候，掌握一些常用的命令就尤为重要了，一方面方便自己使用，另一方面，也方便给电脑小白露一手 👀。那接下来就来看看，<code>CMD</code> 中最常用的一些命令。</p>
<h2> 如何打开命令提示符窗口</h2>
<p>打开的方式很多，这里例举常用的 <code>5</code> 种。</p>
<ol>
<li><strong>方法 1</strong></li>
</ol>
<p><code>Win + R</code> 快捷键打开运行，输入 <code>cmd</code> 后回车。</p>
<ol start="2">
<li><strong>方法 2</strong></li>
</ol>
<p>依次打开开始菜单 -&gt; <code>Windows</code> 系统（<code>Windows</code> 工具） -&gt; 命令提示符。</p>
<ol start="3">
<li><strong>方法 3</strong></li>
</ol>
<p>打开资源管理器，然后在地址栏输入 <code>cmd</code> 后回车。</p>
<ol start="4">
<li><strong>方法 4</strong></li>
</ol>
<p>鼠标右键点击开始菜单的 <code>Win</code> 图标，找到命令提示符（终端）并进入。</p>
<ol start="5">
<li><strong>方法 5</strong></li>
</ol>
<p>在任务栏中的搜索栏中搜索 <code>cmd</code> 并打开。</p>
<h2> 常用命令</h2>
<h3> 目录操作</h3>
<ol>
<li><strong>磁盘切换</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如 <code>D:</code> 就代码进入 <code>D</code> 盘。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>进入指定目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li><strong>返回磁盘根目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>返回上级目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="5">
<li><strong>新建目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>查看当前目录中内容</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="7">
<li><strong>查看指定目录结构</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="8">
<li><strong>删除目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="9">
<li><strong>复制文件</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="10">
<li><strong>删除文件</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 开关机操作</h3>
<ol>
<li><strong>关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>重启</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>注销</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li><strong>休眠</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li><strong>定时关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>取消关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 网络操作</h3>
<ol>
<li><strong>测试网络延迟和丢包率</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>查看本机 ip 地址</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li><strong>清除本地 DNS 缓存</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>路由追踪</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 进程/服务操作</h3>
<ol>
<li><strong>查看当前运行的进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>运行指定程序或命令</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>按名称结束进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>按 PID 结束进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="5">
<li><strong>查看当前运行的服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>启动指定服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="7">
<li><strong>停止指定服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 其他操作</h3>
<ol>
<li><strong>清除屏幕</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br>
</p>
<ol start="2">
<li><strong>退出</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是今天所带来的 <code>Windows</code> 中常用的 <code>CMD</code> 命令了，对付日常使用完全够了，更多的一些命令用到的频率较低，可以在有需要的时候再去具体搜索。</p>
<p>如果觉得对各位朋友有用的话，不妨点个赞再走呀 ~</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
</feed>